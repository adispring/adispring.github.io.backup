{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"44bbc0e94e5c3d8c63d01c499ef0792b5fadb124","modified":1484577678000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1477799961000},{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1477360371000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1477799961000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1477799961000},{"_id":"themes/next/.gitignore","hash":"c8d6a73b9e17f0f8a3716e4ada6960d3180425a6","modified":1477799961000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1477799961000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1477799961000},{"_id":"themes/next/.DS_Store","hash":"9457f542cf2c3f2a50b9ecd64858fc6f50b0d0c4","modified":1477834711000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1477799961000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1477799961000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1477799961000},{"_id":"themes/next/gulpfile.coffee","hash":"d267332ec1461042fb16a9cb0737e1555fb4b79e","modified":1477799961000},{"_id":"themes/next/_config.yml","hash":"4b45c08d4d28769eae52dfad4881448c8964a7d0","modified":1497070529000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1477799961000},{"_id":"source/_posts/Functor-Applicative-Monoid-Monad.md","hash":"6c9795f69687b244788571186788a1f3a2df2492","modified":1488814723000},{"_id":"source/categories/index.md","hash":"931766ef47014746752f2f7ba26b8bd51c447f1c","modified":1497070655000},{"_id":"source/_posts/Ramda-SourceCode-Analyze.md","hash":"2ccfd56973956ce64df361d76decf5100b7e3125","modified":1477198229000},{"_id":"source/_posts/.DS_Store","hash":"bfc295bb06b16aa69520c2c94377cd9ce54c39d8","modified":1484444764000},{"_id":"source/_posts/Thinking-in-Ramda-Combining-Functions.md","hash":"e612b79b7c84476aa162afdbcc1d2402091421a4","modified":1497360789000},{"_id":"source/_posts/Thinking-in-Ramda-Declarative-Programming.md","hash":"8a4cf1f33f3c6d2b769b2a109bf40961bc2983e8","modified":1497488820000},{"_id":"source/_posts/Thinking-in-Ramda-Partial-Application.md","hash":"2140519010d6066b2cac2a64ca22c2a9df174b0d","modified":1497360875000},{"_id":"source/_posts/Thinking-in-Ramda-Pointfree-Style.md","hash":"5e1a6658246d91cde960e880e43a63002d898898","modified":1497488955000},{"_id":"source/_posts/Ramda-map-filter-reduce-transduce.md","hash":"e9917f5388992e039b51350f25feace4f50d9981","modified":1477234393000},{"_id":"source/_posts/Thinking-in-Ramda-入门.md","hash":"1d0e5185f241843097dce7433c7b9098911d2e6f","modified":1497132388000},{"_id":"source/_posts/hello-world.md","hash":"a045fb077aa170245478be2e5db4d01fe409bf19","modified":1497071270000},{"_id":"source/_posts/Transducers-Explained-Part-1.md","hash":"bd33b1fdd3c04c6a9419be35e372590c7e644865","modified":1497054188000},{"_id":"source/_posts/Transducers-Explained-Pipelines.md","hash":"df1a1ead1f7af55458f62837c878dc7f738331ba","modified":1481376089000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1477799961000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1477799961000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1477799961000},{"_id":"themes/next/.git/index","hash":"df678208a4c57175c7a3916c8e710e9b4addcc25","modified":1485739781000},{"_id":"themes/next/.git/packed-refs","hash":"e31117651c0ba696618bdd42320eb8b5ada32440","modified":1477799961000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1477799961000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1477799961000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1477799961000},{"_id":"themes/next/languages/en.yml","hash":"63de36e9f5822084b61b03a507f6246f8f962b3f","modified":1477799961000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1477799961000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1477799961000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1477799961000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1477799961000},{"_id":"themes/next/languages/ko.yml","hash":"ce8b047c89daae77c03482fc76f16ffec6bdbf2d","modified":1477799961000},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1477799961000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1477799961000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"ed36a28104f3c185fc4a0b3e52071d0efabe168c","modified":1477799961000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1477799961000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1477799961000},{"_id":"themes/next/layout/_layout.swig","hash":"627aa021dd052d3700e84f8c2eeabd4e30989158","modified":1477799961000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1477799961000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1477799961000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1477799961000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1477799961000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1477799961000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1477799961000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1477799961000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1477799961000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1477799961000},{"_id":"themes/next/source/.DS_Store","hash":"495dc0d217dbc3e7cb0c015a4aa9af3e7011d37f","modified":1477873882000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1477799961000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1477799961000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1477799961000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477799961000},{"_id":"source/_posts/Ramda-map-filter-reduce-transduce/mapFilterReduce.jpg","hash":"d823673b20964717e288c868bc9244058627b649","modified":1477187177000},{"_id":"source/_posts/Ramda-map-filter-reduce-transduce/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1477626556000},{"_id":"source/_posts/Transducers-Explained-Part-1/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1484444752000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1477799961000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1477799961000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1477799961000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1477799961000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1477799961000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1477799961000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1477799961000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1477799961000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1477799961000},{"_id":"themes/next/.git/logs/HEAD","hash":"a670b3d22cbdea3ff85b8302e2da7d376e605a72","modified":1477799961000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1477799961000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"bc311e9f4333188da5c9c721ae467ba14410d5b2","modified":1477799961000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1477799961000},{"_id":"themes/next/layout/_macro/post.swig","hash":"ea40d388ae190e2228cbe54f054be621e3fa061c","modified":1477799961000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"084867c289c95c5ebc18435a3b2092091bb8e2ba","modified":1477799961000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"58fd826ca75b0cbc48b61a58da4b841e2fa34403","modified":1477799961000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1477799961000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1477799961000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4fe588ff8ba8587885c2936db2df490774f89e10","modified":1477799961000},{"_id":"themes/next/layout/_partials/head.swig","hash":"06b6604176367af52587312e2575b52ecf53c3d9","modified":1477799961000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1477799961000},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1477799961000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1477799961000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1477799961000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1477799961000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1477799961000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1477799961000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1477799961000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1477799961000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1477799961000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1477799961000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1477799961000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1477799961000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1477799961000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1477799961000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1477799961000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1477799961000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1477799961000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1477799961000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1477799961000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1477799961000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1477799961000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1477799961000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1477799961000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477799961000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477799961000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477799961000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477799961000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477799961000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477799961000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477799961000},{"_id":"source/_posts/Transducers-Explained-Part-1/compose_transducers.png","hash":"b41daff12ec79f0cb8c551943602c22dbc20efbe","modified":1484444719000},{"_id":"source/_posts/Transducers-Explained-Part-1/reduce.png","hash":"98e9b9be0906b03c4e1e5d2373929bc757588884","modified":1477880662000},{"_id":"themes/next/.git/refs/heads/master","hash":"d36f6d651a14df9393aefd229995a965ad126eca","modified":1477799961000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1477799961000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1477799961000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1477799961000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1477799961000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1477799961000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1477799961000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1477799961000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1477799961000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1477799961000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1477799961000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1477799961000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1477799961000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"60a51a33416e2b86ac9fbefc86b80f2f5f60e1c0","modified":1477799961000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1477799961000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1477799961000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1477799961000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1477799961000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1477799961000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1477799961000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1477799961000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1477799961000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"3f0d6aa424f434e82ea507f740eeff110f996269","modified":1477799961000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1477799961000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1477799961000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1477799961000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1477799961000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1477799961000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1477799961000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1477799961000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1477799961000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1477799961000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1477799961000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1477799961000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1477799961000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1477799961000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1477799961000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1477799961000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1477799961000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1477799961000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1477799961000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1477799961000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1477799961000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1477799961000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1477799961000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1477799961000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1477799961000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1477799961000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1477799961000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1477799961000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1477799961000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1477799961000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1477799961000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1477799961000},{"_id":"source/_posts/Transducers-Explained-Part-1/transduce.png","hash":"3e35bfb17c087708dd87808e66725640944077d2","modified":1484444597000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1477799961000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1477799961000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"a670b3d22cbdea3ff85b8302e2da7d376e605a72","modified":1477799961000},{"_id":"themes/next/.git/objects/pack/pack-26d81fcbc983244e4f41129af2ccbecd702a2e0f.idx","hash":"f66a5614f99b93c017c2eb1344b6b5ff1dac373f","modified":1477799961000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1477799961000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1477799961000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1477799961000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1477799961000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"3065c1bcb54da1e0018136595741341ac71ef9e7","modified":1477799961000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1477799961000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1477799961000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1477799961000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1477799961000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1477799961000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1477799961000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1477799961000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1477799961000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1477799961000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1477799961000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1477799961000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1477799961000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1477799961000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1477799961000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1477799961000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1477799961000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1477799961000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1477799961000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1477799961000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1477799961000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1477799961000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1477799961000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"7b206cd8921bc042f8e37a74aea1abc8a5ec8ab4","modified":1477799961000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1477799961000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1477799961000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1477799961000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1477799961000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1477799961000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1477799961000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1477799961000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1477799961000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1477799961000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1477799961000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1477799961000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1477799961000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1477799961000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1477799961000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1477799961000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1477799961000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1477799961000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1477799961000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1477799961000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1477799961000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1477799961000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1477799961000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1477799961000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1477799961000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1477799961000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1477799961000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1477799961000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"a670b3d22cbdea3ff85b8302e2da7d376e605a72","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"d23db2f598b8eb274680023745ba6d6d466cd84a","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1477799961000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1477799961000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1477799961000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1477799961000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1477799961000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1477799961000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1477799961000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1477799961000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1477799961000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1477799961000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1477799961000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1477799961000},{"_id":"themes/next/source/images/avatar.jpg","hash":"93f59ce33466108d985c96383b8a4e28287a64bc","modified":1477812796000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1477799961000},{"_id":"themes/next/.git/objects/pack/pack-26d81fcbc983244e4f41129af2ccbecd702a2e0f.pack","hash":"712e29eb8631e844a0fa1c47c433296a1afebecd","modified":1477799961000},{"_id":"public/categories/index.html","hash":"c1223105f952c4688304c341b4302193f8f8dcdc","modified":1497488683679},{"_id":"public/2016/10/23/hello-world/index.html","hash":"de466232b9c2e3cec69e2eaeddd8beeecc02476c","modified":1497488683681},{"_id":"public/categories/Thinking-in-Ramda/index.html","hash":"581c35212a6eaf6727f580f8745f164f145c00ca","modified":1497488960640},{"_id":"public/archives/2016/index.html","hash":"9b63a24e2404e4031444f5119d4752f95618a923","modified":1497488683682},{"_id":"public/archives/2016/10/index.html","hash":"c613db037d47a064d9ddd1f9eab9f7d7e4caa08b","modified":1497488683682},{"_id":"public/archives/2016/11/index.html","hash":"6bf9394c62f0db145aa29026fc28b2ffff4cc734","modified":1497488683682},{"_id":"public/archives/2017/index.html","hash":"eabdb82afaaff4acc1a74b0f70f07b7166890059","modified":1497488960640},{"_id":"public/archives/2017/06/index.html","hash":"3d9f6c980c4fabd7a4dcb0883049c69dab4eced1","modified":1497488960640},{"_id":"public/2017/06/11/Thinking-in-Ramda-Declarative-Programming/index.html","hash":"e6cf39b6af2d039bfdb505aee5aaee2a3b032678","modified":1497488960640},{"_id":"public/2017/06/11/Thinking-in-Ramda-Partial-Application/index.html","hash":"d41405bf7d42cba0eef3e842a5a8c48800178693","modified":1497488683682},{"_id":"public/2017/06/10/Thinking-in-Ramda-Combining-Functions/index.html","hash":"265d5eee3164f4cbf764b33b150ddeaefcadd2ce","modified":1497488683682},{"_id":"public/2017/06/09/Thinking-in-Ramda-入门/index.html","hash":"37fc249d11c34212b780e2c30b73ca81ba2ba16d","modified":1497488683682},{"_id":"public/2016/11/19/Functor-Applicative-Monoid-Monad/index.html","hash":"95eafb95761bd975f393e41e8799922c3a523e2a","modified":1497488683682},{"_id":"public/2016/11/01/Transducers-Explained-Pipelines/index.html","hash":"acc9af4a775d50890a3d128c7ca61d31a0e0b8d0","modified":1497488683682},{"_id":"public/2016/10/24/Transducers-Explained-Part-1/index.html","hash":"431e2cbdc6f88195fca4c09ea0404adbe7b2f7a9","modified":1497488683682},{"_id":"public/2016/10/23/Ramda-map-filter-reduce-transduce/index.html","hash":"fe40665eb2fa93eb00799f97e79e91c4c4780153","modified":1497488683682},{"_id":"public/2016/10/21/Ramda-SourceCode-Analyze/index.html","hash":"2082109d38a2b5e9c97a58f70eed6f6870a4d26b","modified":1497488683683},{"_id":"public/index.html","hash":"79b3cc41524d913a3a13857aadb50c5a64fa7e97","modified":1497488960640},{"_id":"public/archives/index.html","hash":"5825cd03cfbff1534700f4b25cdf8302513c6dd0","modified":1497488960640},{"_id":"public/archives/page/2/index.html","hash":"a1740054c3630bef42d1d0bce4c8f9599fcc80d9","modified":1497488683684},{"_id":"public/2017/06/13/Thinking-in-Ramda-Pointfree-Style/index.html","hash":"81c9629286dfaf76d044961a0eb198edb5fdfa5a","modified":1497488960640},{"_id":"public/page/2/index.html","hash":"ce2f404dd507a6ae026a7c3dfb6d0fb03392ebe0","modified":1497488683684}],"Category":[{"name":"Thinking in Ramda","_id":"cj3vm14h000053bs6y2ve7nd4"}],"Data":[],"Page":[{"title":"categories","date":"2017-06-10T04:51:37.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-06-10 12:51:37\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-06-10T04:57:35.000Z","path":"categories/index.html","layout":"page","_id":"cj3vm14gk00013bs6tug2zd7k","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Functor/Applicative/Monoid/Monad","date":"2016-11-19T05:31:25.000Z","_content":"## Applicative类 的定义\n\n```haskell\nclass (Functor f) => Applicative f where\n  pure :: a -> f a\n  (<*>) :: f (a -> b) -> f a -> f b\n```\n\nApplicative 中定义了 `pure` 和 `<*>`\n\n## Applicative Functor 的几个实例\n\n### Maybe\n```haskell\ninstance Applicative Maybe where\n  pure = Just\n  Nothing <*> _ = Nothing\n  (Just f) <*> something = fmap f something\n```\n\n### Applicative 相较于 Functor 的改进之处：\n\nwith the Applicative type class, we can chain the use of the <\\*> function, thus enabling us to seamlessly operate on several applicative values instead of just one. For instance, check this out:\n\n```haskell\npure(+) <*> Just 3 <*> Just 5 -- Just 8\n```\n\nlift 相当于 `pure`\n\n### Applicative 中还定义了 `<$>`\n\n<$> 相当于中缀版的 fmap，但应用于 Applicative 的链式调用特别方便\n\n```haskell\n(<$>) :: (Functor f) => (a -> b) -> f a -> f b\nf <$> x = fmap f x\n-- pure f <*> x <*> y <*> ... === fmap f x <*> y... === f <$> x <*> y...\n```\n\n### List 也是 Applicative Functor\n\n```haskell\ninstance Applicative [] where\n  pure x = [x]\n  fs <*> xs = [f x | f <- fs, x <- xs]\n```\n\n理解了 haskell 中 List 的 `<*>` 也就理解了 Ramda 中的 `liftN`\n将 fs 中的每个 f map 到 xs 中的每个 x。\n\n例如\n```haskell\nfs = [f1, f2, f3]\nxs = [x1, x2]\nfs <*> xs === [f1 x1, f1 f2, f2 x1, f2 x2, f3 x1, f3 x2]\n```\n\n### 函数 `(->) r` 也是 Applicative Functor 很有意思\n\n```haskell\ninstance Applicative ((->) r) where\n  pure x = (\\_ -> x)\n  f <*> g = \\x -> f x (g x)\n```\n\n```haskell\n(pure 3) \"blah\" -- 3\n(+) <$> (+3) <*> (*100) $ 5 -- 508\n```\n\n`<$>` + `<*>` 大致对标 Ramda 中的 converge\n\n## Laws\n\n### 1. [Functor Laws](https://en.wikibooks.org/wiki/Haskell/The_Functor_class)\n\n```haskell\nfmap id = id\nfmap (g . f) = fmap g . fmap f\n```\n\n### 2. [Applicative Functor Laws](https://en.wikibooks.org/wiki/Haskell/Applicative_functors)\n```haskell\npure id <*> v = v                             -- Identity\npure f <*> pure x = pure (f x)                -- Homomorphism\nu <*> pure y = pure ($ y) <*> u               -- Interchange\npure (.) <*> u <*> v <*> w = u <*> (v <*> w)  -- Composition\n```\na bonus law\n```\nfmap f x = pure f <*> x\n```\n\n### 3. [Monad Laws](https://wiki.haskell.org/Monad_laws)\n```haskell\nreturn a >>= k  =  k a\nm >>= return  =  m\nm >>= (x -> k x >>= h)  =  (m >>= k) >>= h\n```\n","source":"_posts/Functor-Applicative-Monoid-Monad.md","raw":"---\ntitle: Functor/Applicative/Monoid/Monad\ndate: 2016-11-19 13:31:25\ntags:\n---\n## Applicative类 的定义\n\n```haskell\nclass (Functor f) => Applicative f where\n  pure :: a -> f a\n  (<*>) :: f (a -> b) -> f a -> f b\n```\n\nApplicative 中定义了 `pure` 和 `<*>`\n\n## Applicative Functor 的几个实例\n\n### Maybe\n```haskell\ninstance Applicative Maybe where\n  pure = Just\n  Nothing <*> _ = Nothing\n  (Just f) <*> something = fmap f something\n```\n\n### Applicative 相较于 Functor 的改进之处：\n\nwith the Applicative type class, we can chain the use of the <\\*> function, thus enabling us to seamlessly operate on several applicative values instead of just one. For instance, check this out:\n\n```haskell\npure(+) <*> Just 3 <*> Just 5 -- Just 8\n```\n\nlift 相当于 `pure`\n\n### Applicative 中还定义了 `<$>`\n\n<$> 相当于中缀版的 fmap，但应用于 Applicative 的链式调用特别方便\n\n```haskell\n(<$>) :: (Functor f) => (a -> b) -> f a -> f b\nf <$> x = fmap f x\n-- pure f <*> x <*> y <*> ... === fmap f x <*> y... === f <$> x <*> y...\n```\n\n### List 也是 Applicative Functor\n\n```haskell\ninstance Applicative [] where\n  pure x = [x]\n  fs <*> xs = [f x | f <- fs, x <- xs]\n```\n\n理解了 haskell 中 List 的 `<*>` 也就理解了 Ramda 中的 `liftN`\n将 fs 中的每个 f map 到 xs 中的每个 x。\n\n例如\n```haskell\nfs = [f1, f2, f3]\nxs = [x1, x2]\nfs <*> xs === [f1 x1, f1 f2, f2 x1, f2 x2, f3 x1, f3 x2]\n```\n\n### 函数 `(->) r` 也是 Applicative Functor 很有意思\n\n```haskell\ninstance Applicative ((->) r) where\n  pure x = (\\_ -> x)\n  f <*> g = \\x -> f x (g x)\n```\n\n```haskell\n(pure 3) \"blah\" -- 3\n(+) <$> (+3) <*> (*100) $ 5 -- 508\n```\n\n`<$>` + `<*>` 大致对标 Ramda 中的 converge\n\n## Laws\n\n### 1. [Functor Laws](https://en.wikibooks.org/wiki/Haskell/The_Functor_class)\n\n```haskell\nfmap id = id\nfmap (g . f) = fmap g . fmap f\n```\n\n### 2. [Applicative Functor Laws](https://en.wikibooks.org/wiki/Haskell/Applicative_functors)\n```haskell\npure id <*> v = v                             -- Identity\npure f <*> pure x = pure (f x)                -- Homomorphism\nu <*> pure y = pure ($ y) <*> u               -- Interchange\npure (.) <*> u <*> v <*> w = u <*> (v <*> w)  -- Composition\n```\na bonus law\n```\nfmap f x = pure f <*> x\n```\n\n### 3. [Monad Laws](https://wiki.haskell.org/Monad_laws)\n```haskell\nreturn a >>= k  =  k a\nm >>= return  =  m\nm >>= (x -> k x >>= h)  =  (m >>= k) >>= h\n```\n","slug":"Functor-Applicative-Monoid-Monad","published":1,"updated":"2017-03-06T15:38:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3vm14ge00003bs6cis4qxyr","content":"<h2 id=\"applicative-lei-de-ding-yi\">Applicative类 的定义</h2>\n<p><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> (<span class=\"type\">Functor</span> <span class=\"title\">f</span>) =&gt; <span class=\"type\">Applicative</span> f <span class=\"keyword\">where</span></span></div><div class=\"line\">  pure :: a -&gt; f a</div><div class=\"line\">  (&lt;*&gt;) :: f (a -&gt; b) -&gt; f a -&gt; f b</div></pre></td></tr></table></figure></p>\n<p>Applicative 中定义了 <code>pure</code> 和 <code>&lt;*&gt;</code></p>\n<h2 id=\"applicative-functor-de-ji-ge-shi-li\">Applicative Functor 的几个实例</h2>\n<h3 id=\"maybe\">Maybe</h3>\n<p><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Applicative</span> <span class=\"type\">Maybe</span> <span class=\"keyword\">where</span></span></div><div class=\"line\">  pure = <span class=\"type\">Just</span></div><div class=\"line\">  <span class=\"type\">Nothing</span> &lt;*&gt; _ = <span class=\"type\">Nothing</span></div><div class=\"line\">  (<span class=\"type\">Just</span> f) &lt;*&gt; something = fmap f something</div></pre></td></tr></table></figure></p>\n<h3 id=\"applicative-xiang-jiao-yu-functor-de-gai-jin-zhi-chu\">Applicative 相较于 Functor 的改进之处：</h3>\n<p>with the Applicative type class, we can chain the use of the &lt;*&gt; function, thus enabling us to seamlessly operate on several applicative values instead of just one. For instance, check this out:</p>\n<p><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">pure</span>(+) &lt;*&gt; <span class=\"type\">Just</span> <span class=\"number\">3</span> &lt;*&gt; <span class=\"type\">Just</span> <span class=\"number\">5</span> <span class=\"comment\">-- Just 8</span></div></pre></td></tr></table></figure></p>\n<p>lift 相当于 <code>pure</code></p>\n<h3 id=\"applicative-zhong-huan-ding-yi-liao-code-lt-gt-code\">Applicative 中还定义了 <code>&lt;$&gt;</code></h3>\n<p>&lt;$&gt; 相当于中缀版的 fmap，但应用于 Applicative 的链式调用特别方便</p>\n<p><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(&lt;$&gt;) :: (<span class=\"type\">Functor</span> f) =&gt; (a -&gt; b) -&gt; f a -&gt; f b</div><div class=\"line\"><span class=\"title\">f</span> &lt;$&gt; x = fmap f x</div><div class=\"line\"><span class=\"comment\">-- pure f &lt;*&gt; x &lt;*&gt; y &lt;*&gt; ... === fmap f x &lt;*&gt; y... === f &lt;$&gt; x &lt;*&gt; y...</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"list-ye-shi-applicative-functor\">List 也是 Applicative Functor</h3>\n<p><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Applicative</span> [] <span class=\"keyword\">where</span></span></div><div class=\"line\">  pure x = [x]</div><div class=\"line\">  fs &lt;*&gt; xs = [f x | f &lt;- fs, x &lt;- xs]</div></pre></td></tr></table></figure></p>\n<p>理解了 haskell 中 List 的 <code>&lt;*&gt;</code> 也就理解了 Ramda 中的 <code>liftN</code>\n将 fs 中的每个 f map 到 xs 中的每个 x。</p>\n<p>例如\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">fs</span> = [f1, f2, f3]</div><div class=\"line\"><span class=\"title\">xs</span> = [x1, x2]</div><div class=\"line\"><span class=\"title\">fs</span> &lt;*&gt; xs === [f1 x1, f1 f2, f2 x1, f2 x2, f3 x1, f3 x2]</div></pre></td></tr></table></figure></p>\n<h3 id=\"han-shu-code-gt-r-code-ye-shi-applicative-functor-hen-you-yi-si\">函数 <code>(-&gt;) r</code> 也是 Applicative Functor 很有意思</h3>\n<p><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Applicative</span> ((-&gt;) r) <span class=\"keyword\">where</span></span></div><div class=\"line\">  pure x = (\\_ -&gt; x)</div><div class=\"line\">  f &lt;*&gt; g = \\x -&gt; f x (g x)</div></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(pure <span class=\"number\">3</span>) <span class=\"string\">\"blah\"</span> <span class=\"comment\">-- 3</span></div><div class=\"line\">(+) &lt;$&gt; (+<span class=\"number\">3</span>) &lt;*&gt; (*<span class=\"number\">100</span>) $ <span class=\"number\">5</span> <span class=\"comment\">-- 508</span></div></pre></td></tr></table></figure></p>\n<p><code>&lt;$&gt;</code> + <code>&lt;*&gt;</code> 大致对标 Ramda 中的 converge</p>\n<h2 id=\"laws\">Laws</h2>\n<h3 id=\"1-a-href-https-en-wikibooks-org-wiki-haskell-the-functor-class-functor-laws-a\">1. <a href=\"https://en.wikibooks.org/wiki/Haskell/The_Functor_class\" target=\"_blank\" rel=\"external\">Functor Laws</a></h3>\n<p><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">fmap</span> id = id</div><div class=\"line\"><span class=\"title\">fmap</span> (g . f) = fmap g . fmap f</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-a-href-https-en-wikibooks-org-wiki-haskell-applicative-functors-applicative-functor-laws-a\">2. <a href=\"https://en.wikibooks.org/wiki/Haskell/Applicative_functors\" target=\"_blank\" rel=\"external\">Applicative Functor Laws</a></h3>\n<p><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">pure</span> id &lt;*&gt; v = v                             <span class=\"comment\">-- Identity</span></div><div class=\"line\"><span class=\"title\">pure</span> f &lt;*&gt; pure x = pure (f x)                <span class=\"comment\">-- Homomorphism</span></div><div class=\"line\"><span class=\"title\">u</span> &lt;*&gt; pure y = pure ($ y) &lt;*&gt; u               <span class=\"comment\">-- Interchange</span></div><div class=\"line\"><span class=\"title\">pure</span> (.) &lt;*&gt; u &lt;*&gt; v &lt;*&gt; w = u &lt;*&gt; (v &lt;*&gt; w)  <span class=\"comment\">-- Composition</span></div></pre></td></tr></table></figure></p>\n<p>a bonus law\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fmap f x = pure f &lt;*&gt; x</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-a-href-https-wiki-haskell-org-monad-laws-monad-laws-a\">3. <a href=\"https://wiki.haskell.org/Monad_laws\" target=\"_blank\" rel=\"external\">Monad Laws</a></h3>\n<p><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">return</span> a &gt;&gt;= k  =  k a</div><div class=\"line\"><span class=\"title\">m</span> &gt;&gt;= return  =  m</div><div class=\"line\"><span class=\"title\">m</span> &gt;&gt;= (x -&gt; k x &gt;&gt;= h)  =  (m &gt;&gt;= k) &gt;&gt;= h</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"applicative-lei-de-ding-yi\">Applicative类 的定义</h2>\n<p><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> (<span class=\"type\">Functor</span> <span class=\"title\">f</span>) =&gt; <span class=\"type\">Applicative</span> f <span class=\"keyword\">where</span></span></div><div class=\"line\">  pure :: a -&gt; f a</div><div class=\"line\">  (&lt;*&gt;) :: f (a -&gt; b) -&gt; f a -&gt; f b</div></pre></td></tr></table></figure></p>\n<p>Applicative 中定义了 <code>pure</code> 和 <code>&lt;*&gt;</code></p>\n<h2 id=\"applicative-functor-de-ji-ge-shi-li\">Applicative Functor 的几个实例</h2>\n<h3 id=\"maybe\">Maybe</h3>\n<p><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Applicative</span> <span class=\"type\">Maybe</span> <span class=\"keyword\">where</span></span></div><div class=\"line\">  pure = <span class=\"type\">Just</span></div><div class=\"line\">  <span class=\"type\">Nothing</span> &lt;*&gt; _ = <span class=\"type\">Nothing</span></div><div class=\"line\">  (<span class=\"type\">Just</span> f) &lt;*&gt; something = fmap f something</div></pre></td></tr></table></figure></p>\n<h3 id=\"applicative-xiang-jiao-yu-functor-de-gai-jin-zhi-chu\">Applicative 相较于 Functor 的改进之处：</h3>\n<p>with the Applicative type class, we can chain the use of the &lt;*&gt; function, thus enabling us to seamlessly operate on several applicative values instead of just one. For instance, check this out:</p>\n<p><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">pure</span>(+) &lt;*&gt; <span class=\"type\">Just</span> <span class=\"number\">3</span> &lt;*&gt; <span class=\"type\">Just</span> <span class=\"number\">5</span> <span class=\"comment\">-- Just 8</span></div></pre></td></tr></table></figure></p>\n<p>lift 相当于 <code>pure</code></p>\n<h3 id=\"applicative-zhong-huan-ding-yi-liao-code-lt-gt-code\">Applicative 中还定义了 <code>&lt;$&gt;</code></h3>\n<p>&lt;$&gt; 相当于中缀版的 fmap，但应用于 Applicative 的链式调用特别方便</p>\n<p><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(&lt;$&gt;) :: (<span class=\"type\">Functor</span> f) =&gt; (a -&gt; b) -&gt; f a -&gt; f b</div><div class=\"line\"><span class=\"title\">f</span> &lt;$&gt; x = fmap f x</div><div class=\"line\"><span class=\"comment\">-- pure f &lt;*&gt; x &lt;*&gt; y &lt;*&gt; ... === fmap f x &lt;*&gt; y... === f &lt;$&gt; x &lt;*&gt; y...</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"list-ye-shi-applicative-functor\">List 也是 Applicative Functor</h3>\n<p><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Applicative</span> [] <span class=\"keyword\">where</span></span></div><div class=\"line\">  pure x = [x]</div><div class=\"line\">  fs &lt;*&gt; xs = [f x | f &lt;- fs, x &lt;- xs]</div></pre></td></tr></table></figure></p>\n<p>理解了 haskell 中 List 的 <code>&lt;*&gt;</code> 也就理解了 Ramda 中的 <code>liftN</code>\n将 fs 中的每个 f map 到 xs 中的每个 x。</p>\n<p>例如\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">fs</span> = [f1, f2, f3]</div><div class=\"line\"><span class=\"title\">xs</span> = [x1, x2]</div><div class=\"line\"><span class=\"title\">fs</span> &lt;*&gt; xs === [f1 x1, f1 f2, f2 x1, f2 x2, f3 x1, f3 x2]</div></pre></td></tr></table></figure></p>\n<h3 id=\"han-shu-code-gt-r-code-ye-shi-applicative-functor-hen-you-yi-si\">函数 <code>(-&gt;) r</code> 也是 Applicative Functor 很有意思</h3>\n<p><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Applicative</span> ((-&gt;) r) <span class=\"keyword\">where</span></span></div><div class=\"line\">  pure x = (\\_ -&gt; x)</div><div class=\"line\">  f &lt;*&gt; g = \\x -&gt; f x (g x)</div></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(pure <span class=\"number\">3</span>) <span class=\"string\">\"blah\"</span> <span class=\"comment\">-- 3</span></div><div class=\"line\">(+) &lt;$&gt; (+<span class=\"number\">3</span>) &lt;*&gt; (*<span class=\"number\">100</span>) $ <span class=\"number\">5</span> <span class=\"comment\">-- 508</span></div></pre></td></tr></table></figure></p>\n<p><code>&lt;$&gt;</code> + <code>&lt;*&gt;</code> 大致对标 Ramda 中的 converge</p>\n<h2 id=\"laws\">Laws</h2>\n<h3 id=\"1-a-href-https-en-wikibooks-org-wiki-haskell-the-functor-class-functor-laws-a\">1. <a href=\"https://en.wikibooks.org/wiki/Haskell/The_Functor_class\" target=\"_blank\" rel=\"external\">Functor Laws</a></h3>\n<p><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">fmap</span> id = id</div><div class=\"line\"><span class=\"title\">fmap</span> (g . f) = fmap g . fmap f</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-a-href-https-en-wikibooks-org-wiki-haskell-applicative-functors-applicative-functor-laws-a\">2. <a href=\"https://en.wikibooks.org/wiki/Haskell/Applicative_functors\" target=\"_blank\" rel=\"external\">Applicative Functor Laws</a></h3>\n<p><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">pure</span> id &lt;*&gt; v = v                             <span class=\"comment\">-- Identity</span></div><div class=\"line\"><span class=\"title\">pure</span> f &lt;*&gt; pure x = pure (f x)                <span class=\"comment\">-- Homomorphism</span></div><div class=\"line\"><span class=\"title\">u</span> &lt;*&gt; pure y = pure ($ y) &lt;*&gt; u               <span class=\"comment\">-- Interchange</span></div><div class=\"line\"><span class=\"title\">pure</span> (.) &lt;*&gt; u &lt;*&gt; v &lt;*&gt; w = u &lt;*&gt; (v &lt;*&gt; w)  <span class=\"comment\">-- Composition</span></div></pre></td></tr></table></figure></p>\n<p>a bonus law\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fmap f x = pure f &lt;*&gt; x</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-a-href-https-wiki-haskell-org-monad-laws-monad-laws-a\">3. <a href=\"https://wiki.haskell.org/Monad_laws\" target=\"_blank\" rel=\"external\">Monad Laws</a></h3>\n<p><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">return</span> a &gt;&gt;= k  =  k a</div><div class=\"line\"><span class=\"title\">m</span> &gt;&gt;= return  =  m</div><div class=\"line\"><span class=\"title\">m</span> &gt;&gt;= (x -&gt; k x &gt;&gt;= h)  =  (m &gt;&gt;= k) &gt;&gt;= h</div></pre></td></tr></table></figure></p>\n"},{"title":"Ramda 源码分析（一） 柯里化curry","date":"2016-10-21T01:34:59.000Z","_content":"\n## Ramda 目录说明\n\n[Ramda](http://ramdajs.com) API 的源码都在 src/ 文件夹中，src/ 下包含一个 internal/ 文件夹和若干外部模块。直接在 **src/** 下编写的模块（函数）供**外部调用**，在 **internal/** 下编写的模块仅供**内部使用**，属于帮助函数，**内部函数以下划线 \"_\" 开头**。\n\n本次源码分析使用版本号为：Ramda v0.22.1。\n\n## 源码分析\n- \\_\\_ 占位符\n\n  占位符是一个 “普通的” object ，key 为 `@@functional/placeholder` ，value 为 true。\n  \n  ```js\n  module.exports = {'@@functional/placeholder': true};\n  ```\n  配合柯里化函数使用，可以使柯里化函数传入实参不在限于从左往右依次传入，大大增强了柯里化函数的能力。\n  \n  举例如下，g 是一个柯里化的 ternary（三元）函数，\\_ 代表 R.\\_\\_ ，下面的写法是等价的。\n  \n  ```js\n  g(1, 2, 3)\n  g(_, 2, 3)(1)\n  g(_, _, 3)(1)(2)\n  g(_, _, 3)(1, 2)\n  g(_, 2, _)(1, 3)\n  g(_, 2)(1)(3)\n  g(_, 2)(1, 3)\n  g(_, 2)(_, 3)(1)\n  ```\n  \n- \\_isPlaceholder\n  \n  判断实参是否为占位符（R.\\_\\_），在柯里化函数中使用。\n  \n  ```js\n  module.exports = function _isPlaceholder(a) {\n    return a != null &&\n\t     typeof a === 'object' &&\n\t     a['@@functional/placeholder'] === true;\n  };\n  ```\n  \n- \\_curry1\n  \n  优化的内部单参数柯里化函数：对单参数函数`fn` 进行柯里化，返回柯里化了的 fn' → f1。\n  \n  当传入参数为空或者传入的是占位符，返回 f1；否则执行 f1 ，并返回执行结果。\n  \n  柯里化用到了闭包。\\_curry1/\\_curry2/\\_curry3 是为了柯里化 ramda API 优化用的。因为 ramda API 都是原生柯里化的，且参数一般不超过3个，所以用到上述3个内部优化的柯里化函数，以提高效率。\n  \n  ```js\n  module.exports = function _curry1(fn) {\n    return function f1(a) {\n      if (arguments.length === 0 || _isPlaceholder(a)) {\n        return f1;\n      } else {\n        return fn.apply(this, arguments);\n      }\n    };\n  };\n  ```\n  \n- \\_curry2\n\n  优化的内部双参数柯里化函数：对双参数函数 `fn` 进行柯里化，返回柯里化了的 fn' → f2。\n  \n  原理讲解：\n  \n  1. 当无参数传入时，返回 f2；\n  2. 当有一个参数（a）传入时，判断该参数是否为 R.\\_\\_ ：是则返回 f2，否则返回加持一个参数（a）的单参数柯里化函数；\n  3. 当传入两个参数时，若都是占位符，返回 f2，若有一个占位符则返回加持一个参数的单参数柯里化函数，若无占位符，则执行 fn。\n  \n  ```js\n  module.exports = function _curry2(fn) {\n    return function f2(a, b) {\n      switch (arguments.length) {\n        case 0:\n          return f2;\n        case 1:\n          return _isPlaceholder(a) ? f2\n               : _curry1(function(_b) { return fn(a, _b); });\n        default:\n          return _isPlaceholder(a) && _isPlaceholder(b) ? f2\n               : _isPlaceholder(a) ? _curry1(function(_a) { return fn(_a,   b); })\n               : _isPlaceholder(b) ? _curry1(function(_b) { return fn(a, _b); })\n               : fn(a, b);\n      }\n    };\n  };\n  ```\n\n- \\_arity\n\n  没有看出来 \\_arity 是干嘛用的，控制（限制）函数参数的个数？\n\n  ```js\n  module.exports = function _arity(n, fn) {\n    /* eslint-disable no-unused-vars */\n    switch (n) {\n      case 0: return function() { return fn.apply(this, arguments); };\n      case 1: return function(a0) { return fn.apply(this, arguments); };\n      case 2: return function(a0, a1) { return fn.apply(this, arguments); };\n      case 3: return function(a0, a1, a2) { return fn.apply(this, arguments); };\n      case 4: return function(a0, a1, a2, a3) { return fn.apply(this, arguments); };\n      case 5: return function(a0, a1, a2, a3, a4) { return fn.apply(this, arguments); };\n      case 6: return function(a0, a1, a2, a3, a4, a5) { return fn.apply(this, arguments); };\n      case 7: return function(a0, a1, a2, a3, a4, a5, a6) { return fn.apply(this, arguments); };\n      case 8: return function(a0, a1, a2, a3, a4, a5, a6, a7) { return fn.apply(this, arguments); };\n      case 9: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) { return fn.apply(this, arguments); };\n      case 10: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) { return fn.apply(this, arguments); };\n      default: throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n    }\n  };\n  ```\n\n- curryN\n\n  length：待柯里化函数参数的个数，fn：带柯里化函数\n\n  参数个数为1，用 \\_curry1 对 fn 柯里化；参数个数范围为 (1，10] ，用 \\_curryN。\n\n  ```js\n  module.exports = _curry2(function curryN(length, fn) {\n    if (length === 1) {\n      return _curry1(fn);\n    }\n    return _arity(length, _curryN(length, [], fn));\n  });\n  ```\n- curry\n\n  平时实际用到的柯里化函数\n\n  ```js\n  module.exports = _curry1(function curry(fn) {\n    return curryN(fn.length, fn);\n  });\n  ```\n","source":"_posts/Ramda-SourceCode-Analyze.md","raw":"---\ntitle: Ramda 源码分析（一） 柯里化curry\ndate: 2016-10-21 09:34:59\ntags:\n---\n\n## Ramda 目录说明\n\n[Ramda](http://ramdajs.com) API 的源码都在 src/ 文件夹中，src/ 下包含一个 internal/ 文件夹和若干外部模块。直接在 **src/** 下编写的模块（函数）供**外部调用**，在 **internal/** 下编写的模块仅供**内部使用**，属于帮助函数，**内部函数以下划线 \"_\" 开头**。\n\n本次源码分析使用版本号为：Ramda v0.22.1。\n\n## 源码分析\n- \\_\\_ 占位符\n\n  占位符是一个 “普通的” object ，key 为 `@@functional/placeholder` ，value 为 true。\n  \n  ```js\n  module.exports = {'@@functional/placeholder': true};\n  ```\n  配合柯里化函数使用，可以使柯里化函数传入实参不在限于从左往右依次传入，大大增强了柯里化函数的能力。\n  \n  举例如下，g 是一个柯里化的 ternary（三元）函数，\\_ 代表 R.\\_\\_ ，下面的写法是等价的。\n  \n  ```js\n  g(1, 2, 3)\n  g(_, 2, 3)(1)\n  g(_, _, 3)(1)(2)\n  g(_, _, 3)(1, 2)\n  g(_, 2, _)(1, 3)\n  g(_, 2)(1)(3)\n  g(_, 2)(1, 3)\n  g(_, 2)(_, 3)(1)\n  ```\n  \n- \\_isPlaceholder\n  \n  判断实参是否为占位符（R.\\_\\_），在柯里化函数中使用。\n  \n  ```js\n  module.exports = function _isPlaceholder(a) {\n    return a != null &&\n\t     typeof a === 'object' &&\n\t     a['@@functional/placeholder'] === true;\n  };\n  ```\n  \n- \\_curry1\n  \n  优化的内部单参数柯里化函数：对单参数函数`fn` 进行柯里化，返回柯里化了的 fn' → f1。\n  \n  当传入参数为空或者传入的是占位符，返回 f1；否则执行 f1 ，并返回执行结果。\n  \n  柯里化用到了闭包。\\_curry1/\\_curry2/\\_curry3 是为了柯里化 ramda API 优化用的。因为 ramda API 都是原生柯里化的，且参数一般不超过3个，所以用到上述3个内部优化的柯里化函数，以提高效率。\n  \n  ```js\n  module.exports = function _curry1(fn) {\n    return function f1(a) {\n      if (arguments.length === 0 || _isPlaceholder(a)) {\n        return f1;\n      } else {\n        return fn.apply(this, arguments);\n      }\n    };\n  };\n  ```\n  \n- \\_curry2\n\n  优化的内部双参数柯里化函数：对双参数函数 `fn` 进行柯里化，返回柯里化了的 fn' → f2。\n  \n  原理讲解：\n  \n  1. 当无参数传入时，返回 f2；\n  2. 当有一个参数（a）传入时，判断该参数是否为 R.\\_\\_ ：是则返回 f2，否则返回加持一个参数（a）的单参数柯里化函数；\n  3. 当传入两个参数时，若都是占位符，返回 f2，若有一个占位符则返回加持一个参数的单参数柯里化函数，若无占位符，则执行 fn。\n  \n  ```js\n  module.exports = function _curry2(fn) {\n    return function f2(a, b) {\n      switch (arguments.length) {\n        case 0:\n          return f2;\n        case 1:\n          return _isPlaceholder(a) ? f2\n               : _curry1(function(_b) { return fn(a, _b); });\n        default:\n          return _isPlaceholder(a) && _isPlaceholder(b) ? f2\n               : _isPlaceholder(a) ? _curry1(function(_a) { return fn(_a,   b); })\n               : _isPlaceholder(b) ? _curry1(function(_b) { return fn(a, _b); })\n               : fn(a, b);\n      }\n    };\n  };\n  ```\n\n- \\_arity\n\n  没有看出来 \\_arity 是干嘛用的，控制（限制）函数参数的个数？\n\n  ```js\n  module.exports = function _arity(n, fn) {\n    /* eslint-disable no-unused-vars */\n    switch (n) {\n      case 0: return function() { return fn.apply(this, arguments); };\n      case 1: return function(a0) { return fn.apply(this, arguments); };\n      case 2: return function(a0, a1) { return fn.apply(this, arguments); };\n      case 3: return function(a0, a1, a2) { return fn.apply(this, arguments); };\n      case 4: return function(a0, a1, a2, a3) { return fn.apply(this, arguments); };\n      case 5: return function(a0, a1, a2, a3, a4) { return fn.apply(this, arguments); };\n      case 6: return function(a0, a1, a2, a3, a4, a5) { return fn.apply(this, arguments); };\n      case 7: return function(a0, a1, a2, a3, a4, a5, a6) { return fn.apply(this, arguments); };\n      case 8: return function(a0, a1, a2, a3, a4, a5, a6, a7) { return fn.apply(this, arguments); };\n      case 9: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) { return fn.apply(this, arguments); };\n      case 10: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) { return fn.apply(this, arguments); };\n      default: throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n    }\n  };\n  ```\n\n- curryN\n\n  length：待柯里化函数参数的个数，fn：带柯里化函数\n\n  参数个数为1，用 \\_curry1 对 fn 柯里化；参数个数范围为 (1，10] ，用 \\_curryN。\n\n  ```js\n  module.exports = _curry2(function curryN(length, fn) {\n    if (length === 1) {\n      return _curry1(fn);\n    }\n    return _arity(length, _curryN(length, [], fn));\n  });\n  ```\n- curry\n\n  平时实际用到的柯里化函数\n\n  ```js\n  module.exports = _curry1(function curry(fn) {\n    return curryN(fn.length, fn);\n  });\n  ```\n","slug":"Ramda-SourceCode-Analyze","published":1,"updated":"2016-10-23T04:50:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3vm14gn00023bs60oezk361","content":"<h2 id=\"ramda-mu-lu-shuo-ming\">Ramda 目录说明</h2>\n<p><a href=\"http://ramdajs.com\" target=\"_blank\" rel=\"external\">Ramda</a> API 的源码都在 src/ 文件夹中，src/ 下包含一个 internal/ 文件夹和若干外部模块。直接在 <strong>src/</strong> 下编写的模块（函数）供<strong>外部调用</strong>，在 <strong>internal/</strong> 下编写的模块仅供<strong>内部使用</strong>，属于帮助函数，<strong>内部函数以下划线 &quot;_&quot; 开头</strong>。</p>\n<p>本次源码分析使用版本号为：Ramda v0.22.1。</p>\n<h2 id=\"yuan-ma-fen-xi\">源码分析</h2>\n<ul>\n<li>\n<p>__ 占位符</p>\n<p>占位符是一个 “普通的” object ，key 为 <code>@@functional/placeholder</code> ，value 为 true。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;<span class=\"string\">'@@functional/placeholder'</span>: <span class=\"literal\">true</span>&#125;;</div></pre></td></tr></table></figure></p>\n<p>配合柯里化函数使用，可以使柯里化函数传入实参不在限于从左往右依次传入，大大增强了柯里化函数的能力。</p>\n<p>举例如下，g 是一个柯里化的 ternary（三元）函数，_ 代表 R.__ ，下面的写法是等价的。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">g(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">g(_, <span class=\"number\">2</span>, <span class=\"number\">3</span>)(<span class=\"number\">1</span>)</div><div class=\"line\">g(_, _, <span class=\"number\">3</span>)(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)</div><div class=\"line\">g(_, _, <span class=\"number\">3</span>)(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</div><div class=\"line\">g(_, <span class=\"number\">2</span>, _)(<span class=\"number\">1</span>, <span class=\"number\">3</span>)</div><div class=\"line\">g(_, <span class=\"number\">2</span>)(<span class=\"number\">1</span>)(<span class=\"number\">3</span>)</div><div class=\"line\">g(_, <span class=\"number\">2</span>)(<span class=\"number\">1</span>, <span class=\"number\">3</span>)</div><div class=\"line\">g(_, <span class=\"number\">2</span>)(_, <span class=\"number\">3</span>)(<span class=\"number\">1</span>)</div></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<ul>\n<li>\n<p>_isPlaceholder</p>\n<p>判断实参是否为占位符（R.__），在柯里化函数中使用。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_isPlaceholder</span>(<span class=\"params\">a</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> a != <span class=\"literal\">null</span> &amp;&amp;</div><div class=\"line\">    <span class=\"keyword\">typeof</span> a === <span class=\"string\">'object'</span> &amp;&amp;</div><div class=\"line\">    a[<span class=\"string\">'@@functional/placeholder'</span>] === <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<ul>\n<li>\n<p>_curry1</p>\n<p>优化的内部单参数柯里化函数：对单参数函数<code>fn</code> 进行柯里化，返回柯里化了的 fn' → f1。</p>\n<p>当传入参数为空或者传入的是占位符，返回 f1；否则执行 f1 ，并返回执行结果。</p>\n<p>柯里化用到了闭包。_curry1/_curry2/_curry3 是为了柯里化 ramda API 优化用的。因为 ramda API 都是原生柯里化的，且参数一般不超过3个，所以用到上述3个内部优化的柯里化函数，以提高效率。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_curry1</span>(<span class=\"params\">fn</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\">a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length === <span class=\"number\">0</span> || _isPlaceholder(a)) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> f1;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<ul>\n<li>\n<p>_curry2</p>\n<p>优化的内部双参数柯里化函数：对双参数函数 <code>fn</code> 进行柯里化，返回柯里化了的 fn' → f2。</p>\n<p>原理讲解：</p>\n<ol>\n<li>当无参数传入时，返回 f2；</li>\n<li>当有一个参数（a）传入时，判断该参数是否为 R.__ ：是则返回 f2，否则返回加持一个参数（a）的单参数柯里化函数；</li>\n<li>当传入两个参数时，若都是占位符，返回 f2，若有一个占位符则返回加持一个参数的单参数柯里化函数，若无占位符，则执行 fn。</li>\n</ol>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_curry2</span>(<span class=\"params\">fn</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"built_in\">arguments</span>.length) &#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> f2;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> _isPlaceholder(a) ? f2</div><div class=\"line\">             : _curry1(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">_b</span>) </span>&#123; <span class=\"keyword\">return</span> fn(a, _b); &#125;);</div><div class=\"line\">      <span class=\"keyword\">default</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> _isPlaceholder(a) &amp;&amp; _isPlaceholder(b) ? f2</div><div class=\"line\">             : _isPlaceholder(a) ? _curry1(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">_a</span>) </span>&#123; <span class=\"keyword\">return</span> fn(_a,   b); &#125;)</div><div class=\"line\">             : _isPlaceholder(b) ? _curry1(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">_b</span>) </span>&#123; <span class=\"keyword\">return</span> fn(a, _b); &#125;)</div><div class=\"line\">             : fn(a, b);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>_arity</p>\n<p>没有看出来 _arity 是干嘛用的，控制（限制）函数参数的个数？</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_arity</span>(<span class=\"params\">n, fn</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">/* eslint-disable no-unused-vars */</span></div><div class=\"line\">  <span class=\"keyword\">switch</span> (n) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>); &#125;;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a0</span>) </span>&#123; <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>); &#125;;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a0, a1</span>) </span>&#123; <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>); &#125;;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a0, a1, a2</span>) </span>&#123; <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>); &#125;;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">4</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a0, a1, a2, a3</span>) </span>&#123; <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>); &#125;;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">5</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a0, a1, a2, a3, a4</span>) </span>&#123; <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>); &#125;;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">6</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a0, a1, a2, a3, a4, a5</span>) </span>&#123; <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>); &#125;;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">7</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a0, a1, a2, a3, a4, a5, a6</span>) </span>&#123; <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>); &#125;;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">8</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a0, a1, a2, a3, a4, a5, a6, a7</span>) </span>&#123; <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>); &#125;;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">9</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a0, a1, a2, a3, a4, a5, a6, a7, a8</span>) </span>&#123; <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>); &#125;;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">10</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a0, a1, a2, a3, a4, a5, a6, a7, a8, a9</span>) </span>&#123; <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>); &#125;;</div><div class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'First argument to _arity must be a non-negative integer no greater than ten'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>curryN</p>\n<p>length：待柯里化函数参数的个数，fn：带柯里化函数</p>\n<p>参数个数为1，用 _curry1 对 fn 柯里化；参数个数范围为 (1，10] ，用 _curryN。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = _curry2(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curryN</span>(<span class=\"params\">length, fn</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (length === <span class=\"number\">1</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _curry1(fn);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> _arity(length, _curryN(length, [], fn));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>curry</p>\n<p>平时实际用到的柯里化函数</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = _curry1(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">fn</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> curryN(fn.length, fn);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ramda-mu-lu-shuo-ming\">Ramda 目录说明</h2>\n<p><a href=\"http://ramdajs.com\" target=\"_blank\" rel=\"external\">Ramda</a> API 的源码都在 src/ 文件夹中，src/ 下包含一个 internal/ 文件夹和若干外部模块。直接在 <strong>src/</strong> 下编写的模块（函数）供<strong>外部调用</strong>，在 <strong>internal/</strong> 下编写的模块仅供<strong>内部使用</strong>，属于帮助函数，<strong>内部函数以下划线 &quot;_&quot; 开头</strong>。</p>\n<p>本次源码分析使用版本号为：Ramda v0.22.1。</p>\n<h2 id=\"yuan-ma-fen-xi\">源码分析</h2>\n<ul>\n<li>\n<p>__ 占位符</p>\n<p>占位符是一个 “普通的” object ，key 为 <code>@@functional/placeholder</code> ，value 为 true。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;<span class=\"string\">'@@functional/placeholder'</span>: <span class=\"literal\">true</span>&#125;;</div></pre></td></tr></table></figure></p>\n<p>配合柯里化函数使用，可以使柯里化函数传入实参不在限于从左往右依次传入，大大增强了柯里化函数的能力。</p>\n<p>举例如下，g 是一个柯里化的 ternary（三元）函数，_ 代表 R.__ ，下面的写法是等价的。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">g(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">g(_, <span class=\"number\">2</span>, <span class=\"number\">3</span>)(<span class=\"number\">1</span>)</div><div class=\"line\">g(_, _, <span class=\"number\">3</span>)(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)</div><div class=\"line\">g(_, _, <span class=\"number\">3</span>)(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</div><div class=\"line\">g(_, <span class=\"number\">2</span>, _)(<span class=\"number\">1</span>, <span class=\"number\">3</span>)</div><div class=\"line\">g(_, <span class=\"number\">2</span>)(<span class=\"number\">1</span>)(<span class=\"number\">3</span>)</div><div class=\"line\">g(_, <span class=\"number\">2</span>)(<span class=\"number\">1</span>, <span class=\"number\">3</span>)</div><div class=\"line\">g(_, <span class=\"number\">2</span>)(_, <span class=\"number\">3</span>)(<span class=\"number\">1</span>)</div></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<ul>\n<li>\n<p>_isPlaceholder</p>\n<p>判断实参是否为占位符（R.__），在柯里化函数中使用。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_isPlaceholder</span>(<span class=\"params\">a</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> a != <span class=\"literal\">null</span> &amp;&amp;</div><div class=\"line\">    <span class=\"keyword\">typeof</span> a === <span class=\"string\">'object'</span> &amp;&amp;</div><div class=\"line\">    a[<span class=\"string\">'@@functional/placeholder'</span>] === <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<ul>\n<li>\n<p>_curry1</p>\n<p>优化的内部单参数柯里化函数：对单参数函数<code>fn</code> 进行柯里化，返回柯里化了的 fn' → f1。</p>\n<p>当传入参数为空或者传入的是占位符，返回 f1；否则执行 f1 ，并返回执行结果。</p>\n<p>柯里化用到了闭包。_curry1/_curry2/_curry3 是为了柯里化 ramda API 优化用的。因为 ramda API 都是原生柯里化的，且参数一般不超过3个，所以用到上述3个内部优化的柯里化函数，以提高效率。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_curry1</span>(<span class=\"params\">fn</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\">a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length === <span class=\"number\">0</span> || _isPlaceholder(a)) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> f1;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<ul>\n<li>\n<p>_curry2</p>\n<p>优化的内部双参数柯里化函数：对双参数函数 <code>fn</code> 进行柯里化，返回柯里化了的 fn' → f2。</p>\n<p>原理讲解：</p>\n<ol>\n<li>当无参数传入时，返回 f2；</li>\n<li>当有一个参数（a）传入时，判断该参数是否为 R.__ ：是则返回 f2，否则返回加持一个参数（a）的单参数柯里化函数；</li>\n<li>当传入两个参数时，若都是占位符，返回 f2，若有一个占位符则返回加持一个参数的单参数柯里化函数，若无占位符，则执行 fn。</li>\n</ol>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_curry2</span>(<span class=\"params\">fn</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"built_in\">arguments</span>.length) &#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> f2;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> _isPlaceholder(a) ? f2</div><div class=\"line\">             : _curry1(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">_b</span>) </span>&#123; <span class=\"keyword\">return</span> fn(a, _b); &#125;);</div><div class=\"line\">      <span class=\"keyword\">default</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> _isPlaceholder(a) &amp;&amp; _isPlaceholder(b) ? f2</div><div class=\"line\">             : _isPlaceholder(a) ? _curry1(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">_a</span>) </span>&#123; <span class=\"keyword\">return</span> fn(_a,   b); &#125;)</div><div class=\"line\">             : _isPlaceholder(b) ? _curry1(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">_b</span>) </span>&#123; <span class=\"keyword\">return</span> fn(a, _b); &#125;)</div><div class=\"line\">             : fn(a, b);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>_arity</p>\n<p>没有看出来 _arity 是干嘛用的，控制（限制）函数参数的个数？</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_arity</span>(<span class=\"params\">n, fn</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">/* eslint-disable no-unused-vars */</span></div><div class=\"line\">  <span class=\"keyword\">switch</span> (n) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>); &#125;;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a0</span>) </span>&#123; <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>); &#125;;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a0, a1</span>) </span>&#123; <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>); &#125;;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a0, a1, a2</span>) </span>&#123; <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>); &#125;;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">4</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a0, a1, a2, a3</span>) </span>&#123; <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>); &#125;;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">5</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a0, a1, a2, a3, a4</span>) </span>&#123; <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>); &#125;;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">6</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a0, a1, a2, a3, a4, a5</span>) </span>&#123; <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>); &#125;;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">7</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a0, a1, a2, a3, a4, a5, a6</span>) </span>&#123; <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>); &#125;;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">8</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a0, a1, a2, a3, a4, a5, a6, a7</span>) </span>&#123; <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>); &#125;;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">9</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a0, a1, a2, a3, a4, a5, a6, a7, a8</span>) </span>&#123; <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>); &#125;;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">10</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a0, a1, a2, a3, a4, a5, a6, a7, a8, a9</span>) </span>&#123; <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>); &#125;;</div><div class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'First argument to _arity must be a non-negative integer no greater than ten'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>curryN</p>\n<p>length：待柯里化函数参数的个数，fn：带柯里化函数</p>\n<p>参数个数为1，用 _curry1 对 fn 柯里化；参数个数范围为 (1，10] ，用 _curryN。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = _curry2(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curryN</span>(<span class=\"params\">length, fn</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (length === <span class=\"number\">1</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _curry1(fn);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> _arity(length, _curryN(length, [], fn));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>curry</p>\n<p>平时实际用到的柯里化函数</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = _curry1(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">fn</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> curryN(fn.length, fn);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n</li>\n</ul>\n"},{"title":"Thinking in Ramda: 函数组合","date":"2017-06-10T07:38:05.000Z","_content":"\n译者注：本文翻译自 Randy Coulman 的 《[Thinking in Ramda: Combining Functions](http://randycoulman.com/blog/2016/05/31/thinking-in-ramda-combining-functions/)》，转载请与[原作者](https://github.com/randycoulman)或[本人](https://github.com/adispring)联系。下面开始正文。\n\n---\n\n本文是函数式编程系列文章：[Thinking in Ramda](https://adispring.coding.me/categories/Thinking-in-Ramda/) 的第二篇。\n\n在[第一节](https://adispring.coding.me/2017/06/09/Thinking-in-Ramda-%E5%85%A5%E9%97%A8/)中，介绍了 Ramda 和函数式编程的一些基本思想，如函数、纯函数和数据不变性。并介绍了如何入门：可以从集合迭代函数（如 `forEach`、`map`、`reduce`）开始。\n\n**简单组合**\n\n一旦熟悉了可以将函数传递给其他函数，你可能会开始找将多个函数组合在一起的场景。\n\nRamda 为简单的函数组合提供了一些函数。我们来看看。\n\n**Complement**\n\n在上一节，我们使用 `find` 来查找列表中的首个偶数。\n\n```js\nconst isEven = x => x % 2 === 0\nfind(isEven, [1, 2, 3, 4]) //=> 2 \n```\n\n如果想找首个奇数呢？我们可以随手写一个 `isOdd` 函数并使用它。但我们知道任何非偶整数都是奇数，所以可以重用 `isEven` 函数。\n\nRamda 提供了一个更高阶的函数：`complement`，给它传入一个函数，返回一个新的函数：当原函数返回 \"假值\" 时，新函数返回 `true`；原函数返回 \"真值\" 时，新函数返回 `false`，即新函数是原函数的补函数。\n\n```js\nconst isEven = x => x % 2 === 0\n \nfind(complement(isEven), [1, 2, 3, 4]) // --> 1\n```\n\n更进一步，可以给 `complement` 过的函数起个名字，这样新函数便可以复用：\n\n```js\nconst isEven = x => x % 2 === 0\nconst isOdd = complement(isEven)\n \nfind(isOdd, [1, 2, 3, 4]) // --> 1\n```\n\n注意，`complement` 以函数的方式实现了逻辑非操作（`!`， not）的功能。\n\n`Both/Either`\n\n假设我们正在开发一个投票系统，给定一个人，我们希望能够确定其是否有资格投票。根据现有知识，一个人必须年满 18 岁并且是本国公民，才有资格投票。成为公民的条件：在本国出生，或者后来加入该国国籍。\n\n```js\nconst wasBornInCountry = person => person.birthCountry === OUR_COUNTRY\nconst wasNaturalized = person => Boolean(person.naturalizationDate)\nconst isOver18 = person => person.age >= 18\n \nconst isCitizen = person => wasBornInCountry(person) || wasNaturalized(person)\n \nconst isEligibleToVote = person => isOver18(person) && isCitizen(person)\n```\n\n上面代码实现了我们的需求，但 Ramda 提供了一些方便的函数，以帮助我们精简代码。\n\n`both` 接受两个函数，返回一个新函数：当两个传入函数都返回 `truthy` 值时，新函数返回 `true`，否则返回 `false`\n\n`either` 接受两个函数，返回一个新函数：当两个传入函数任意一个返回 `truthy` 值时，新函数返回 `true`，否则返回 `false`\n\n我们可以使用这两个函数来简化 `isCitizen` 和 `isEligibleToVote`。\n```js\nconst isCitizen = either(wasBornInCountry, wasNaturalized)\nconst isEligibleToVote = both(isOver18, isCitizen)\n```\n注意，`both` 以函数的方式实现了逻辑与（`&&`）的功能，`either` 实现了逻辑或（`||`）的功能。\n\nRamda 还提供了 `allPass` 和 `anyPass`，接受由任意多个函数组成的数组作为参数。如名称所示，`allPass` 类似于 `both`，而 `anyPass` 类似于 `either`。\n\n**Pipelines(管道)**\n\n有时我们需要以 pipeline 的方式将多个函数依次作用于某些数据。例如，接受两个数字，将它们相乘，加 1 ，然后平方。我们可以这样写：\n\n```js\nconst multiply = (a, b) => a * b\nconst addOne = x => x + 1\nconst square = x => x * x\n \nconst operate = (x, y) => {\n  const product = multiply(x, y)\n  const incremented = addOne(product)\n  const squared = square(incremented)\n \n  return squared\n}\n \noperate(3, 4) // => ((3 * 4) + 1)^2 => (12 + 1)^2 => 13^2 => 169\n```\n\n注意，每次操作是对上次操作的结果进行处理。\n\n**pipe**\n\nRamda 提供了 `pipe` 函数：接受一系列函数，并返回一个新函数。\n\n新函数的元数与第一个传入函数的元数相同（元数：接受参数的个数），然后顺次通过 \"管道\" 中的函数对输入参数进行处理。它将第一个函数作用于参数，返回结果作为下一个函数的入参，依次进行下去。\"管道\" 中最后一个函数的结果作为 `pipe` 调用的最终结果。\n\n注意，除首个函数外，其余的函数都是一元函数。\n\n了解这些后，我们可以使用 `pipe` 来简化我们的 `operate` 函数：\n\n```js\nconst operate = pipe(\n  multiply,\n  addOne,\n  square\n)\n```\n\n当调用 `operate(3, 4)` 时，`pipe` 将 `3` 和 `4` 传给 `multiply` 函数，输出 `12`，然后将 `12` 传给 `addOne`，返回 `13`，然后将 `13` 传给 `square`，返回 `169`，并将 `169` 作为最终 `operate` 的最终结果返回。\n\n**compose**\n\n另一种编写原始 `operate` 函数的方式是内联所有暂时变量：\n\n```js\nconst operate = (x, y) => square(addOne(multiply(x, y)))\n```\n\n这样更紧凑，但也更不便于阅读。然而这种形式可以使用 Ramda 的 `compose` 函数进行重写。\n\n`compose` 的工作方式跟 `pipe` 基本相同，除了其调用函数的顺序是从右到左，而不是从左到右。下面使用 `compose` 来重写 `operate`：\n\n```js\nconst operate = compose(\n  square,\n  addOne,\n  multiply\n)\n```\n\n这与上面的 `pipe` 几乎一样，除了函数的顺序是相反的。实际上，Ramda 中的 `compose` 函数的内部是用 `pipe` 实现的。\n\n我一直这样思考 `compose` 的工作方式：`compose(f, g)(value)` 等价于 `f(g(value))`。\n\n注意，与 `pipe` 类似，`compose` 中的函数除最后一个外，其余都是一元函数。\n\n**compose 还是 pipe？**\n\n具有命令式编程背景的人可能觉得 `pipe` 更容易理解，因为可以按照从左往右的顺序进行阅读。但 `compose` 更容易对如上所示的嵌套函数进行转换。\n\n我也不太清楚什么时候该用 `compose`，什么时候该用 `pipe`。由于它们在 Ramda 中基本等价，所以选择用哪个可能并不重要。只要根据自己的情况选择合适的即可。\n\n**结论**\n\n通过特定的方式进行函数组合，我们已经可以开始编写更强的函数了。\n\n**下一节**\n\n你可能已经注意到了，在进行函数组合时，我们多数情况下都可以省略函数参数。只有在最终调用组合好的函数时，才传入参数。\n\n这在函数式编程中非常常见，我们将在下一节 [`Partial Application` (部分应用)](https://adispring.coding.me/2017/06/11/Thinking-in-Ramda-Partial-Application/)进行更多详细介绍。我们还会讨论如何组合多元（多参数）函数。\n","source":"_posts/Thinking-in-Ramda-Combining-Functions.md","raw":"---\ntitle: 'Thinking in Ramda: 函数组合'\ndate: 2017-06-10 15:38:05\ncategories: 'Thinking in Ramda'\n---\n\n译者注：本文翻译自 Randy Coulman 的 《[Thinking in Ramda: Combining Functions](http://randycoulman.com/blog/2016/05/31/thinking-in-ramda-combining-functions/)》，转载请与[原作者](https://github.com/randycoulman)或[本人](https://github.com/adispring)联系。下面开始正文。\n\n---\n\n本文是函数式编程系列文章：[Thinking in Ramda](https://adispring.coding.me/categories/Thinking-in-Ramda/) 的第二篇。\n\n在[第一节](https://adispring.coding.me/2017/06/09/Thinking-in-Ramda-%E5%85%A5%E9%97%A8/)中，介绍了 Ramda 和函数式编程的一些基本思想，如函数、纯函数和数据不变性。并介绍了如何入门：可以从集合迭代函数（如 `forEach`、`map`、`reduce`）开始。\n\n**简单组合**\n\n一旦熟悉了可以将函数传递给其他函数，你可能会开始找将多个函数组合在一起的场景。\n\nRamda 为简单的函数组合提供了一些函数。我们来看看。\n\n**Complement**\n\n在上一节，我们使用 `find` 来查找列表中的首个偶数。\n\n```js\nconst isEven = x => x % 2 === 0\nfind(isEven, [1, 2, 3, 4]) //=> 2 \n```\n\n如果想找首个奇数呢？我们可以随手写一个 `isOdd` 函数并使用它。但我们知道任何非偶整数都是奇数，所以可以重用 `isEven` 函数。\n\nRamda 提供了一个更高阶的函数：`complement`，给它传入一个函数，返回一个新的函数：当原函数返回 \"假值\" 时，新函数返回 `true`；原函数返回 \"真值\" 时，新函数返回 `false`，即新函数是原函数的补函数。\n\n```js\nconst isEven = x => x % 2 === 0\n \nfind(complement(isEven), [1, 2, 3, 4]) // --> 1\n```\n\n更进一步，可以给 `complement` 过的函数起个名字，这样新函数便可以复用：\n\n```js\nconst isEven = x => x % 2 === 0\nconst isOdd = complement(isEven)\n \nfind(isOdd, [1, 2, 3, 4]) // --> 1\n```\n\n注意，`complement` 以函数的方式实现了逻辑非操作（`!`， not）的功能。\n\n`Both/Either`\n\n假设我们正在开发一个投票系统，给定一个人，我们希望能够确定其是否有资格投票。根据现有知识，一个人必须年满 18 岁并且是本国公民，才有资格投票。成为公民的条件：在本国出生，或者后来加入该国国籍。\n\n```js\nconst wasBornInCountry = person => person.birthCountry === OUR_COUNTRY\nconst wasNaturalized = person => Boolean(person.naturalizationDate)\nconst isOver18 = person => person.age >= 18\n \nconst isCitizen = person => wasBornInCountry(person) || wasNaturalized(person)\n \nconst isEligibleToVote = person => isOver18(person) && isCitizen(person)\n```\n\n上面代码实现了我们的需求，但 Ramda 提供了一些方便的函数，以帮助我们精简代码。\n\n`both` 接受两个函数，返回一个新函数：当两个传入函数都返回 `truthy` 值时，新函数返回 `true`，否则返回 `false`\n\n`either` 接受两个函数，返回一个新函数：当两个传入函数任意一个返回 `truthy` 值时，新函数返回 `true`，否则返回 `false`\n\n我们可以使用这两个函数来简化 `isCitizen` 和 `isEligibleToVote`。\n```js\nconst isCitizen = either(wasBornInCountry, wasNaturalized)\nconst isEligibleToVote = both(isOver18, isCitizen)\n```\n注意，`both` 以函数的方式实现了逻辑与（`&&`）的功能，`either` 实现了逻辑或（`||`）的功能。\n\nRamda 还提供了 `allPass` 和 `anyPass`，接受由任意多个函数组成的数组作为参数。如名称所示，`allPass` 类似于 `both`，而 `anyPass` 类似于 `either`。\n\n**Pipelines(管道)**\n\n有时我们需要以 pipeline 的方式将多个函数依次作用于某些数据。例如，接受两个数字，将它们相乘，加 1 ，然后平方。我们可以这样写：\n\n```js\nconst multiply = (a, b) => a * b\nconst addOne = x => x + 1\nconst square = x => x * x\n \nconst operate = (x, y) => {\n  const product = multiply(x, y)\n  const incremented = addOne(product)\n  const squared = square(incremented)\n \n  return squared\n}\n \noperate(3, 4) // => ((3 * 4) + 1)^2 => (12 + 1)^2 => 13^2 => 169\n```\n\n注意，每次操作是对上次操作的结果进行处理。\n\n**pipe**\n\nRamda 提供了 `pipe` 函数：接受一系列函数，并返回一个新函数。\n\n新函数的元数与第一个传入函数的元数相同（元数：接受参数的个数），然后顺次通过 \"管道\" 中的函数对输入参数进行处理。它将第一个函数作用于参数，返回结果作为下一个函数的入参，依次进行下去。\"管道\" 中最后一个函数的结果作为 `pipe` 调用的最终结果。\n\n注意，除首个函数外，其余的函数都是一元函数。\n\n了解这些后，我们可以使用 `pipe` 来简化我们的 `operate` 函数：\n\n```js\nconst operate = pipe(\n  multiply,\n  addOne,\n  square\n)\n```\n\n当调用 `operate(3, 4)` 时，`pipe` 将 `3` 和 `4` 传给 `multiply` 函数，输出 `12`，然后将 `12` 传给 `addOne`，返回 `13`，然后将 `13` 传给 `square`，返回 `169`，并将 `169` 作为最终 `operate` 的最终结果返回。\n\n**compose**\n\n另一种编写原始 `operate` 函数的方式是内联所有暂时变量：\n\n```js\nconst operate = (x, y) => square(addOne(multiply(x, y)))\n```\n\n这样更紧凑，但也更不便于阅读。然而这种形式可以使用 Ramda 的 `compose` 函数进行重写。\n\n`compose` 的工作方式跟 `pipe` 基本相同，除了其调用函数的顺序是从右到左，而不是从左到右。下面使用 `compose` 来重写 `operate`：\n\n```js\nconst operate = compose(\n  square,\n  addOne,\n  multiply\n)\n```\n\n这与上面的 `pipe` 几乎一样，除了函数的顺序是相反的。实际上，Ramda 中的 `compose` 函数的内部是用 `pipe` 实现的。\n\n我一直这样思考 `compose` 的工作方式：`compose(f, g)(value)` 等价于 `f(g(value))`。\n\n注意，与 `pipe` 类似，`compose` 中的函数除最后一个外，其余都是一元函数。\n\n**compose 还是 pipe？**\n\n具有命令式编程背景的人可能觉得 `pipe` 更容易理解，因为可以按照从左往右的顺序进行阅读。但 `compose` 更容易对如上所示的嵌套函数进行转换。\n\n我也不太清楚什么时候该用 `compose`，什么时候该用 `pipe`。由于它们在 Ramda 中基本等价，所以选择用哪个可能并不重要。只要根据自己的情况选择合适的即可。\n\n**结论**\n\n通过特定的方式进行函数组合，我们已经可以开始编写更强的函数了。\n\n**下一节**\n\n你可能已经注意到了，在进行函数组合时，我们多数情况下都可以省略函数参数。只有在最终调用组合好的函数时，才传入参数。\n\n这在函数式编程中非常常见，我们将在下一节 [`Partial Application` (部分应用)](https://adispring.coding.me/2017/06/11/Thinking-in-Ramda-Partial-Application/)进行更多详细介绍。我们还会讨论如何组合多元（多参数）函数。\n","slug":"Thinking-in-Ramda-Combining-Functions","published":1,"updated":"2017-06-13T13:33:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3vm14gr00033bs63uv6qhri","content":"<p>译者注：本文翻译自 Randy Coulman 的 《<a href=\"http://randycoulman.com/blog/2016/05/31/thinking-in-ramda-combining-functions/\" target=\"_blank\" rel=\"external\">Thinking in Ramda: Combining Functions</a>》，转载请与<a href=\"https://github.com/randycoulman\" target=\"_blank\" rel=\"external\">原作者</a>或<a href=\"https://github.com/adispring\" target=\"_blank\" rel=\"external\">本人</a>联系。下面开始正文。</p>\n<hr>\n<p>本文是函数式编程系列文章：<a href=\"https://adispring.coding.me/categories/Thinking-in-Ramda/\" target=\"_blank\" rel=\"external\">Thinking in Ramda</a> 的第二篇。</p>\n<p>在<a href=\"https://adispring.coding.me/2017/06/09/Thinking-in-Ramda-%E5%85%A5%E9%97%A8/\" target=\"_blank\" rel=\"external\">第一节</a>中，介绍了 Ramda 和函数式编程的一些基本思想，如函数、纯函数和数据不变性。并介绍了如何入门：可以从集合迭代函数（如 <code>forEach</code>、<code>map</code>、<code>reduce</code>）开始。</p>\n<p><strong>简单组合</strong></p>\n<p>一旦熟悉了可以将函数传递给其他函数，你可能会开始找将多个函数组合在一起的场景。</p>\n<p>Ramda 为简单的函数组合提供了一些函数。我们来看看。</p>\n<p><strong>Complement</strong></p>\n<p>在上一节，我们使用 <code>find</code> 来查找列表中的首个偶数。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> isEven = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x % <span class=\"number\">2</span> === <span class=\"number\">0</span></div><div class=\"line\">find(isEven, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]) <span class=\"comment\">//=&gt; 2</span></div></pre></td></tr></table></figure></p>\n<p>如果想找首个奇数呢？我们可以随手写一个 <code>isOdd</code> 函数并使用它。但我们知道任何非偶整数都是奇数，所以可以重用 <code>isEven</code> 函数。</p>\n<p>Ramda 提供了一个更高阶的函数：<code>complement</code>，给它传入一个函数，返回一个新的函数：当原函数返回 &quot;假值&quot; 时，新函数返回 <code>true</code>；原函数返回 &quot;真值&quot; 时，新函数返回 <code>false</code>，即新函数是原函数的补函数。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> isEven = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x % <span class=\"number\">2</span> === <span class=\"number\">0</span></div><div class=\"line\"> </div><div class=\"line\">find(complement(isEven), [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]) <span class=\"comment\">// --&gt; 1</span></div></pre></td></tr></table></figure></p>\n<p>更进一步，可以给 <code>complement</code> 过的函数起个名字，这样新函数便可以复用：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> isEven = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x % <span class=\"number\">2</span> === <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">const</span> isOdd = complement(isEven)</div><div class=\"line\"> </div><div class=\"line\">find(isOdd, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]) <span class=\"comment\">// --&gt; 1</span></div></pre></td></tr></table></figure></p>\n<p>注意，<code>complement</code> 以函数的方式实现了逻辑非操作（<code>!</code>， not）的功能。</p>\n<p><code>Both/Either</code></p>\n<p>假设我们正在开发一个投票系统，给定一个人，我们希望能够确定其是否有资格投票。根据现有知识，一个人必须年满 18 岁并且是本国公民，才有资格投票。成为公民的条件：在本国出生，或者后来加入该国国籍。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> wasBornInCountry = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> person.birthCountry === OUR_COUNTRY</div><div class=\"line\"><span class=\"keyword\">const</span> wasNaturalized = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> <span class=\"built_in\">Boolean</span>(person.naturalizationDate)</div><div class=\"line\"><span class=\"keyword\">const</span> isOver18 = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> person.age &gt;= <span class=\"number\">18</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> isCitizen = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> wasBornInCountry(person) || wasNaturalized(person)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> isEligibleToVote = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> isOver18(person) &amp;&amp; isCitizen(person)</div></pre></td></tr></table></figure></p>\n<p>上面代码实现了我们的需求，但 Ramda 提供了一些方便的函数，以帮助我们精简代码。</p>\n<p><code>both</code> 接受两个函数，返回一个新函数：当两个传入函数都返回 <code>truthy</code> 值时，新函数返回 <code>true</code>，否则返回 <code>false</code></p>\n<p><code>either</code> 接受两个函数，返回一个新函数：当两个传入函数任意一个返回 <code>truthy</code> 值时，新函数返回 <code>true</code>，否则返回 <code>false</code></p>\n<p>我们可以使用这两个函数来简化 <code>isCitizen</code> 和 <code>isEligibleToVote</code>。\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> isCitizen = either(wasBornInCountry, wasNaturalized)</div><div class=\"line\"><span class=\"keyword\">const</span> isEligibleToVote = both(isOver18, isCitizen)</div></pre></td></tr></table></figure></p>\n<p>注意，<code>both</code> 以函数的方式实现了逻辑与（<code>&amp;&amp;</code>）的功能，<code>either</code> 实现了逻辑或（<code>||</code>）的功能。</p>\n<p>Ramda 还提供了 <code>allPass</code> 和 <code>anyPass</code>，接受由任意多个函数组成的数组作为参数。如名称所示，<code>allPass</code> 类似于 <code>both</code>，而 <code>anyPass</code> 类似于 <code>either</code>。</p>\n<p><strong>Pipelines(管道)</strong></p>\n<p>有时我们需要以 pipeline 的方式将多个函数依次作用于某些数据。例如，接受两个数字，将它们相乘，加 1 ，然后平方。我们可以这样写：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> multiply = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a * b</div><div class=\"line\"><span class=\"keyword\">const</span> addOne = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">const</span> square = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * x</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> operate = <span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> product = multiply(x, y)</div><div class=\"line\">  <span class=\"keyword\">const</span> incremented = addOne(product)</div><div class=\"line\">  <span class=\"keyword\">const</span> squared = square(incremented)</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">return</span> squared</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">operate(<span class=\"number\">3</span>, <span class=\"number\">4</span>) <span class=\"comment\">// =&gt; ((3 * 4) + 1)^2 =&gt; (12 + 1)^2 =&gt; 13^2 =&gt; 169</span></div></pre></td></tr></table></figure></p>\n<p>注意，每次操作是对上次操作的结果进行处理。</p>\n<p><strong>pipe</strong></p>\n<p>Ramda 提供了 <code>pipe</code> 函数：接受一系列函数，并返回一个新函数。</p>\n<p>新函数的元数与第一个传入函数的元数相同（元数：接受参数的个数），然后顺次通过 &quot;管道&quot; 中的函数对输入参数进行处理。它将第一个函数作用于参数，返回结果作为下一个函数的入参，依次进行下去。&quot;管道&quot; 中最后一个函数的结果作为 <code>pipe</code> 调用的最终结果。</p>\n<p>注意，除首个函数外，其余的函数都是一元函数。</p>\n<p>了解这些后，我们可以使用 <code>pipe</code> 来简化我们的 <code>operate</code> 函数：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> operate = pipe(</div><div class=\"line\">  multiply,</div><div class=\"line\">  addOne,</div><div class=\"line\">  square</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p>当调用 <code>operate(3, 4)</code> 时，<code>pipe</code> 将 <code>3</code> 和 <code>4</code> 传给 <code>multiply</code> 函数，输出 <code>12</code>，然后将 <code>12</code> 传给 <code>addOne</code>，返回 <code>13</code>，然后将 <code>13</code> 传给 <code>square</code>，返回 <code>169</code>，并将 <code>169</code> 作为最终 <code>operate</code> 的最终结果返回。</p>\n<p><strong>compose</strong></p>\n<p>另一种编写原始 <code>operate</code> 函数的方式是内联所有暂时变量：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> operate = <span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> square(addOne(multiply(x, y)))</div></pre></td></tr></table></figure></p>\n<p>这样更紧凑，但也更不便于阅读。然而这种形式可以使用 Ramda 的 <code>compose</code> 函数进行重写。</p>\n<p><code>compose</code> 的工作方式跟 <code>pipe</code> 基本相同，除了其调用函数的顺序是从右到左，而不是从左到右。下面使用 <code>compose</code> 来重写 <code>operate</code>：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> operate = compose(</div><div class=\"line\">  square,</div><div class=\"line\">  addOne,</div><div class=\"line\">  multiply</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p>这与上面的 <code>pipe</code> 几乎一样，除了函数的顺序是相反的。实际上，Ramda 中的 <code>compose</code> 函数的内部是用 <code>pipe</code> 实现的。</p>\n<p>我一直这样思考 <code>compose</code> 的工作方式：<code>compose(f, g)(value)</code> 等价于 <code>f(g(value))</code>。</p>\n<p>注意，与 <code>pipe</code> 类似，<code>compose</code> 中的函数除最后一个外，其余都是一元函数。</p>\n<p><strong>compose 还是 pipe？</strong></p>\n<p>具有命令式编程背景的人可能觉得 <code>pipe</code> 更容易理解，因为可以按照从左往右的顺序进行阅读。但 <code>compose</code> 更容易对如上所示的嵌套函数进行转换。</p>\n<p>我也不太清楚什么时候该用 <code>compose</code>，什么时候该用 <code>pipe</code>。由于它们在 Ramda 中基本等价，所以选择用哪个可能并不重要。只要根据自己的情况选择合适的即可。</p>\n<p><strong>结论</strong></p>\n<p>通过特定的方式进行函数组合，我们已经可以开始编写更强的函数了。</p>\n<p><strong>下一节</strong></p>\n<p>你可能已经注意到了，在进行函数组合时，我们多数情况下都可以省略函数参数。只有在最终调用组合好的函数时，才传入参数。</p>\n<p>这在函数式编程中非常常见，我们将在下一节 <a href=\"https://adispring.coding.me/2017/06/11/Thinking-in-Ramda-Partial-Application/\" target=\"_blank\" rel=\"external\"><code>Partial Application</code> (部分应用)</a>进行更多详细介绍。我们还会讨论如何组合多元（多参数）函数。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>译者注：本文翻译自 Randy Coulman 的 《<a href=\"http://randycoulman.com/blog/2016/05/31/thinking-in-ramda-combining-functions/\" target=\"_blank\" rel=\"external\">Thinking in Ramda: Combining Functions</a>》，转载请与<a href=\"https://github.com/randycoulman\" target=\"_blank\" rel=\"external\">原作者</a>或<a href=\"https://github.com/adispring\" target=\"_blank\" rel=\"external\">本人</a>联系。下面开始正文。</p>\n<hr>\n<p>本文是函数式编程系列文章：<a href=\"https://adispring.coding.me/categories/Thinking-in-Ramda/\" target=\"_blank\" rel=\"external\">Thinking in Ramda</a> 的第二篇。</p>\n<p>在<a href=\"https://adispring.coding.me/2017/06/09/Thinking-in-Ramda-%E5%85%A5%E9%97%A8/\" target=\"_blank\" rel=\"external\">第一节</a>中，介绍了 Ramda 和函数式编程的一些基本思想，如函数、纯函数和数据不变性。并介绍了如何入门：可以从集合迭代函数（如 <code>forEach</code>、<code>map</code>、<code>reduce</code>）开始。</p>\n<p><strong>简单组合</strong></p>\n<p>一旦熟悉了可以将函数传递给其他函数，你可能会开始找将多个函数组合在一起的场景。</p>\n<p>Ramda 为简单的函数组合提供了一些函数。我们来看看。</p>\n<p><strong>Complement</strong></p>\n<p>在上一节，我们使用 <code>find</code> 来查找列表中的首个偶数。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> isEven = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x % <span class=\"number\">2</span> === <span class=\"number\">0</span></div><div class=\"line\">find(isEven, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]) <span class=\"comment\">//=&gt; 2</span></div></pre></td></tr></table></figure></p>\n<p>如果想找首个奇数呢？我们可以随手写一个 <code>isOdd</code> 函数并使用它。但我们知道任何非偶整数都是奇数，所以可以重用 <code>isEven</code> 函数。</p>\n<p>Ramda 提供了一个更高阶的函数：<code>complement</code>，给它传入一个函数，返回一个新的函数：当原函数返回 &quot;假值&quot; 时，新函数返回 <code>true</code>；原函数返回 &quot;真值&quot; 时，新函数返回 <code>false</code>，即新函数是原函数的补函数。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> isEven = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x % <span class=\"number\">2</span> === <span class=\"number\">0</span></div><div class=\"line\"> </div><div class=\"line\">find(complement(isEven), [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]) <span class=\"comment\">// --&gt; 1</span></div></pre></td></tr></table></figure></p>\n<p>更进一步，可以给 <code>complement</code> 过的函数起个名字，这样新函数便可以复用：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> isEven = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x % <span class=\"number\">2</span> === <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">const</span> isOdd = complement(isEven)</div><div class=\"line\"> </div><div class=\"line\">find(isOdd, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]) <span class=\"comment\">// --&gt; 1</span></div></pre></td></tr></table></figure></p>\n<p>注意，<code>complement</code> 以函数的方式实现了逻辑非操作（<code>!</code>， not）的功能。</p>\n<p><code>Both/Either</code></p>\n<p>假设我们正在开发一个投票系统，给定一个人，我们希望能够确定其是否有资格投票。根据现有知识，一个人必须年满 18 岁并且是本国公民，才有资格投票。成为公民的条件：在本国出生，或者后来加入该国国籍。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> wasBornInCountry = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> person.birthCountry === OUR_COUNTRY</div><div class=\"line\"><span class=\"keyword\">const</span> wasNaturalized = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> <span class=\"built_in\">Boolean</span>(person.naturalizationDate)</div><div class=\"line\"><span class=\"keyword\">const</span> isOver18 = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> person.age &gt;= <span class=\"number\">18</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> isCitizen = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> wasBornInCountry(person) || wasNaturalized(person)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> isEligibleToVote = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> isOver18(person) &amp;&amp; isCitizen(person)</div></pre></td></tr></table></figure></p>\n<p>上面代码实现了我们的需求，但 Ramda 提供了一些方便的函数，以帮助我们精简代码。</p>\n<p><code>both</code> 接受两个函数，返回一个新函数：当两个传入函数都返回 <code>truthy</code> 值时，新函数返回 <code>true</code>，否则返回 <code>false</code></p>\n<p><code>either</code> 接受两个函数，返回一个新函数：当两个传入函数任意一个返回 <code>truthy</code> 值时，新函数返回 <code>true</code>，否则返回 <code>false</code></p>\n<p>我们可以使用这两个函数来简化 <code>isCitizen</code> 和 <code>isEligibleToVote</code>。\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> isCitizen = either(wasBornInCountry, wasNaturalized)</div><div class=\"line\"><span class=\"keyword\">const</span> isEligibleToVote = both(isOver18, isCitizen)</div></pre></td></tr></table></figure></p>\n<p>注意，<code>both</code> 以函数的方式实现了逻辑与（<code>&amp;&amp;</code>）的功能，<code>either</code> 实现了逻辑或（<code>||</code>）的功能。</p>\n<p>Ramda 还提供了 <code>allPass</code> 和 <code>anyPass</code>，接受由任意多个函数组成的数组作为参数。如名称所示，<code>allPass</code> 类似于 <code>both</code>，而 <code>anyPass</code> 类似于 <code>either</code>。</p>\n<p><strong>Pipelines(管道)</strong></p>\n<p>有时我们需要以 pipeline 的方式将多个函数依次作用于某些数据。例如，接受两个数字，将它们相乘，加 1 ，然后平方。我们可以这样写：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> multiply = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a * b</div><div class=\"line\"><span class=\"keyword\">const</span> addOne = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">const</span> square = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * x</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> operate = <span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> product = multiply(x, y)</div><div class=\"line\">  <span class=\"keyword\">const</span> incremented = addOne(product)</div><div class=\"line\">  <span class=\"keyword\">const</span> squared = square(incremented)</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">return</span> squared</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">operate(<span class=\"number\">3</span>, <span class=\"number\">4</span>) <span class=\"comment\">// =&gt; ((3 * 4) + 1)^2 =&gt; (12 + 1)^2 =&gt; 13^2 =&gt; 169</span></div></pre></td></tr></table></figure></p>\n<p>注意，每次操作是对上次操作的结果进行处理。</p>\n<p><strong>pipe</strong></p>\n<p>Ramda 提供了 <code>pipe</code> 函数：接受一系列函数，并返回一个新函数。</p>\n<p>新函数的元数与第一个传入函数的元数相同（元数：接受参数的个数），然后顺次通过 &quot;管道&quot; 中的函数对输入参数进行处理。它将第一个函数作用于参数，返回结果作为下一个函数的入参，依次进行下去。&quot;管道&quot; 中最后一个函数的结果作为 <code>pipe</code> 调用的最终结果。</p>\n<p>注意，除首个函数外，其余的函数都是一元函数。</p>\n<p>了解这些后，我们可以使用 <code>pipe</code> 来简化我们的 <code>operate</code> 函数：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> operate = pipe(</div><div class=\"line\">  multiply,</div><div class=\"line\">  addOne,</div><div class=\"line\">  square</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p>当调用 <code>operate(3, 4)</code> 时，<code>pipe</code> 将 <code>3</code> 和 <code>4</code> 传给 <code>multiply</code> 函数，输出 <code>12</code>，然后将 <code>12</code> 传给 <code>addOne</code>，返回 <code>13</code>，然后将 <code>13</code> 传给 <code>square</code>，返回 <code>169</code>，并将 <code>169</code> 作为最终 <code>operate</code> 的最终结果返回。</p>\n<p><strong>compose</strong></p>\n<p>另一种编写原始 <code>operate</code> 函数的方式是内联所有暂时变量：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> operate = <span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> square(addOne(multiply(x, y)))</div></pre></td></tr></table></figure></p>\n<p>这样更紧凑，但也更不便于阅读。然而这种形式可以使用 Ramda 的 <code>compose</code> 函数进行重写。</p>\n<p><code>compose</code> 的工作方式跟 <code>pipe</code> 基本相同，除了其调用函数的顺序是从右到左，而不是从左到右。下面使用 <code>compose</code> 来重写 <code>operate</code>：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> operate = compose(</div><div class=\"line\">  square,</div><div class=\"line\">  addOne,</div><div class=\"line\">  multiply</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p>这与上面的 <code>pipe</code> 几乎一样，除了函数的顺序是相反的。实际上，Ramda 中的 <code>compose</code> 函数的内部是用 <code>pipe</code> 实现的。</p>\n<p>我一直这样思考 <code>compose</code> 的工作方式：<code>compose(f, g)(value)</code> 等价于 <code>f(g(value))</code>。</p>\n<p>注意，与 <code>pipe</code> 类似，<code>compose</code> 中的函数除最后一个外，其余都是一元函数。</p>\n<p><strong>compose 还是 pipe？</strong></p>\n<p>具有命令式编程背景的人可能觉得 <code>pipe</code> 更容易理解，因为可以按照从左往右的顺序进行阅读。但 <code>compose</code> 更容易对如上所示的嵌套函数进行转换。</p>\n<p>我也不太清楚什么时候该用 <code>compose</code>，什么时候该用 <code>pipe</code>。由于它们在 Ramda 中基本等价，所以选择用哪个可能并不重要。只要根据自己的情况选择合适的即可。</p>\n<p><strong>结论</strong></p>\n<p>通过特定的方式进行函数组合，我们已经可以开始编写更强的函数了。</p>\n<p><strong>下一节</strong></p>\n<p>你可能已经注意到了，在进行函数组合时，我们多数情况下都可以省略函数参数。只有在最终调用组合好的函数时，才传入参数。</p>\n<p>这在函数式编程中非常常见，我们将在下一节 <a href=\"https://adispring.coding.me/2017/06/11/Thinking-in-Ramda-Partial-Application/\" target=\"_blank\" rel=\"external\"><code>Partial Application</code> (部分应用)</a>进行更多详细介绍。我们还会讨论如何组合多元（多参数）函数。</p>\n"},{"title":"Thinking in Ramda: 部分应用","date":"2017-06-10T22:01:57.000Z","_content":"\n译者注：本文翻译自 Randy Coulman 的 《[Thinking in Ramda: Partial Application](http://randycoulman.com/blog/2016/06/07/thinking-in-ramda-partial-application/)》，转载请与[原作者](https://github.com/randycoulman)或[本人](https://github.com/adispring)联系。下面开始正文。\n\n---\n\n本文是函数式编程系列文章：[Thinking in Ramda](https://adispring.coding.me/categories/Thinking-in-Ramda/) 的第三篇。\n\n在[第二节](https://adispring.coding.me/2017/06/10/Thinking-in-Ramda-Combining-Functions/)中，讨论了各种函数组合的方式。最后，演示了 `compose` 和 `pipe`， 可以以 \"pipeline\" （管道）的形式对一系列函数进行调用。\n\n在上篇文章中，简单的函数链式调用（\"pipeline\"）时，其中的被调用函数都是一元的（除了首个函数）。但如果要使用多元函数呢？\n\n例如，假设有一个书籍对象的集合，我们想要找到特定年份出版的所有图书的标题。可以使用 Ramda 的集合迭代函数完成该需求：\n\n```js\nconst publishedInYear = (book, year) => book.year === year\n \nconst titlesForYear = (books, year) => {\n  const selected = filter(book => publishedInYear(book, year), books)\n \n  return map(book => book.title, selected)\n}\n```\n\n如果能将 `filter` 和 `map` 组合成 \"pipeline\" 就好了，但我们并不知道该如何处理，因为 `filter` 和 `map` 都是二元函数。\n\n如果不需要在 `filter` 中使用箭头函数会更好些。先来解决这个问题，并借此展示一些制作 \"pipeline\" 的知识。\n\n**高阶函数**\n\n在本系列文章的[第一篇](https://adispring.coding.me/2017/06/09/Thinking-in-Ramda-%E5%85%A5%E9%97%A8/)中，我们将函数视为 \"一等结构\"。一等函数可以作为参数传递给其他函数，也可以作为其他函数的返回值。我们一直在使用前者，但还没有见过后者（函数作为其他函数的返回值）。\n\n获取或返回其他函数的函数称为 \"高阶函数\"。\n\n在上面的示例中，我们传递了一个箭头函数给 `filter`：`book => publishedInYear(book, year)`，但我们想去掉箭头函数。为了做到这点，需要一个函数：输入一本书，若该书是在指定年份出版的则返回 `true`。但还需要一个指定的年份，让该操作更加灵活。\n\n为了解决这个问题，可以将 `publishedInYear` 变为返回另一个函数的函数。我将使用普通的语法来实现该函数，以便能够清晰地展示其内部具体实现，然后使用箭头函数实现一个更短版本的函数：\n\n```js\n// Full function version:\nfunction publishedInYear(year) {\n  return function(book) {\n    return book.year === year\n  }\n}\n \n// Arrow function version:\nconst publishedInYear = year => book => book.year === year\n```\n\n利用新实现的 `publishedInYear`，可以重写 `filter` 调用，从而消除箭头函数：\n\n```js\nconst publishedInYear = year => book => book.year === year\n \nconst titlesForYear = (books, year) => {\n  const selected = filter(publishedInYear(year), books)\n \n  return map(book => book.title, selected)\n}\n```\n\n现在，当调用 `filter` 时，`publishedInYear(year)` 会立即调用，并返回一个接受 `book` 为参数的函数，这正是 `filter` 需要的。\n\n**部分应用函数**\n\n可以按上面的方式重写任何多参数函数。但我们不可能拥有所有我们想要的函数的源码；另外，很多情况下，我们可能还是希望以普通的方式调用多参数函数。\n\n例如，在其他一些代码中，只是想检查一本书是否是在指定年份出版的，我们可能想要 `publishedInYear(book, 2012)`，但现在不能再那么做了。相反，我们必须要用这种方式：`publishedInYear(book)(2012)`。这样做降低了代码的可读性，也很烦人。\n\n幸运的是，Ramda 提供了两个函数：`partial` 和 `partialRight`，来帮我们解决这个问题。\n\n这两个函数可以让我们不必一次传递所有需要的参数，也可以调用函数。它们都返回一个接受剩余参数的新函数，当所有参数都传入后，才会真正调用被包裹的原函数。\n\n`partial` 和 `partialRight` 的区别在于参数传递的顺序：`partial` 先传递原函数左侧的参数，而 `partialRight` 先传递右侧的参数。\n\n回到刚开始的例子，使用上面的一个函数来代替原来对 `publishedInYear` 的重写。由于刚开始我们只需要最右侧的参数：`year`，所以需要使用 `partialRight`.\n\n```js\nconst publishedInYear = (book, year) => book.year === year\n \nconst titlesForYear = (books, year) => {\n  const selected = filter(partialRight(publishedInYear, [year]), books)\n \n  return map(book => book.title, selected)\n}\n```\n\n如果 `pubilshedInYear` 原本参数的顺序为 `(year, book)` ，而非 `(book, year)` ，则需要用 `partial` 代替 `partialRight`。\n\n注意，为被 `partial` 和 `partialRight` 包裹的函数提供的参数必须包裹在数组中，即使只有一个参数。我不会告诉你我已经忘记了多少次，导致出现令人困惑的错误信息：\n\n```bash\nFirst argument to _arity must be a non-negative integer no greater than ten\n```\n\n**柯里化(Curry)**\n\n如果到处使用 `partial` 和 `partialRight` 的话，会让代码变得冗长乏味；但是，将多元函数以一系列一元函数的形式调用同样不好。\n\n幸运的是，Ramda 给我们提供了一个解决方案：`curry`。\n\n[Currying（柯里化）](https://en.wikipedia.org/wiki/Currying) 是函数式编程的另一个核心概念。从技术角度讲，一个柯里化了的函数是一系列高阶一元函数，这也是我刚刚抱怨过的。在纯函数式语言中，柯里化函数在调用时，语法上看起来和调用多个参数没有什么区别。\n\n但由于 Ramda 是一个 JavaScript 库，而 JavaScript 并没有很好的语法来支持一系列一元函数的调用，所以作者对传统柯里化的定义放宽了一些。\n\n在 Ramda 中，一个柯里化的函数只能用其参数的子集来调用，它会返回一个接受其余参数的新函数。当使用它的所有参数调用，真正的原函数将被调用。\n\n柯里化的函数在下列两种情况下工作的都很好：\n\n1. 可以按正常情况下使用所有参数调用它，它可以像普通函数一样正常工作；\n2. 也可以使用部分参数来调用它，这时它会像使用 `partial` 一样工作。\n\n注意，这种灵活性带来了一些性能上的损失，因为 `curry` 需要搞清楚函数的调用方式，然后确定该做什么。一般来说，我只有需要在多个地方对同一个函数使用 `partial` 的时候，才会对函数进行柯里化。\n\n接下来写一个柯里化版本的 `publishedInYear` 函数。注意，`curry` 会像 `partial` 一样工作；并且没有 `partialRight` 版本的 `curry` 函数。对这方面后续会有更多讨论，但现在我们需要将 `publishedInYear` 的参数翻转一下，以便让参数 `year` 在最前面。\n\n```js\nconst publishedInYear = curry((year, book) => book.year === year)\n \nconst titlesForYear = (books, year) => {\n  const selected = filter(publishedInYear(year), books)\n \n  return map(book => book.title, selected)\n}\n```\n\n现在可以只使用参数 `year` 来调用 `publishedInYear`，并返回一个新函数，该函数接受参数 `book` 并执行原函数。但是，仍然可以按普通方式对它调用：`publishedInYear(2012, book)`，不需要写烦人的语法 `)(`。所以，柯里化的函数在两种情况下都能很好地工作。\n\n**参数的顺序**\n\n注意，为了让 `curry` 工作，我们不得不对参数的顺序进行翻转。这在函数式编程中非常常见，所以几乎所有的 Ramda 函数都将待处理的数据放到参数列表的最后面。\n\n你可以将先期传入的参数看作对操作的配置。所以，对于 `publishedInYear`，参数 `year` 作为配置（需要查找的年份），而参数 `book` 作为被处理的数据（被查找的对象）。\n\n我们已经在集合迭代函数中见过这样的例子。它们都将集合作为最后一个参数，这样可以使这种风格的编程更容易些。\n\n**顺序错误的参数**\n\n如果不改变 `publishedInYear` 的顺序，还可以继续使用柯里化特性的优势吗？\n\n当然可以了，Ramda 提供了几个选择。\n\n**flip**\n\n第一个选择是 `flip`。`flip` 接受一个多元函数（元数 >= 2），返回一个元数相同的新函数，但前 2 个参数的顺序调换了。它主要用于二元函数，但也可以用于一般函数。\n\n使用 `flip`，我们可以恢复 `publishedInYear` 参数的初始的顺序：\n\n```js\nconst publishedInYear = curry((book, year) => book.year === year)\n \nconst titlesForYear = (books, year) => {\n  const selected = filter(flip(publishedInYear)(year), books)\n \n  return map(book => book.title, selected)\n}\n```\n\n多数情况下，我更喜欢使用方便的参数顺序，但如果用到不能自己掌控的函数，`flip` 是一个好的选择。\n\n**placeholder (占位符)**\n\n更通用的选择是使用 \"placeholder\" 参数（`__`）\n\n假设有一个三元柯里化的函数，并且我们想传入第一个和最后一个参数，中间参数后续再传，应该怎么办呢？我们可以使用 \"占位符\" 作为中间参数：\n\n```js\nconst threeArgs = curry((a, b, c) => { /* ... */ })\n \nconst middleArgumentLater = threeArgs('value for a', __, 'value for c')\n```\n\n可以在函数调用中多次使用 \"占位符\"。例如，如果只想传递中间参数呢？\n\n```js\nconst threeArgs = curry((a, b, c) => { /* ... */ })\n \nconst middleArgumentOnly = threeArgs(__, 'value for b', __)\n```\n\n也可以使用 \"占位符\" 代替 `flip`：\n\n```js\nconst publishedInYear = curry((book, year) => book.year === year)\n \nconst titlesForYear = (books, year) => {\n  const selected = filter(publishedInYear(__, year), books)\n \n  return map(book => book.title, selected)\n}\n```\n\n我觉得这个版本的可读性更好，但如果需要频繁使用参数顺序翻转的 `publishedInYear`，我可能会使用 `flip` 定义一个辅助函数，然后在任何用到它的地方使用辅助函数。在后续文章中会看到一些示例。 \n\n注意， `__` 仅适用于柯里化的函数，而 `partial`、`partialRight` 和 `flip` 适用于任何函数。如果需要对某个普通函数使用 `__`，可以先用 `curry` 将其包裹起来。\n\n**来做一条管道（pipeline）**\n\n现在看看能否将我们的 `filter` 和 `map` 调用放入 \"pipeline\" (管道)中？下面是代码当前的状态，使用了方便的参数顺序的 `publishedInYear`：\n\n```js\nconst publishedInYear = curry((year, book) => book.year === year)\n \nconst titlesForYear = (books, year) => {\n  const selected = filter(publishedInYear(year), books)\n \n  return map(book => book.title, selected)\n}\n```\n\n在上一节中，我们了解了 `pipe` 和 `compose`，但我们还需要另一部分信息，以便能够使用上面所学的知识。\n\n缺少的信息是：几乎所有的 Ramda 函数都是默认柯里化的，包括 `filter` 和 `map`。所以 `filter(publishedInYear(year))` 是完全合法的，它会返回一个新函数，该函数等待我们传递 `books` 给它，`map(book => book.title)` 也是如此。\n\n现在可以编写 \"pipeline\" 了：\n\n```js\nconst publishedInYear = curry((year, book) => book.year === year)\n \nconst titlesForYear = (books, year) =>\n  pipe(\n    filter(publishedInYear(year)),\n    map(book => book.title)\n  )(books)\n```\n\n我们来更进一步，将 `titlesForYear` 的参数顺序也调换一下，这样更符合 Ramda 中待处理数据放在最后的约定。也可以将该函数进行柯里化，以便其在后续的 \"pipeline\" 中使用。\n\n```js\nconst publishedInYear = curry((year, book) => book.year === year)\n \nconst titlesForYear = curry((year, books) =>\n  pipe(\n    filter(publishedInYear(year)),\n    map(book => book.title)\n  )(books)\n)\n```\n\n**结论**\n\n本文可能是这个系列中讲解最深的一篇。部分应用和柯里化可能需要花一些时间和精力来熟悉和掌握。但一旦学会，他们会以一种强大的方式将数据处理变得更加函数式。\n\n它们引导你通过创建包含许多小而简单代码块的 \"pipeline\" 的方式，来构建数据处理程序。\n\n**下一节**\n\n为了以函数式的方式编写代码，我们需要用 \"声明式\" 的思维代替 \"命令式\" 思维。要做到这点，需要找到一种函数式的方式来表示命令式的结构。[声明式编程](https://adispring.coding.me/2017/06/11/Thinking-in-Ramda-Declarative-Programming/) 将会讨论这些想法。\n","source":"_posts/Thinking-in-Ramda-Partial-Application.md","raw":"---\ntitle: 'Thinking in Ramda: 部分应用'\ndate: 2017-06-11 06:01:57\ncategories: 'Thinking in Ramda'\n---\n\n译者注：本文翻译自 Randy Coulman 的 《[Thinking in Ramda: Partial Application](http://randycoulman.com/blog/2016/06/07/thinking-in-ramda-partial-application/)》，转载请与[原作者](https://github.com/randycoulman)或[本人](https://github.com/adispring)联系。下面开始正文。\n\n---\n\n本文是函数式编程系列文章：[Thinking in Ramda](https://adispring.coding.me/categories/Thinking-in-Ramda/) 的第三篇。\n\n在[第二节](https://adispring.coding.me/2017/06/10/Thinking-in-Ramda-Combining-Functions/)中，讨论了各种函数组合的方式。最后，演示了 `compose` 和 `pipe`， 可以以 \"pipeline\" （管道）的形式对一系列函数进行调用。\n\n在上篇文章中，简单的函数链式调用（\"pipeline\"）时，其中的被调用函数都是一元的（除了首个函数）。但如果要使用多元函数呢？\n\n例如，假设有一个书籍对象的集合，我们想要找到特定年份出版的所有图书的标题。可以使用 Ramda 的集合迭代函数完成该需求：\n\n```js\nconst publishedInYear = (book, year) => book.year === year\n \nconst titlesForYear = (books, year) => {\n  const selected = filter(book => publishedInYear(book, year), books)\n \n  return map(book => book.title, selected)\n}\n```\n\n如果能将 `filter` 和 `map` 组合成 \"pipeline\" 就好了，但我们并不知道该如何处理，因为 `filter` 和 `map` 都是二元函数。\n\n如果不需要在 `filter` 中使用箭头函数会更好些。先来解决这个问题，并借此展示一些制作 \"pipeline\" 的知识。\n\n**高阶函数**\n\n在本系列文章的[第一篇](https://adispring.coding.me/2017/06/09/Thinking-in-Ramda-%E5%85%A5%E9%97%A8/)中，我们将函数视为 \"一等结构\"。一等函数可以作为参数传递给其他函数，也可以作为其他函数的返回值。我们一直在使用前者，但还没有见过后者（函数作为其他函数的返回值）。\n\n获取或返回其他函数的函数称为 \"高阶函数\"。\n\n在上面的示例中，我们传递了一个箭头函数给 `filter`：`book => publishedInYear(book, year)`，但我们想去掉箭头函数。为了做到这点，需要一个函数：输入一本书，若该书是在指定年份出版的则返回 `true`。但还需要一个指定的年份，让该操作更加灵活。\n\n为了解决这个问题，可以将 `publishedInYear` 变为返回另一个函数的函数。我将使用普通的语法来实现该函数，以便能够清晰地展示其内部具体实现，然后使用箭头函数实现一个更短版本的函数：\n\n```js\n// Full function version:\nfunction publishedInYear(year) {\n  return function(book) {\n    return book.year === year\n  }\n}\n \n// Arrow function version:\nconst publishedInYear = year => book => book.year === year\n```\n\n利用新实现的 `publishedInYear`，可以重写 `filter` 调用，从而消除箭头函数：\n\n```js\nconst publishedInYear = year => book => book.year === year\n \nconst titlesForYear = (books, year) => {\n  const selected = filter(publishedInYear(year), books)\n \n  return map(book => book.title, selected)\n}\n```\n\n现在，当调用 `filter` 时，`publishedInYear(year)` 会立即调用，并返回一个接受 `book` 为参数的函数，这正是 `filter` 需要的。\n\n**部分应用函数**\n\n可以按上面的方式重写任何多参数函数。但我们不可能拥有所有我们想要的函数的源码；另外，很多情况下，我们可能还是希望以普通的方式调用多参数函数。\n\n例如，在其他一些代码中，只是想检查一本书是否是在指定年份出版的，我们可能想要 `publishedInYear(book, 2012)`，但现在不能再那么做了。相反，我们必须要用这种方式：`publishedInYear(book)(2012)`。这样做降低了代码的可读性，也很烦人。\n\n幸运的是，Ramda 提供了两个函数：`partial` 和 `partialRight`，来帮我们解决这个问题。\n\n这两个函数可以让我们不必一次传递所有需要的参数，也可以调用函数。它们都返回一个接受剩余参数的新函数，当所有参数都传入后，才会真正调用被包裹的原函数。\n\n`partial` 和 `partialRight` 的区别在于参数传递的顺序：`partial` 先传递原函数左侧的参数，而 `partialRight` 先传递右侧的参数。\n\n回到刚开始的例子，使用上面的一个函数来代替原来对 `publishedInYear` 的重写。由于刚开始我们只需要最右侧的参数：`year`，所以需要使用 `partialRight`.\n\n```js\nconst publishedInYear = (book, year) => book.year === year\n \nconst titlesForYear = (books, year) => {\n  const selected = filter(partialRight(publishedInYear, [year]), books)\n \n  return map(book => book.title, selected)\n}\n```\n\n如果 `pubilshedInYear` 原本参数的顺序为 `(year, book)` ，而非 `(book, year)` ，则需要用 `partial` 代替 `partialRight`。\n\n注意，为被 `partial` 和 `partialRight` 包裹的函数提供的参数必须包裹在数组中，即使只有一个参数。我不会告诉你我已经忘记了多少次，导致出现令人困惑的错误信息：\n\n```bash\nFirst argument to _arity must be a non-negative integer no greater than ten\n```\n\n**柯里化(Curry)**\n\n如果到处使用 `partial` 和 `partialRight` 的话，会让代码变得冗长乏味；但是，将多元函数以一系列一元函数的形式调用同样不好。\n\n幸运的是，Ramda 给我们提供了一个解决方案：`curry`。\n\n[Currying（柯里化）](https://en.wikipedia.org/wiki/Currying) 是函数式编程的另一个核心概念。从技术角度讲，一个柯里化了的函数是一系列高阶一元函数，这也是我刚刚抱怨过的。在纯函数式语言中，柯里化函数在调用时，语法上看起来和调用多个参数没有什么区别。\n\n但由于 Ramda 是一个 JavaScript 库，而 JavaScript 并没有很好的语法来支持一系列一元函数的调用，所以作者对传统柯里化的定义放宽了一些。\n\n在 Ramda 中，一个柯里化的函数只能用其参数的子集来调用，它会返回一个接受其余参数的新函数。当使用它的所有参数调用，真正的原函数将被调用。\n\n柯里化的函数在下列两种情况下工作的都很好：\n\n1. 可以按正常情况下使用所有参数调用它，它可以像普通函数一样正常工作；\n2. 也可以使用部分参数来调用它，这时它会像使用 `partial` 一样工作。\n\n注意，这种灵活性带来了一些性能上的损失，因为 `curry` 需要搞清楚函数的调用方式，然后确定该做什么。一般来说，我只有需要在多个地方对同一个函数使用 `partial` 的时候，才会对函数进行柯里化。\n\n接下来写一个柯里化版本的 `publishedInYear` 函数。注意，`curry` 会像 `partial` 一样工作；并且没有 `partialRight` 版本的 `curry` 函数。对这方面后续会有更多讨论，但现在我们需要将 `publishedInYear` 的参数翻转一下，以便让参数 `year` 在最前面。\n\n```js\nconst publishedInYear = curry((year, book) => book.year === year)\n \nconst titlesForYear = (books, year) => {\n  const selected = filter(publishedInYear(year), books)\n \n  return map(book => book.title, selected)\n}\n```\n\n现在可以只使用参数 `year` 来调用 `publishedInYear`，并返回一个新函数，该函数接受参数 `book` 并执行原函数。但是，仍然可以按普通方式对它调用：`publishedInYear(2012, book)`，不需要写烦人的语法 `)(`。所以，柯里化的函数在两种情况下都能很好地工作。\n\n**参数的顺序**\n\n注意，为了让 `curry` 工作，我们不得不对参数的顺序进行翻转。这在函数式编程中非常常见，所以几乎所有的 Ramda 函数都将待处理的数据放到参数列表的最后面。\n\n你可以将先期传入的参数看作对操作的配置。所以，对于 `publishedInYear`，参数 `year` 作为配置（需要查找的年份），而参数 `book` 作为被处理的数据（被查找的对象）。\n\n我们已经在集合迭代函数中见过这样的例子。它们都将集合作为最后一个参数，这样可以使这种风格的编程更容易些。\n\n**顺序错误的参数**\n\n如果不改变 `publishedInYear` 的顺序，还可以继续使用柯里化特性的优势吗？\n\n当然可以了，Ramda 提供了几个选择。\n\n**flip**\n\n第一个选择是 `flip`。`flip` 接受一个多元函数（元数 >= 2），返回一个元数相同的新函数，但前 2 个参数的顺序调换了。它主要用于二元函数，但也可以用于一般函数。\n\n使用 `flip`，我们可以恢复 `publishedInYear` 参数的初始的顺序：\n\n```js\nconst publishedInYear = curry((book, year) => book.year === year)\n \nconst titlesForYear = (books, year) => {\n  const selected = filter(flip(publishedInYear)(year), books)\n \n  return map(book => book.title, selected)\n}\n```\n\n多数情况下，我更喜欢使用方便的参数顺序，但如果用到不能自己掌控的函数，`flip` 是一个好的选择。\n\n**placeholder (占位符)**\n\n更通用的选择是使用 \"placeholder\" 参数（`__`）\n\n假设有一个三元柯里化的函数，并且我们想传入第一个和最后一个参数，中间参数后续再传，应该怎么办呢？我们可以使用 \"占位符\" 作为中间参数：\n\n```js\nconst threeArgs = curry((a, b, c) => { /* ... */ })\n \nconst middleArgumentLater = threeArgs('value for a', __, 'value for c')\n```\n\n可以在函数调用中多次使用 \"占位符\"。例如，如果只想传递中间参数呢？\n\n```js\nconst threeArgs = curry((a, b, c) => { /* ... */ })\n \nconst middleArgumentOnly = threeArgs(__, 'value for b', __)\n```\n\n也可以使用 \"占位符\" 代替 `flip`：\n\n```js\nconst publishedInYear = curry((book, year) => book.year === year)\n \nconst titlesForYear = (books, year) => {\n  const selected = filter(publishedInYear(__, year), books)\n \n  return map(book => book.title, selected)\n}\n```\n\n我觉得这个版本的可读性更好，但如果需要频繁使用参数顺序翻转的 `publishedInYear`，我可能会使用 `flip` 定义一个辅助函数，然后在任何用到它的地方使用辅助函数。在后续文章中会看到一些示例。 \n\n注意， `__` 仅适用于柯里化的函数，而 `partial`、`partialRight` 和 `flip` 适用于任何函数。如果需要对某个普通函数使用 `__`，可以先用 `curry` 将其包裹起来。\n\n**来做一条管道（pipeline）**\n\n现在看看能否将我们的 `filter` 和 `map` 调用放入 \"pipeline\" (管道)中？下面是代码当前的状态，使用了方便的参数顺序的 `publishedInYear`：\n\n```js\nconst publishedInYear = curry((year, book) => book.year === year)\n \nconst titlesForYear = (books, year) => {\n  const selected = filter(publishedInYear(year), books)\n \n  return map(book => book.title, selected)\n}\n```\n\n在上一节中，我们了解了 `pipe` 和 `compose`，但我们还需要另一部分信息，以便能够使用上面所学的知识。\n\n缺少的信息是：几乎所有的 Ramda 函数都是默认柯里化的，包括 `filter` 和 `map`。所以 `filter(publishedInYear(year))` 是完全合法的，它会返回一个新函数，该函数等待我们传递 `books` 给它，`map(book => book.title)` 也是如此。\n\n现在可以编写 \"pipeline\" 了：\n\n```js\nconst publishedInYear = curry((year, book) => book.year === year)\n \nconst titlesForYear = (books, year) =>\n  pipe(\n    filter(publishedInYear(year)),\n    map(book => book.title)\n  )(books)\n```\n\n我们来更进一步，将 `titlesForYear` 的参数顺序也调换一下，这样更符合 Ramda 中待处理数据放在最后的约定。也可以将该函数进行柯里化，以便其在后续的 \"pipeline\" 中使用。\n\n```js\nconst publishedInYear = curry((year, book) => book.year === year)\n \nconst titlesForYear = curry((year, books) =>\n  pipe(\n    filter(publishedInYear(year)),\n    map(book => book.title)\n  )(books)\n)\n```\n\n**结论**\n\n本文可能是这个系列中讲解最深的一篇。部分应用和柯里化可能需要花一些时间和精力来熟悉和掌握。但一旦学会，他们会以一种强大的方式将数据处理变得更加函数式。\n\n它们引导你通过创建包含许多小而简单代码块的 \"pipeline\" 的方式，来构建数据处理程序。\n\n**下一节**\n\n为了以函数式的方式编写代码，我们需要用 \"声明式\" 的思维代替 \"命令式\" 思维。要做到这点，需要找到一种函数式的方式来表示命令式的结构。[声明式编程](https://adispring.coding.me/2017/06/11/Thinking-in-Ramda-Declarative-Programming/) 将会讨论这些想法。\n","slug":"Thinking-in-Ramda-Partial-Application","published":1,"updated":"2017-06-13T13:34:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3vm14gu00043bs6afizhkle","content":"<p>译者注：本文翻译自 Randy Coulman 的 《<a href=\"http://randycoulman.com/blog/2016/06/07/thinking-in-ramda-partial-application/\" target=\"_blank\" rel=\"external\">Thinking in Ramda: Partial Application</a>》，转载请与<a href=\"https://github.com/randycoulman\" target=\"_blank\" rel=\"external\">原作者</a>或<a href=\"https://github.com/adispring\" target=\"_blank\" rel=\"external\">本人</a>联系。下面开始正文。</p>\n<hr>\n<p>本文是函数式编程系列文章：<a href=\"https://adispring.coding.me/categories/Thinking-in-Ramda/\" target=\"_blank\" rel=\"external\">Thinking in Ramda</a> 的第三篇。</p>\n<p>在<a href=\"https://adispring.coding.me/2017/06/10/Thinking-in-Ramda-Combining-Functions/\" target=\"_blank\" rel=\"external\">第二节</a>中，讨论了各种函数组合的方式。最后，演示了 <code>compose</code> 和 <code>pipe</code>， 可以以 &quot;pipeline&quot; （管道）的形式对一系列函数进行调用。</p>\n<p>在上篇文章中，简单的函数链式调用（&quot;pipeline&quot;）时，其中的被调用函数都是一元的（除了首个函数）。但如果要使用多元函数呢？</p>\n<p>例如，假设有一个书籍对象的集合，我们想要找到特定年份出版的所有图书的标题。可以使用 Ramda 的集合迭代函数完成该需求：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> publishedInYear = <span class=\"function\">(<span class=\"params\">book, year</span>) =&gt;</span> book.year === year</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> titlesForYear = <span class=\"function\">(<span class=\"params\">books, year</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> selected = filter(<span class=\"function\"><span class=\"params\">book</span> =&gt;</span> publishedInYear(book, year), books)</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">return</span> map(<span class=\"function\"><span class=\"params\">book</span> =&gt;</span> book.title, selected)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果能将 <code>filter</code> 和 <code>map</code> 组合成 &quot;pipeline&quot; 就好了，但我们并不知道该如何处理，因为 <code>filter</code> 和 <code>map</code> 都是二元函数。</p>\n<p>如果不需要在 <code>filter</code> 中使用箭头函数会更好些。先来解决这个问题，并借此展示一些制作 &quot;pipeline&quot; 的知识。</p>\n<p><strong>高阶函数</strong></p>\n<p>在本系列文章的<a href=\"https://adispring.coding.me/2017/06/09/Thinking-in-Ramda-%E5%85%A5%E9%97%A8/\" target=\"_blank\" rel=\"external\">第一篇</a>中，我们将函数视为 &quot;一等结构&quot;。一等函数可以作为参数传递给其他函数，也可以作为其他函数的返回值。我们一直在使用前者，但还没有见过后者（函数作为其他函数的返回值）。</p>\n<p>获取或返回其他函数的函数称为 &quot;高阶函数&quot;。</p>\n<p>在上面的示例中，我们传递了一个箭头函数给 <code>filter</code>：<code>book =&gt; publishedInYear(book, year)</code>，但我们想去掉箭头函数。为了做到这点，需要一个函数：输入一本书，若该书是在指定年份出版的则返回 <code>true</code>。但还需要一个指定的年份，让该操作更加灵活。</p>\n<p>为了解决这个问题，可以将 <code>publishedInYear</code> 变为返回另一个函数的函数。我将使用普通的语法来实现该函数，以便能够清晰地展示其内部具体实现，然后使用箭头函数实现一个更短版本的函数：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Full function version:</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">publishedInYear</span>(<span class=\"params\">year</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">book</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> book.year === year</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// Arrow function version:</span></div><div class=\"line\"><span class=\"keyword\">const</span> publishedInYear = <span class=\"function\"><span class=\"params\">year</span> =&gt;</span> book =&gt; book.year === year</div></pre></td></tr></table></figure></p>\n<p>利用新实现的 <code>publishedInYear</code>，可以重写 <code>filter</code> 调用，从而消除箭头函数：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> publishedInYear = <span class=\"function\"><span class=\"params\">year</span> =&gt;</span> book =&gt; book.year === year</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> titlesForYear = <span class=\"function\">(<span class=\"params\">books, year</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> selected = filter(publishedInYear(year), books)</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">return</span> map(<span class=\"function\"><span class=\"params\">book</span> =&gt;</span> book.title, selected)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在，当调用 <code>filter</code> 时，<code>publishedInYear(year)</code> 会立即调用，并返回一个接受 <code>book</code> 为参数的函数，这正是 <code>filter</code> 需要的。</p>\n<p><strong>部分应用函数</strong></p>\n<p>可以按上面的方式重写任何多参数函数。但我们不可能拥有所有我们想要的函数的源码；另外，很多情况下，我们可能还是希望以普通的方式调用多参数函数。</p>\n<p>例如，在其他一些代码中，只是想检查一本书是否是在指定年份出版的，我们可能想要 <code>publishedInYear(book, 2012)</code>，但现在不能再那么做了。相反，我们必须要用这种方式：<code>publishedInYear(book)(2012)</code>。这样做降低了代码的可读性，也很烦人。</p>\n<p>幸运的是，Ramda 提供了两个函数：<code>partial</code> 和 <code>partialRight</code>，来帮我们解决这个问题。</p>\n<p>这两个函数可以让我们不必一次传递所有需要的参数，也可以调用函数。它们都返回一个接受剩余参数的新函数，当所有参数都传入后，才会真正调用被包裹的原函数。</p>\n<p><code>partial</code> 和 <code>partialRight</code> 的区别在于参数传递的顺序：<code>partial</code> 先传递原函数左侧的参数，而 <code>partialRight</code> 先传递右侧的参数。</p>\n<p>回到刚开始的例子，使用上面的一个函数来代替原来对 <code>publishedInYear</code> 的重写。由于刚开始我们只需要最右侧的参数：<code>year</code>，所以需要使用 <code>partialRight</code>.</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> publishedInYear = <span class=\"function\">(<span class=\"params\">book, year</span>) =&gt;</span> book.year === year</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> titlesForYear = <span class=\"function\">(<span class=\"params\">books, year</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> selected = filter(partialRight(publishedInYear, [year]), books)</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">return</span> map(<span class=\"function\"><span class=\"params\">book</span> =&gt;</span> book.title, selected)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果 <code>pubilshedInYear</code> 原本参数的顺序为 <code>(year, book)</code> ，而非 <code>(book, year)</code> ，则需要用 <code>partial</code> 代替 <code>partialRight</code>。</p>\n<p>注意，为被 <code>partial</code> 和 <code>partialRight</code> 包裹的函数提供的参数必须包裹在数组中，即使只有一个参数。我不会告诉你我已经忘记了多少次，导致出现令人困惑的错误信息：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">First argument to _arity must be a non-negative <span class=\"built_in\">integer</span> no greater than ten</div></pre></td></tr></table></figure></p>\n<p><strong>柯里化(Curry)</strong></p>\n<p>如果到处使用 <code>partial</code> 和 <code>partialRight</code> 的话，会让代码变得冗长乏味；但是，将多元函数以一系列一元函数的形式调用同样不好。</p>\n<p>幸运的是，Ramda 给我们提供了一个解决方案：<code>curry</code>。</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Currying\" target=\"_blank\" rel=\"external\">Currying（柯里化）</a> 是函数式编程的另一个核心概念。从技术角度讲，一个柯里化了的函数是一系列高阶一元函数，这也是我刚刚抱怨过的。在纯函数式语言中，柯里化函数在调用时，语法上看起来和调用多个参数没有什么区别。</p>\n<p>但由于 Ramda 是一个 JavaScript 库，而 JavaScript 并没有很好的语法来支持一系列一元函数的调用，所以作者对传统柯里化的定义放宽了一些。</p>\n<p>在 Ramda 中，一个柯里化的函数只能用其参数的子集来调用，它会返回一个接受其余参数的新函数。当使用它的所有参数调用，真正的原函数将被调用。</p>\n<p>柯里化的函数在下列两种情况下工作的都很好：</p>\n<ol>\n<li>可以按正常情况下使用所有参数调用它，它可以像普通函数一样正常工作；</li>\n<li>也可以使用部分参数来调用它，这时它会像使用 <code>partial</code> 一样工作。</li>\n</ol>\n<p>注意，这种灵活性带来了一些性能上的损失，因为 <code>curry</code> 需要搞清楚函数的调用方式，然后确定该做什么。一般来说，我只有需要在多个地方对同一个函数使用 <code>partial</code> 的时候，才会对函数进行柯里化。</p>\n<p>接下来写一个柯里化版本的 <code>publishedInYear</code> 函数。注意，<code>curry</code> 会像 <code>partial</code> 一样工作；并且没有 <code>partialRight</code> 版本的 <code>curry</code> 函数。对这方面后续会有更多讨论，但现在我们需要将 <code>publishedInYear</code> 的参数翻转一下，以便让参数 <code>year</code> 在最前面。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> publishedInYear = curry(<span class=\"function\">(<span class=\"params\">year, book</span>) =&gt;</span> book.year === year)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> titlesForYear = <span class=\"function\">(<span class=\"params\">books, year</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> selected = filter(publishedInYear(year), books)</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">return</span> map(<span class=\"function\"><span class=\"params\">book</span> =&gt;</span> book.title, selected)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在可以只使用参数 <code>year</code> 来调用 <code>publishedInYear</code>，并返回一个新函数，该函数接受参数 <code>book</code> 并执行原函数。但是，仍然可以按普通方式对它调用：<code>publishedInYear(2012, book)</code>，不需要写烦人的语法 <code>)(</code>。所以，柯里化的函数在两种情况下都能很好地工作。</p>\n<p><strong>参数的顺序</strong></p>\n<p>注意，为了让 <code>curry</code> 工作，我们不得不对参数的顺序进行翻转。这在函数式编程中非常常见，所以几乎所有的 Ramda 函数都将待处理的数据放到参数列表的最后面。</p>\n<p>你可以将先期传入的参数看作对操作的配置。所以，对于 <code>publishedInYear</code>，参数 <code>year</code> 作为配置（需要查找的年份），而参数 <code>book</code> 作为被处理的数据（被查找的对象）。</p>\n<p>我们已经在集合迭代函数中见过这样的例子。它们都将集合作为最后一个参数，这样可以使这种风格的编程更容易些。</p>\n<p><strong>顺序错误的参数</strong></p>\n<p>如果不改变 <code>publishedInYear</code> 的顺序，还可以继续使用柯里化特性的优势吗？</p>\n<p>当然可以了，Ramda 提供了几个选择。</p>\n<p><strong>flip</strong></p>\n<p>第一个选择是 <code>flip</code>。<code>flip</code> 接受一个多元函数（元数 &gt;= 2），返回一个元数相同的新函数，但前 2 个参数的顺序调换了。它主要用于二元函数，但也可以用于一般函数。</p>\n<p>使用 <code>flip</code>，我们可以恢复 <code>publishedInYear</code> 参数的初始的顺序：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> publishedInYear = curry(<span class=\"function\">(<span class=\"params\">book, year</span>) =&gt;</span> book.year === year)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> titlesForYear = <span class=\"function\">(<span class=\"params\">books, year</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> selected = filter(flip(publishedInYear)(year), books)</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">return</span> map(<span class=\"function\"><span class=\"params\">book</span> =&gt;</span> book.title, selected)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>多数情况下，我更喜欢使用方便的参数顺序，但如果用到不能自己掌控的函数，<code>flip</code> 是一个好的选择。</p>\n<p><strong>placeholder (占位符)</strong></p>\n<p>更通用的选择是使用 &quot;placeholder&quot; 参数（<code>__</code>）</p>\n<p>假设有一个三元柯里化的函数，并且我们想传入第一个和最后一个参数，中间参数后续再传，应该怎么办呢？我们可以使用 &quot;占位符&quot; 作为中间参数：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> threeArgs = curry(<span class=\"function\">(<span class=\"params\">a, b, c</span>) =&gt;</span> &#123; <span class=\"comment\">/* ... */</span> &#125;)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> middleArgumentLater = threeArgs(<span class=\"string\">'value for a'</span>, __, <span class=\"string\">'value for c'</span>)</div></pre></td></tr></table></figure></p>\n<p>可以在函数调用中多次使用 &quot;占位符&quot;。例如，如果只想传递中间参数呢？</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> threeArgs = curry(<span class=\"function\">(<span class=\"params\">a, b, c</span>) =&gt;</span> &#123; <span class=\"comment\">/* ... */</span> &#125;)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> middleArgumentOnly = threeArgs(__, <span class=\"string\">'value for b'</span>, __)</div></pre></td></tr></table></figure></p>\n<p>也可以使用 &quot;占位符&quot; 代替 <code>flip</code>：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> publishedInYear = curry(<span class=\"function\">(<span class=\"params\">book, year</span>) =&gt;</span> book.year === year)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> titlesForYear = <span class=\"function\">(<span class=\"params\">books, year</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> selected = filter(publishedInYear(__, year), books)</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">return</span> map(<span class=\"function\"><span class=\"params\">book</span> =&gt;</span> book.title, selected)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我觉得这个版本的可读性更好，但如果需要频繁使用参数顺序翻转的 <code>publishedInYear</code>，我可能会使用 <code>flip</code> 定义一个辅助函数，然后在任何用到它的地方使用辅助函数。在后续文章中会看到一些示例。</p>\n<p>注意， <code>__</code> 仅适用于柯里化的函数，而 <code>partial</code>、<code>partialRight</code> 和 <code>flip</code> 适用于任何函数。如果需要对某个普通函数使用 <code>__</code>，可以先用 <code>curry</code> 将其包裹起来。</p>\n<p><strong>来做一条管道（pipeline）</strong></p>\n<p>现在看看能否将我们的 <code>filter</code> 和 <code>map</code> 调用放入 &quot;pipeline&quot; (管道)中？下面是代码当前的状态，使用了方便的参数顺序的 <code>publishedInYear</code>：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> publishedInYear = curry(<span class=\"function\">(<span class=\"params\">year, book</span>) =&gt;</span> book.year === year)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> titlesForYear = <span class=\"function\">(<span class=\"params\">books, year</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> selected = filter(publishedInYear(year), books)</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">return</span> map(<span class=\"function\"><span class=\"params\">book</span> =&gt;</span> book.title, selected)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在上一节中，我们了解了 <code>pipe</code> 和 <code>compose</code>，但我们还需要另一部分信息，以便能够使用上面所学的知识。</p>\n<p>缺少的信息是：几乎所有的 Ramda 函数都是默认柯里化的，包括 <code>filter</code> 和 <code>map</code>。所以 <code>filter(publishedInYear(year))</code> 是完全合法的，它会返回一个新函数，该函数等待我们传递 <code>books</code> 给它，<code>map(book =&gt; book.title)</code> 也是如此。</p>\n<p>现在可以编写 &quot;pipeline&quot; 了：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> publishedInYear = curry(<span class=\"function\">(<span class=\"params\">year, book</span>) =&gt;</span> book.year === year)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> titlesForYear = <span class=\"function\">(<span class=\"params\">books, year</span>) =&gt;</span></div><div class=\"line\">  pipe(</div><div class=\"line\">    filter(publishedInYear(year)),</div><div class=\"line\">    map(<span class=\"function\"><span class=\"params\">book</span> =&gt;</span> book.title)</div><div class=\"line\">  )(books)</div></pre></td></tr></table></figure></p>\n<p>我们来更进一步，将 <code>titlesForYear</code> 的参数顺序也调换一下，这样更符合 Ramda 中待处理数据放在最后的约定。也可以将该函数进行柯里化，以便其在后续的 &quot;pipeline&quot; 中使用。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> publishedInYear = curry(<span class=\"function\">(<span class=\"params\">year, book</span>) =&gt;</span> book.year === year)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> titlesForYear = curry(<span class=\"function\">(<span class=\"params\">year, books</span>) =&gt;</span></div><div class=\"line\">  pipe(</div><div class=\"line\">    filter(publishedInYear(year)),</div><div class=\"line\">    map(<span class=\"function\"><span class=\"params\">book</span> =&gt;</span> book.title)</div><div class=\"line\">  )(books)</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p><strong>结论</strong></p>\n<p>本文可能是这个系列中讲解最深的一篇。部分应用和柯里化可能需要花一些时间和精力来熟悉和掌握。但一旦学会，他们会以一种强大的方式将数据处理变得更加函数式。</p>\n<p>它们引导你通过创建包含许多小而简单代码块的 &quot;pipeline&quot; 的方式，来构建数据处理程序。</p>\n<p><strong>下一节</strong></p>\n<p>为了以函数式的方式编写代码，我们需要用 &quot;声明式&quot; 的思维代替 &quot;命令式&quot; 思维。要做到这点，需要找到一种函数式的方式来表示命令式的结构。<a href=\"https://adispring.coding.me/2017/06/11/Thinking-in-Ramda-Declarative-Programming/\" target=\"_blank\" rel=\"external\">声明式编程</a> 将会讨论这些想法。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>译者注：本文翻译自 Randy Coulman 的 《<a href=\"http://randycoulman.com/blog/2016/06/07/thinking-in-ramda-partial-application/\" target=\"_blank\" rel=\"external\">Thinking in Ramda: Partial Application</a>》，转载请与<a href=\"https://github.com/randycoulman\" target=\"_blank\" rel=\"external\">原作者</a>或<a href=\"https://github.com/adispring\" target=\"_blank\" rel=\"external\">本人</a>联系。下面开始正文。</p>\n<hr>\n<p>本文是函数式编程系列文章：<a href=\"https://adispring.coding.me/categories/Thinking-in-Ramda/\" target=\"_blank\" rel=\"external\">Thinking in Ramda</a> 的第三篇。</p>\n<p>在<a href=\"https://adispring.coding.me/2017/06/10/Thinking-in-Ramda-Combining-Functions/\" target=\"_blank\" rel=\"external\">第二节</a>中，讨论了各种函数组合的方式。最后，演示了 <code>compose</code> 和 <code>pipe</code>， 可以以 &quot;pipeline&quot; （管道）的形式对一系列函数进行调用。</p>\n<p>在上篇文章中，简单的函数链式调用（&quot;pipeline&quot;）时，其中的被调用函数都是一元的（除了首个函数）。但如果要使用多元函数呢？</p>\n<p>例如，假设有一个书籍对象的集合，我们想要找到特定年份出版的所有图书的标题。可以使用 Ramda 的集合迭代函数完成该需求：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> publishedInYear = <span class=\"function\">(<span class=\"params\">book, year</span>) =&gt;</span> book.year === year</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> titlesForYear = <span class=\"function\">(<span class=\"params\">books, year</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> selected = filter(<span class=\"function\"><span class=\"params\">book</span> =&gt;</span> publishedInYear(book, year), books)</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">return</span> map(<span class=\"function\"><span class=\"params\">book</span> =&gt;</span> book.title, selected)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果能将 <code>filter</code> 和 <code>map</code> 组合成 &quot;pipeline&quot; 就好了，但我们并不知道该如何处理，因为 <code>filter</code> 和 <code>map</code> 都是二元函数。</p>\n<p>如果不需要在 <code>filter</code> 中使用箭头函数会更好些。先来解决这个问题，并借此展示一些制作 &quot;pipeline&quot; 的知识。</p>\n<p><strong>高阶函数</strong></p>\n<p>在本系列文章的<a href=\"https://adispring.coding.me/2017/06/09/Thinking-in-Ramda-%E5%85%A5%E9%97%A8/\" target=\"_blank\" rel=\"external\">第一篇</a>中，我们将函数视为 &quot;一等结构&quot;。一等函数可以作为参数传递给其他函数，也可以作为其他函数的返回值。我们一直在使用前者，但还没有见过后者（函数作为其他函数的返回值）。</p>\n<p>获取或返回其他函数的函数称为 &quot;高阶函数&quot;。</p>\n<p>在上面的示例中，我们传递了一个箭头函数给 <code>filter</code>：<code>book =&gt; publishedInYear(book, year)</code>，但我们想去掉箭头函数。为了做到这点，需要一个函数：输入一本书，若该书是在指定年份出版的则返回 <code>true</code>。但还需要一个指定的年份，让该操作更加灵活。</p>\n<p>为了解决这个问题，可以将 <code>publishedInYear</code> 变为返回另一个函数的函数。我将使用普通的语法来实现该函数，以便能够清晰地展示其内部具体实现，然后使用箭头函数实现一个更短版本的函数：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Full function version:</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">publishedInYear</span>(<span class=\"params\">year</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">book</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> book.year === year</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// Arrow function version:</span></div><div class=\"line\"><span class=\"keyword\">const</span> publishedInYear = <span class=\"function\"><span class=\"params\">year</span> =&gt;</span> book =&gt; book.year === year</div></pre></td></tr></table></figure></p>\n<p>利用新实现的 <code>publishedInYear</code>，可以重写 <code>filter</code> 调用，从而消除箭头函数：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> publishedInYear = <span class=\"function\"><span class=\"params\">year</span> =&gt;</span> book =&gt; book.year === year</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> titlesForYear = <span class=\"function\">(<span class=\"params\">books, year</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> selected = filter(publishedInYear(year), books)</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">return</span> map(<span class=\"function\"><span class=\"params\">book</span> =&gt;</span> book.title, selected)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在，当调用 <code>filter</code> 时，<code>publishedInYear(year)</code> 会立即调用，并返回一个接受 <code>book</code> 为参数的函数，这正是 <code>filter</code> 需要的。</p>\n<p><strong>部分应用函数</strong></p>\n<p>可以按上面的方式重写任何多参数函数。但我们不可能拥有所有我们想要的函数的源码；另外，很多情况下，我们可能还是希望以普通的方式调用多参数函数。</p>\n<p>例如，在其他一些代码中，只是想检查一本书是否是在指定年份出版的，我们可能想要 <code>publishedInYear(book, 2012)</code>，但现在不能再那么做了。相反，我们必须要用这种方式：<code>publishedInYear(book)(2012)</code>。这样做降低了代码的可读性，也很烦人。</p>\n<p>幸运的是，Ramda 提供了两个函数：<code>partial</code> 和 <code>partialRight</code>，来帮我们解决这个问题。</p>\n<p>这两个函数可以让我们不必一次传递所有需要的参数，也可以调用函数。它们都返回一个接受剩余参数的新函数，当所有参数都传入后，才会真正调用被包裹的原函数。</p>\n<p><code>partial</code> 和 <code>partialRight</code> 的区别在于参数传递的顺序：<code>partial</code> 先传递原函数左侧的参数，而 <code>partialRight</code> 先传递右侧的参数。</p>\n<p>回到刚开始的例子，使用上面的一个函数来代替原来对 <code>publishedInYear</code> 的重写。由于刚开始我们只需要最右侧的参数：<code>year</code>，所以需要使用 <code>partialRight</code>.</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> publishedInYear = <span class=\"function\">(<span class=\"params\">book, year</span>) =&gt;</span> book.year === year</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> titlesForYear = <span class=\"function\">(<span class=\"params\">books, year</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> selected = filter(partialRight(publishedInYear, [year]), books)</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">return</span> map(<span class=\"function\"><span class=\"params\">book</span> =&gt;</span> book.title, selected)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果 <code>pubilshedInYear</code> 原本参数的顺序为 <code>(year, book)</code> ，而非 <code>(book, year)</code> ，则需要用 <code>partial</code> 代替 <code>partialRight</code>。</p>\n<p>注意，为被 <code>partial</code> 和 <code>partialRight</code> 包裹的函数提供的参数必须包裹在数组中，即使只有一个参数。我不会告诉你我已经忘记了多少次，导致出现令人困惑的错误信息：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">First argument to _arity must be a non-negative <span class=\"built_in\">integer</span> no greater than ten</div></pre></td></tr></table></figure></p>\n<p><strong>柯里化(Curry)</strong></p>\n<p>如果到处使用 <code>partial</code> 和 <code>partialRight</code> 的话，会让代码变得冗长乏味；但是，将多元函数以一系列一元函数的形式调用同样不好。</p>\n<p>幸运的是，Ramda 给我们提供了一个解决方案：<code>curry</code>。</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Currying\" target=\"_blank\" rel=\"external\">Currying（柯里化）</a> 是函数式编程的另一个核心概念。从技术角度讲，一个柯里化了的函数是一系列高阶一元函数，这也是我刚刚抱怨过的。在纯函数式语言中，柯里化函数在调用时，语法上看起来和调用多个参数没有什么区别。</p>\n<p>但由于 Ramda 是一个 JavaScript 库，而 JavaScript 并没有很好的语法来支持一系列一元函数的调用，所以作者对传统柯里化的定义放宽了一些。</p>\n<p>在 Ramda 中，一个柯里化的函数只能用其参数的子集来调用，它会返回一个接受其余参数的新函数。当使用它的所有参数调用，真正的原函数将被调用。</p>\n<p>柯里化的函数在下列两种情况下工作的都很好：</p>\n<ol>\n<li>可以按正常情况下使用所有参数调用它，它可以像普通函数一样正常工作；</li>\n<li>也可以使用部分参数来调用它，这时它会像使用 <code>partial</code> 一样工作。</li>\n</ol>\n<p>注意，这种灵活性带来了一些性能上的损失，因为 <code>curry</code> 需要搞清楚函数的调用方式，然后确定该做什么。一般来说，我只有需要在多个地方对同一个函数使用 <code>partial</code> 的时候，才会对函数进行柯里化。</p>\n<p>接下来写一个柯里化版本的 <code>publishedInYear</code> 函数。注意，<code>curry</code> 会像 <code>partial</code> 一样工作；并且没有 <code>partialRight</code> 版本的 <code>curry</code> 函数。对这方面后续会有更多讨论，但现在我们需要将 <code>publishedInYear</code> 的参数翻转一下，以便让参数 <code>year</code> 在最前面。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> publishedInYear = curry(<span class=\"function\">(<span class=\"params\">year, book</span>) =&gt;</span> book.year === year)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> titlesForYear = <span class=\"function\">(<span class=\"params\">books, year</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> selected = filter(publishedInYear(year), books)</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">return</span> map(<span class=\"function\"><span class=\"params\">book</span> =&gt;</span> book.title, selected)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在可以只使用参数 <code>year</code> 来调用 <code>publishedInYear</code>，并返回一个新函数，该函数接受参数 <code>book</code> 并执行原函数。但是，仍然可以按普通方式对它调用：<code>publishedInYear(2012, book)</code>，不需要写烦人的语法 <code>)(</code>。所以，柯里化的函数在两种情况下都能很好地工作。</p>\n<p><strong>参数的顺序</strong></p>\n<p>注意，为了让 <code>curry</code> 工作，我们不得不对参数的顺序进行翻转。这在函数式编程中非常常见，所以几乎所有的 Ramda 函数都将待处理的数据放到参数列表的最后面。</p>\n<p>你可以将先期传入的参数看作对操作的配置。所以，对于 <code>publishedInYear</code>，参数 <code>year</code> 作为配置（需要查找的年份），而参数 <code>book</code> 作为被处理的数据（被查找的对象）。</p>\n<p>我们已经在集合迭代函数中见过这样的例子。它们都将集合作为最后一个参数，这样可以使这种风格的编程更容易些。</p>\n<p><strong>顺序错误的参数</strong></p>\n<p>如果不改变 <code>publishedInYear</code> 的顺序，还可以继续使用柯里化特性的优势吗？</p>\n<p>当然可以了，Ramda 提供了几个选择。</p>\n<p><strong>flip</strong></p>\n<p>第一个选择是 <code>flip</code>。<code>flip</code> 接受一个多元函数（元数 &gt;= 2），返回一个元数相同的新函数，但前 2 个参数的顺序调换了。它主要用于二元函数，但也可以用于一般函数。</p>\n<p>使用 <code>flip</code>，我们可以恢复 <code>publishedInYear</code> 参数的初始的顺序：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> publishedInYear = curry(<span class=\"function\">(<span class=\"params\">book, year</span>) =&gt;</span> book.year === year)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> titlesForYear = <span class=\"function\">(<span class=\"params\">books, year</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> selected = filter(flip(publishedInYear)(year), books)</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">return</span> map(<span class=\"function\"><span class=\"params\">book</span> =&gt;</span> book.title, selected)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>多数情况下，我更喜欢使用方便的参数顺序，但如果用到不能自己掌控的函数，<code>flip</code> 是一个好的选择。</p>\n<p><strong>placeholder (占位符)</strong></p>\n<p>更通用的选择是使用 &quot;placeholder&quot; 参数（<code>__</code>）</p>\n<p>假设有一个三元柯里化的函数，并且我们想传入第一个和最后一个参数，中间参数后续再传，应该怎么办呢？我们可以使用 &quot;占位符&quot; 作为中间参数：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> threeArgs = curry(<span class=\"function\">(<span class=\"params\">a, b, c</span>) =&gt;</span> &#123; <span class=\"comment\">/* ... */</span> &#125;)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> middleArgumentLater = threeArgs(<span class=\"string\">'value for a'</span>, __, <span class=\"string\">'value for c'</span>)</div></pre></td></tr></table></figure></p>\n<p>可以在函数调用中多次使用 &quot;占位符&quot;。例如，如果只想传递中间参数呢？</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> threeArgs = curry(<span class=\"function\">(<span class=\"params\">a, b, c</span>) =&gt;</span> &#123; <span class=\"comment\">/* ... */</span> &#125;)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> middleArgumentOnly = threeArgs(__, <span class=\"string\">'value for b'</span>, __)</div></pre></td></tr></table></figure></p>\n<p>也可以使用 &quot;占位符&quot; 代替 <code>flip</code>：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> publishedInYear = curry(<span class=\"function\">(<span class=\"params\">book, year</span>) =&gt;</span> book.year === year)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> titlesForYear = <span class=\"function\">(<span class=\"params\">books, year</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> selected = filter(publishedInYear(__, year), books)</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">return</span> map(<span class=\"function\"><span class=\"params\">book</span> =&gt;</span> book.title, selected)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我觉得这个版本的可读性更好，但如果需要频繁使用参数顺序翻转的 <code>publishedInYear</code>，我可能会使用 <code>flip</code> 定义一个辅助函数，然后在任何用到它的地方使用辅助函数。在后续文章中会看到一些示例。</p>\n<p>注意， <code>__</code> 仅适用于柯里化的函数，而 <code>partial</code>、<code>partialRight</code> 和 <code>flip</code> 适用于任何函数。如果需要对某个普通函数使用 <code>__</code>，可以先用 <code>curry</code> 将其包裹起来。</p>\n<p><strong>来做一条管道（pipeline）</strong></p>\n<p>现在看看能否将我们的 <code>filter</code> 和 <code>map</code> 调用放入 &quot;pipeline&quot; (管道)中？下面是代码当前的状态，使用了方便的参数顺序的 <code>publishedInYear</code>：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> publishedInYear = curry(<span class=\"function\">(<span class=\"params\">year, book</span>) =&gt;</span> book.year === year)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> titlesForYear = <span class=\"function\">(<span class=\"params\">books, year</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> selected = filter(publishedInYear(year), books)</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">return</span> map(<span class=\"function\"><span class=\"params\">book</span> =&gt;</span> book.title, selected)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在上一节中，我们了解了 <code>pipe</code> 和 <code>compose</code>，但我们还需要另一部分信息，以便能够使用上面所学的知识。</p>\n<p>缺少的信息是：几乎所有的 Ramda 函数都是默认柯里化的，包括 <code>filter</code> 和 <code>map</code>。所以 <code>filter(publishedInYear(year))</code> 是完全合法的，它会返回一个新函数，该函数等待我们传递 <code>books</code> 给它，<code>map(book =&gt; book.title)</code> 也是如此。</p>\n<p>现在可以编写 &quot;pipeline&quot; 了：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> publishedInYear = curry(<span class=\"function\">(<span class=\"params\">year, book</span>) =&gt;</span> book.year === year)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> titlesForYear = <span class=\"function\">(<span class=\"params\">books, year</span>) =&gt;</span></div><div class=\"line\">  pipe(</div><div class=\"line\">    filter(publishedInYear(year)),</div><div class=\"line\">    map(<span class=\"function\"><span class=\"params\">book</span> =&gt;</span> book.title)</div><div class=\"line\">  )(books)</div></pre></td></tr></table></figure></p>\n<p>我们来更进一步，将 <code>titlesForYear</code> 的参数顺序也调换一下，这样更符合 Ramda 中待处理数据放在最后的约定。也可以将该函数进行柯里化，以便其在后续的 &quot;pipeline&quot; 中使用。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> publishedInYear = curry(<span class=\"function\">(<span class=\"params\">year, book</span>) =&gt;</span> book.year === year)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> titlesForYear = curry(<span class=\"function\">(<span class=\"params\">year, books</span>) =&gt;</span></div><div class=\"line\">  pipe(</div><div class=\"line\">    filter(publishedInYear(year)),</div><div class=\"line\">    map(<span class=\"function\"><span class=\"params\">book</span> =&gt;</span> book.title)</div><div class=\"line\">  )(books)</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p><strong>结论</strong></p>\n<p>本文可能是这个系列中讲解最深的一篇。部分应用和柯里化可能需要花一些时间和精力来熟悉和掌握。但一旦学会，他们会以一种强大的方式将数据处理变得更加函数式。</p>\n<p>它们引导你通过创建包含许多小而简单代码块的 &quot;pipeline&quot; 的方式，来构建数据处理程序。</p>\n<p><strong>下一节</strong></p>\n<p>为了以函数式的方式编写代码，我们需要用 &quot;声明式&quot; 的思维代替 &quot;命令式&quot; 思维。要做到这点，需要找到一种函数式的方式来表示命令式的结构。<a href=\"https://adispring.coding.me/2017/06/11/Thinking-in-Ramda-Declarative-Programming/\" target=\"_blank\" rel=\"external\">声明式编程</a> 将会讨论这些想法。</p>\n"},{"title":"Thinking in Ramda: 声明式编程","date":"2017-06-11T12:27:38.000Z","_content":"\n译者注：本文翻译自 Randy Coulman 的 《[Thinking in Ramda: Declarative Programming](http://randycoulman.com/blog/2016/06/14/thinking-in-ramda-declarative-programming/)》，转载请与[原作者](https://github.com/randycoulman)或[本人](https://github.com/adispring)联系。下面开始正文。\n\n---\n\n本文是函数式编程系列文章：[Thinking in Ramda](https://adispring.coding.me/categories/Thinking-in-Ramda/) 的第四篇。\n\n在[第三节](https://adispring.coding.me/2017/06/11/Thinking-in-Ramda-Partial-Application/)中，讨论了使用 \"部分应用\" 和 \"柯里化\" 技术来组合多元（多参数）函数。\n\n当我们开始编写小的函数式构建块并组合它们时，发现必须写好多函数来包裹 JavaScript 操作符，比如算术、比较、逻辑操作符和控制流。这可能比较乏味，但 Ramda 将我们拉了回来，让事情变得有趣起来。\n\n开始之前，先介绍一些背景知识。\n\n**命令式 vs 声明式**\n\n存在很多编程语言分类的方式，如静态语言和动态语言，解释型语言和编译型语言，底层和高层语言等等。\n\n另一种划分的方式是命令式编程和声明式编程。\n\n简单地说，命令式编程中，程序员需要告诉计算机怎么做来完成任务。命令式编程带给我们每天会用到的大量的基本结构：控制流（`if`-`then`-`else` 语句和循环），算术运算符（`+`、`-`、`*`、`/`），比较运算符（`===`、`>`、`<` 等），和逻辑运算符（`&&`、`||`、`!`）。\n\n而声明式编程，程序员只需告诉计算机我想要什么，然后计算机自己理清如何产生结果。\n\n其中一种经典的声明式编程语言是 Prolog。在 Prolog 中，程序是由一组 \"facts\" (谓词) 和 一组 \"rules\" (规则) 组成。可以通过提问来启动程序。Prolog 的推理机使用 facts 和 rules 来回答问题。\n\n函数式编程被认为是声明式编程的一个子集。在一段函数式程序中，我们定义函数，然后通过组合这些函数告诉计算机做什么。\n\n即使在声明式程序中，也需要做一些命令式程序中的工作。控制流，算术、比较和逻辑操作仍然是必须使用的基本构建块。但我们需要找到一种声明式的方式来描述这些基本构建块。\n\n**声明式替换**\n\n由于我们使用 JavaScript （一种命令式语言）编程，所以在编写 \"普通\" JavaScript 代码时，使用标准的命令式结构也是正常的。\n\n但当使用 \"pipeline\" 或类似的结构编写函数式变换时，命令式的结构并不能很好的工作。\n\n**算术**\n\n在 [第二节](https://adispring.coding.me/2017/06/10/Thinking-in-Ramda-Combining-Functions/) ，我们实现了一系列算术变换来演示 \"pipeline\"：\n\n```js\nconst multiply = (a, b) => a * b\nconst addOne = x => x + 1\nconst square = x => x * x\n \nconst operate = pipe(\n  multiply,\n  addOne,\n  square\n)\n \noperate(3, 4) // => ((3 * 4) + 1)^2 => (12 + 1)^2 => 13^2 => 169\n```\n注意我们是如何编写函数来实现我们想要的基本构建块的。\n\nRamda 提供了 `add`、`subtract`、`multiply` 和 `divide` 函数来替代标准的算术运算符。所以我们可以使用 Ramda 的 `multiply` 来代替我们自己实现的乘法，可以利用 Ramda 的柯里化 `add` 函数的优势来取代我们的 `addOne`，也可以利用 `multiply` 来编写 `square`：\n\n```js\nconst square = x => multiply(x, x)\n \nconst operate = pipe(\n  multiply,\n  add(1),\n  square\n)\n```\n\n`add(1)` 与增量运算符（`++`）非常相似，但 `++` 修改了被操作的值，因此它是 \"mutation\" 的。正如在 [第一节](https://adispring.coding.me/2017/06/09/Thinking-in-Ramda-%E5%85%A5%E9%97%A8/) 中所讲，Immutability 是函数式编程的核心原则，所以我们不想使用 `++` 或 `--`。\n\n可以使用 `add(1)` 和 `subtract(1)` 来做递增和递减操作，但由于这两个操作非常常用，所以 Ramda 专门提供了 `inc` 和 `dec`。\n\n所以可以进一步简化我们的 \"pipeline\"：\n\n```js\nconst square = x => multiply(x, x)\n \nconst operate = pipe(\n  multiply,\n  inc,\n  square\n)\n```\n\n`subtract` 是二元操作符 `-` 的替代，但还有一个表示取反的一元操作符 `-`。我们可以使用 `multiply(-1)`，但 Ramda 也提供了 `negate` 来实现相同的功能。\n\n**Comparison (比较)**\n\n还是在 [第二节](https://adispring.coding.me/2017/06/10/Thinking-in-Ramda-Combining-Functions/)，我们写了一些函数来确定一个人是否有资格投票。该代码的最终版本如下所示：\n\n```js\nconst wasBornInCountry = person => person.birthCountry === OUR_COUNTRY\nconst wasNaturalized = person => Boolean(person.naturalizationDate)\nconst isOver18 = person => person.age >= 18\n \nconst isCitizen = either(wasBornInCountry, wasNaturalized)\n \nconst isEligibleToVote = both(isOver18, isCitizen)\n```\n\n注意，上面的一些函数使用了标准比较运算符（`===` 和 `>=`）。正如你现在所怀疑的，Ramda 也提供了这些运算符的替代。\n\n我们来修改一下代码：使用 `equals` 代替 `===`，使用 `gte` 替代 `>=`。\n\n```js\nconst wasBornInCountry = person => equals(person.birthCountry, OUR_COUNTRY)\nconst wasNaturalized = person => Boolean(person.naturalizationDate)\nconst isOver18 = person => gte(person.age, 18)\n \nconst isCitizen = either(wasBornInCountry, wasNaturalized)\n \nconst isEligibleToVote = both(isOver18, isCitizen)\n```\n\nRamda 还提供了其他比较运算符的替代：`gt` 对应 `>`，`lt` 对应 `<`，`lte` 对应 `<=`。\n\n注意，这些函数保持正常的参数顺序（`gt` 表示第一个参数是否大于第二个参数）。这在单独使用时没有问题，但在组合函数时，可能会让人产生困惑。这些函数似乎违反了 Ramda 的 \"待处理数据放在最后\" 的原则，所以我们在 pipeline 或类似的情况下使用它们时，要格外小心。这时，`flip` 和 占位符 (`__`) 就派上了用场。\n\n除了 `equals`，还有一个 `identical`，可以用来判断两个值是否引用了同一块内存。\n\n`===` 还有一些其他的用途：可以检测字符串或数组是否为空（`str === ''` 或 `arr.length === 0`），也可以检查变量是否为 `null` 或 `undefined`。Ramda 为这两种情况提供了方便的判断函数：`isEmpty` 和 `isNil`。\n\n**Logic (逻辑)**\n\n在 [第二节](https://adispring.coding.me/2017/06/10/Thinking-in-Ramda-Combining-Functions/) 中（参见上面的相关代码）。我们使用 `both` 和 `either` 来代替 `&&` 和 `||` 运算符。我们还提到使用 `complement` 代替 `!`。\n\n当组合的函数作用于同一份输入值时，这些组合函数帮助很大。上述示例中，`wasBornInCountry`、`wasNaturalized` 和 `isOver18` 都作用于同一个人上。\n\n但有时我们需要将 `&&`、`||` 和 `!` 作用于不同的数值。对于这些情况， Ramda 提供了 `and`、`or` 和 `not` 函数。我以下列方式进行分类：`and`、`or` 和 `not` 用于处理数值；`both`、`either` 和 `complement` 用于处理函数。\n\n经常用 `||` 来提供默认值。例如，我们可能会编写如下代码：\n\n```js\nconst lineWidth = settings.lineWidth || 80\n```\n\n这是一个常见的用法，大部分情况下都能正常工作，但依赖于 JavaScript 对 \"falsy\" 值的定义。假设 `0` 是一个合法的设置选项呢？由于 `0` 是 \"falsy\" 值，所以我们最终会得到的行宽为 80 。\n\n我们可以使用上面刚学到的 `isNil` 函数，但 Ramda 提供了一个更好的选择：`defaultTo`。\n\n```js\nconst lineWidth = defaultTo(80, settings.lineWidth)\n```\n\n`defaultTo` 检查第二个参数是否为空（`isNil`）。如果非空，则返回该值；否则返回第一个值。\n\n**Conditionals (条件)**\n\n控制流在函数式编程中不是必要的，但偶尔也会有些用处。在 [第一节](https://adispring.coding.me/2017/06/09/Thinking-in-Ramda-%E5%85%A5%E9%97%A8/) 中讨论的集合迭代函数在大部分情况下都可以很好的取代循环，但 \"条件\" 仍然非常重要。\n\n**ifElse**\n\n我们来写一个函数，`forever21`，接受一个年龄，并返回下一个年龄。但正如名字所示，一旦成长到 21 岁，就一直保持这样。\n\n```js\nconst forever21 = age => age >= 21 ? 21 : age + 1\n```\n\n注意，条件（`age >= 21`）和第二个分支（`age + 1`）都可以写作 `age` 的函数。第一个分支（`21`）也可以重写成一个常量函数（`() => 21`）。现在我们有三个接受（或忽略）`age` 为参数的函数。\n\n现在可以使用 Ramda 的 `ifElse` 函数了，这是一个相当于 `if...then...else` 或 `?:` 的函数。\n\n```js\nconst forever21 = age => ifElse(gte(__, 21), () => 21, inc)(age)\n```\n\n如上所示，比较函数在进行组合时，可能并不是以我们想要的形式进行工作。所以在这里被迫引入了占位符（`__`）。我们也可以使用 `lte`：\n\n```js\nconst forever21 = age => ifElse(lte(21), () => 21, inc)(age)\n```\n\n在这种情况下，我们不得不读作：\"21岁小于或等于给定年龄\"。但这样可读性很低、比较乱，所以我坚持使用占位符版本的函数。\n\n**constants (常量)**\n\n常量函数在这种情形下非常有用。你可能已经想到了，Ramda 为我们提供了一些便捷的方法。本例中，这个方法是 `always`。\n\n```js\nconst forever21 = age => ifElse(gte(__, 21), always(21), inc)(age)\n```\n\nRamda 还提供了 `T` 和 `F`，作为 `always(true) 和 always(false)` 的缩写。\n\n**identity (恒等)**\n\n再来写一个函数：`alwaysDrivingAge`。该函数接受一个年龄，如果 `gte` 16，则将该年龄返回；但如果小于 16，则返回 16。这样任何人都可以伪造他们的驾驶年龄了，即使他们还没有达到。\n\n```js\nconst alwaysDrivingAge = age => ifElse(lt(__, 16), always(16), a => a)(age)\n```\n\n条件中的第二个分支（`a => a`）是函数式编程中的另一种常见的模式。它被称为恒等函数。也即，输出永远等于输入的函数。\n\n正如你所想的，Ramda 为我们提供了 `identity` 函数。\n\n```js\nconst alwaysDrivingAge = age => ifElse(lt(__, 16), always(16), identity)(age)\n```\n\n`identity` 可以接受多个参数，但总是返回首个参数。如果想要返回除首个参数之外的参数，可以使用更通用的 `nthArg` 函数。但 `nthArg` 不如 `identity` 用的频繁。\n\n**when 和 unless**\n\n在 `ifElse` 代码中，其中一个条件分支为 `identity` 也很常见。所以 Ramda 也提供了便捷的方法。\n\n如果像上例所示，第二个分支是 `identity`，可以用 `when` 代替 `ifElse`：\n\n```js\nconst alwaysDrivingAge = age => when(lt(__, 16), always(16))(age)\n```\n\n如果第一个条件分支是 `identity`，可以用 `unless`。借助 `gte(__, 16)` 来翻转一下我们的条件，便可以使用 `unless` 了。\n\n```js\nconst alwaysDrivingAge = age => unless(gte(__, 16), always(16))(age)\n```\n\n**cond**\n\nRamda 还提供了 `cond` 函数，来代替 `switch` 语句或链式的 `if...then...else` 语句。\n\n这里采用 Ramda 文档中的例子来展示 `cond` 的用法：\n\n```js\nconst water = temperature => cond([\n  [equals(0),   always('water freezes at 0°C')],\n  [equals(100), always('water boils at 100°C')],\n  [T,           temp => `nothing special happens at ${temp}°C`]\n])(temperature)\n```\n\n我目前还不需要在 Ramda 代码中使用 `cond`。但我很多年前编写过 Common Lisp 代码，所以 `cond` 函数感觉就像是位老朋友。\n\n**结论**\n\n本节中展示了很多将命令式代码转为函数声明式代码的 Ramda 函数。\n\n**下一节**\n\n你可能已经注意到了，最后我们编写的几个函数（`forever21`、`alwaysDrivingAge` 和 `water`）都接受一个参数，构建一个新函数，然后将该函数作用于参数。\n\n这也是一种常见的模式，并且 Ramda 照例提供了一些简化这些代码的便捷方法。下一节中，[Pointfree Style](https://adispring.coding.me/2017/06/13/Thinking-in-Ramda-Pointfree-Style/) 将演示如何简化符合这种模式的代码。\n","source":"_posts/Thinking-in-Ramda-Declarative-Programming.md","raw":"---\ntitle: 'Thinking in Ramda: 声明式编程'\ndate: 2017-06-11 20:27:38\ncategories: 'Thinking in Ramda'\n---\n\n译者注：本文翻译自 Randy Coulman 的 《[Thinking in Ramda: Declarative Programming](http://randycoulman.com/blog/2016/06/14/thinking-in-ramda-declarative-programming/)》，转载请与[原作者](https://github.com/randycoulman)或[本人](https://github.com/adispring)联系。下面开始正文。\n\n---\n\n本文是函数式编程系列文章：[Thinking in Ramda](https://adispring.coding.me/categories/Thinking-in-Ramda/) 的第四篇。\n\n在[第三节](https://adispring.coding.me/2017/06/11/Thinking-in-Ramda-Partial-Application/)中，讨论了使用 \"部分应用\" 和 \"柯里化\" 技术来组合多元（多参数）函数。\n\n当我们开始编写小的函数式构建块并组合它们时，发现必须写好多函数来包裹 JavaScript 操作符，比如算术、比较、逻辑操作符和控制流。这可能比较乏味，但 Ramda 将我们拉了回来，让事情变得有趣起来。\n\n开始之前，先介绍一些背景知识。\n\n**命令式 vs 声明式**\n\n存在很多编程语言分类的方式，如静态语言和动态语言，解释型语言和编译型语言，底层和高层语言等等。\n\n另一种划分的方式是命令式编程和声明式编程。\n\n简单地说，命令式编程中，程序员需要告诉计算机怎么做来完成任务。命令式编程带给我们每天会用到的大量的基本结构：控制流（`if`-`then`-`else` 语句和循环），算术运算符（`+`、`-`、`*`、`/`），比较运算符（`===`、`>`、`<` 等），和逻辑运算符（`&&`、`||`、`!`）。\n\n而声明式编程，程序员只需告诉计算机我想要什么，然后计算机自己理清如何产生结果。\n\n其中一种经典的声明式编程语言是 Prolog。在 Prolog 中，程序是由一组 \"facts\" (谓词) 和 一组 \"rules\" (规则) 组成。可以通过提问来启动程序。Prolog 的推理机使用 facts 和 rules 来回答问题。\n\n函数式编程被认为是声明式编程的一个子集。在一段函数式程序中，我们定义函数，然后通过组合这些函数告诉计算机做什么。\n\n即使在声明式程序中，也需要做一些命令式程序中的工作。控制流，算术、比较和逻辑操作仍然是必须使用的基本构建块。但我们需要找到一种声明式的方式来描述这些基本构建块。\n\n**声明式替换**\n\n由于我们使用 JavaScript （一种命令式语言）编程，所以在编写 \"普通\" JavaScript 代码时，使用标准的命令式结构也是正常的。\n\n但当使用 \"pipeline\" 或类似的结构编写函数式变换时，命令式的结构并不能很好的工作。\n\n**算术**\n\n在 [第二节](https://adispring.coding.me/2017/06/10/Thinking-in-Ramda-Combining-Functions/) ，我们实现了一系列算术变换来演示 \"pipeline\"：\n\n```js\nconst multiply = (a, b) => a * b\nconst addOne = x => x + 1\nconst square = x => x * x\n \nconst operate = pipe(\n  multiply,\n  addOne,\n  square\n)\n \noperate(3, 4) // => ((3 * 4) + 1)^2 => (12 + 1)^2 => 13^2 => 169\n```\n注意我们是如何编写函数来实现我们想要的基本构建块的。\n\nRamda 提供了 `add`、`subtract`、`multiply` 和 `divide` 函数来替代标准的算术运算符。所以我们可以使用 Ramda 的 `multiply` 来代替我们自己实现的乘法，可以利用 Ramda 的柯里化 `add` 函数的优势来取代我们的 `addOne`，也可以利用 `multiply` 来编写 `square`：\n\n```js\nconst square = x => multiply(x, x)\n \nconst operate = pipe(\n  multiply,\n  add(1),\n  square\n)\n```\n\n`add(1)` 与增量运算符（`++`）非常相似，但 `++` 修改了被操作的值，因此它是 \"mutation\" 的。正如在 [第一节](https://adispring.coding.me/2017/06/09/Thinking-in-Ramda-%E5%85%A5%E9%97%A8/) 中所讲，Immutability 是函数式编程的核心原则，所以我们不想使用 `++` 或 `--`。\n\n可以使用 `add(1)` 和 `subtract(1)` 来做递增和递减操作，但由于这两个操作非常常用，所以 Ramda 专门提供了 `inc` 和 `dec`。\n\n所以可以进一步简化我们的 \"pipeline\"：\n\n```js\nconst square = x => multiply(x, x)\n \nconst operate = pipe(\n  multiply,\n  inc,\n  square\n)\n```\n\n`subtract` 是二元操作符 `-` 的替代，但还有一个表示取反的一元操作符 `-`。我们可以使用 `multiply(-1)`，但 Ramda 也提供了 `negate` 来实现相同的功能。\n\n**Comparison (比较)**\n\n还是在 [第二节](https://adispring.coding.me/2017/06/10/Thinking-in-Ramda-Combining-Functions/)，我们写了一些函数来确定一个人是否有资格投票。该代码的最终版本如下所示：\n\n```js\nconst wasBornInCountry = person => person.birthCountry === OUR_COUNTRY\nconst wasNaturalized = person => Boolean(person.naturalizationDate)\nconst isOver18 = person => person.age >= 18\n \nconst isCitizen = either(wasBornInCountry, wasNaturalized)\n \nconst isEligibleToVote = both(isOver18, isCitizen)\n```\n\n注意，上面的一些函数使用了标准比较运算符（`===` 和 `>=`）。正如你现在所怀疑的，Ramda 也提供了这些运算符的替代。\n\n我们来修改一下代码：使用 `equals` 代替 `===`，使用 `gte` 替代 `>=`。\n\n```js\nconst wasBornInCountry = person => equals(person.birthCountry, OUR_COUNTRY)\nconst wasNaturalized = person => Boolean(person.naturalizationDate)\nconst isOver18 = person => gte(person.age, 18)\n \nconst isCitizen = either(wasBornInCountry, wasNaturalized)\n \nconst isEligibleToVote = both(isOver18, isCitizen)\n```\n\nRamda 还提供了其他比较运算符的替代：`gt` 对应 `>`，`lt` 对应 `<`，`lte` 对应 `<=`。\n\n注意，这些函数保持正常的参数顺序（`gt` 表示第一个参数是否大于第二个参数）。这在单独使用时没有问题，但在组合函数时，可能会让人产生困惑。这些函数似乎违反了 Ramda 的 \"待处理数据放在最后\" 的原则，所以我们在 pipeline 或类似的情况下使用它们时，要格外小心。这时，`flip` 和 占位符 (`__`) 就派上了用场。\n\n除了 `equals`，还有一个 `identical`，可以用来判断两个值是否引用了同一块内存。\n\n`===` 还有一些其他的用途：可以检测字符串或数组是否为空（`str === ''` 或 `arr.length === 0`），也可以检查变量是否为 `null` 或 `undefined`。Ramda 为这两种情况提供了方便的判断函数：`isEmpty` 和 `isNil`。\n\n**Logic (逻辑)**\n\n在 [第二节](https://adispring.coding.me/2017/06/10/Thinking-in-Ramda-Combining-Functions/) 中（参见上面的相关代码）。我们使用 `both` 和 `either` 来代替 `&&` 和 `||` 运算符。我们还提到使用 `complement` 代替 `!`。\n\n当组合的函数作用于同一份输入值时，这些组合函数帮助很大。上述示例中，`wasBornInCountry`、`wasNaturalized` 和 `isOver18` 都作用于同一个人上。\n\n但有时我们需要将 `&&`、`||` 和 `!` 作用于不同的数值。对于这些情况， Ramda 提供了 `and`、`or` 和 `not` 函数。我以下列方式进行分类：`and`、`or` 和 `not` 用于处理数值；`both`、`either` 和 `complement` 用于处理函数。\n\n经常用 `||` 来提供默认值。例如，我们可能会编写如下代码：\n\n```js\nconst lineWidth = settings.lineWidth || 80\n```\n\n这是一个常见的用法，大部分情况下都能正常工作，但依赖于 JavaScript 对 \"falsy\" 值的定义。假设 `0` 是一个合法的设置选项呢？由于 `0` 是 \"falsy\" 值，所以我们最终会得到的行宽为 80 。\n\n我们可以使用上面刚学到的 `isNil` 函数，但 Ramda 提供了一个更好的选择：`defaultTo`。\n\n```js\nconst lineWidth = defaultTo(80, settings.lineWidth)\n```\n\n`defaultTo` 检查第二个参数是否为空（`isNil`）。如果非空，则返回该值；否则返回第一个值。\n\n**Conditionals (条件)**\n\n控制流在函数式编程中不是必要的，但偶尔也会有些用处。在 [第一节](https://adispring.coding.me/2017/06/09/Thinking-in-Ramda-%E5%85%A5%E9%97%A8/) 中讨论的集合迭代函数在大部分情况下都可以很好的取代循环，但 \"条件\" 仍然非常重要。\n\n**ifElse**\n\n我们来写一个函数，`forever21`，接受一个年龄，并返回下一个年龄。但正如名字所示，一旦成长到 21 岁，就一直保持这样。\n\n```js\nconst forever21 = age => age >= 21 ? 21 : age + 1\n```\n\n注意，条件（`age >= 21`）和第二个分支（`age + 1`）都可以写作 `age` 的函数。第一个分支（`21`）也可以重写成一个常量函数（`() => 21`）。现在我们有三个接受（或忽略）`age` 为参数的函数。\n\n现在可以使用 Ramda 的 `ifElse` 函数了，这是一个相当于 `if...then...else` 或 `?:` 的函数。\n\n```js\nconst forever21 = age => ifElse(gte(__, 21), () => 21, inc)(age)\n```\n\n如上所示，比较函数在进行组合时，可能并不是以我们想要的形式进行工作。所以在这里被迫引入了占位符（`__`）。我们也可以使用 `lte`：\n\n```js\nconst forever21 = age => ifElse(lte(21), () => 21, inc)(age)\n```\n\n在这种情况下，我们不得不读作：\"21岁小于或等于给定年龄\"。但这样可读性很低、比较乱，所以我坚持使用占位符版本的函数。\n\n**constants (常量)**\n\n常量函数在这种情形下非常有用。你可能已经想到了，Ramda 为我们提供了一些便捷的方法。本例中，这个方法是 `always`。\n\n```js\nconst forever21 = age => ifElse(gte(__, 21), always(21), inc)(age)\n```\n\nRamda 还提供了 `T` 和 `F`，作为 `always(true) 和 always(false)` 的缩写。\n\n**identity (恒等)**\n\n再来写一个函数：`alwaysDrivingAge`。该函数接受一个年龄，如果 `gte` 16，则将该年龄返回；但如果小于 16，则返回 16。这样任何人都可以伪造他们的驾驶年龄了，即使他们还没有达到。\n\n```js\nconst alwaysDrivingAge = age => ifElse(lt(__, 16), always(16), a => a)(age)\n```\n\n条件中的第二个分支（`a => a`）是函数式编程中的另一种常见的模式。它被称为恒等函数。也即，输出永远等于输入的函数。\n\n正如你所想的，Ramda 为我们提供了 `identity` 函数。\n\n```js\nconst alwaysDrivingAge = age => ifElse(lt(__, 16), always(16), identity)(age)\n```\n\n`identity` 可以接受多个参数，但总是返回首个参数。如果想要返回除首个参数之外的参数，可以使用更通用的 `nthArg` 函数。但 `nthArg` 不如 `identity` 用的频繁。\n\n**when 和 unless**\n\n在 `ifElse` 代码中，其中一个条件分支为 `identity` 也很常见。所以 Ramda 也提供了便捷的方法。\n\n如果像上例所示，第二个分支是 `identity`，可以用 `when` 代替 `ifElse`：\n\n```js\nconst alwaysDrivingAge = age => when(lt(__, 16), always(16))(age)\n```\n\n如果第一个条件分支是 `identity`，可以用 `unless`。借助 `gte(__, 16)` 来翻转一下我们的条件，便可以使用 `unless` 了。\n\n```js\nconst alwaysDrivingAge = age => unless(gte(__, 16), always(16))(age)\n```\n\n**cond**\n\nRamda 还提供了 `cond` 函数，来代替 `switch` 语句或链式的 `if...then...else` 语句。\n\n这里采用 Ramda 文档中的例子来展示 `cond` 的用法：\n\n```js\nconst water = temperature => cond([\n  [equals(0),   always('water freezes at 0°C')],\n  [equals(100), always('water boils at 100°C')],\n  [T,           temp => `nothing special happens at ${temp}°C`]\n])(temperature)\n```\n\n我目前还不需要在 Ramda 代码中使用 `cond`。但我很多年前编写过 Common Lisp 代码，所以 `cond` 函数感觉就像是位老朋友。\n\n**结论**\n\n本节中展示了很多将命令式代码转为函数声明式代码的 Ramda 函数。\n\n**下一节**\n\n你可能已经注意到了，最后我们编写的几个函数（`forever21`、`alwaysDrivingAge` 和 `water`）都接受一个参数，构建一个新函数，然后将该函数作用于参数。\n\n这也是一种常见的模式，并且 Ramda 照例提供了一些简化这些代码的便捷方法。下一节中，[Pointfree Style](https://adispring.coding.me/2017/06/13/Thinking-in-Ramda-Pointfree-Style/) 将演示如何简化符合这种模式的代码。\n","slug":"Thinking-in-Ramda-Declarative-Programming","published":1,"updated":"2017-06-15T01:07:00.000Z","_id":"cj3vm14h200063bs6ru9pts7u","comments":1,"layout":"post","photos":[],"link":"","content":"<p>译者注：本文翻译自 Randy Coulman 的 《<a href=\"http://randycoulman.com/blog/2016/06/14/thinking-in-ramda-declarative-programming/\" target=\"_blank\" rel=\"external\">Thinking in Ramda: Declarative Programming</a>》，转载请与<a href=\"https://github.com/randycoulman\" target=\"_blank\" rel=\"external\">原作者</a>或<a href=\"https://github.com/adispring\" target=\"_blank\" rel=\"external\">本人</a>联系。下面开始正文。</p>\n<hr>\n<p>本文是函数式编程系列文章：<a href=\"https://adispring.coding.me/categories/Thinking-in-Ramda/\" target=\"_blank\" rel=\"external\">Thinking in Ramda</a> 的第四篇。</p>\n<p>在<a href=\"https://adispring.coding.me/2017/06/11/Thinking-in-Ramda-Partial-Application/\" target=\"_blank\" rel=\"external\">第三节</a>中，讨论了使用 &quot;部分应用&quot; 和 &quot;柯里化&quot; 技术来组合多元（多参数）函数。</p>\n<p>当我们开始编写小的函数式构建块并组合它们时，发现必须写好多函数来包裹 JavaScript 操作符，比如算术、比较、逻辑操作符和控制流。这可能比较乏味，但 Ramda 将我们拉了回来，让事情变得有趣起来。</p>\n<p>开始之前，先介绍一些背景知识。</p>\n<p><strong>命令式 vs 声明式</strong></p>\n<p>存在很多编程语言分类的方式，如静态语言和动态语言，解释型语言和编译型语言，底层和高层语言等等。</p>\n<p>另一种划分的方式是命令式编程和声明式编程。</p>\n<p>简单地说，命令式编程中，程序员需要告诉计算机怎么做来完成任务。命令式编程带给我们每天会用到的大量的基本结构：控制流（<code>if</code>-<code>then</code>-<code>else</code> 语句和循环），算术运算符（<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>），比较运算符（<code>===</code>、<code>&gt;</code>、<code>&lt;</code> 等），和逻辑运算符（<code>&amp;&amp;</code>、<code>||</code>、<code>!</code>）。</p>\n<p>而声明式编程，程序员只需告诉计算机我想要什么，然后计算机自己理清如何产生结果。</p>\n<p>其中一种经典的声明式编程语言是 Prolog。在 Prolog 中，程序是由一组 &quot;facts&quot; (谓词) 和 一组 &quot;rules&quot; (规则) 组成。可以通过提问来启动程序。Prolog 的推理机使用 facts 和 rules 来回答问题。</p>\n<p>函数式编程被认为是声明式编程的一个子集。在一段函数式程序中，我们定义函数，然后通过组合这些函数告诉计算机做什么。</p>\n<p>即使在声明式程序中，也需要做一些命令式程序中的工作。控制流，算术、比较和逻辑操作仍然是必须使用的基本构建块。但我们需要找到一种声明式的方式来描述这些基本构建块。</p>\n<p><strong>声明式替换</strong></p>\n<p>由于我们使用 JavaScript （一种命令式语言）编程，所以在编写 &quot;普通&quot; JavaScript 代码时，使用标准的命令式结构也是正常的。</p>\n<p>但当使用 &quot;pipeline&quot; 或类似的结构编写函数式变换时，命令式的结构并不能很好的工作。</p>\n<p><strong>算术</strong></p>\n<p>在 <a href=\"https://adispring.coding.me/2017/06/10/Thinking-in-Ramda-Combining-Functions/\" target=\"_blank\" rel=\"external\">第二节</a> ，我们实现了一系列算术变换来演示 &quot;pipeline&quot;：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> multiply = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a * b</div><div class=\"line\"><span class=\"keyword\">const</span> addOne = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">const</span> square = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * x</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> operate = pipe(</div><div class=\"line\">  multiply,</div><div class=\"line\">  addOne,</div><div class=\"line\">  square</div><div class=\"line\">)</div><div class=\"line\"> </div><div class=\"line\">operate(<span class=\"number\">3</span>, <span class=\"number\">4</span>) <span class=\"comment\">// =&gt; ((3 * 4) + 1)^2 =&gt; (12 + 1)^2 =&gt; 13^2 =&gt; 169</span></div></pre></td></tr></table></figure></p>\n<p>注意我们是如何编写函数来实现我们想要的基本构建块的。</p>\n<p>Ramda 提供了 <code>add</code>、<code>subtract</code>、<code>multiply</code> 和 <code>divide</code> 函数来替代标准的算术运算符。所以我们可以使用 Ramda 的 <code>multiply</code> 来代替我们自己实现的乘法，可以利用 Ramda 的柯里化 <code>add</code> 函数的优势来取代我们的 <code>addOne</code>，也可以利用 <code>multiply</code> 来编写 <code>square</code>：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> square = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> multiply(x, x)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> operate = pipe(</div><div class=\"line\">  multiply,</div><div class=\"line\">  add(<span class=\"number\">1</span>),</div><div class=\"line\">  square</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p><code>add(1)</code> 与增量运算符（<code>++</code>）非常相似，但 <code>++</code> 修改了被操作的值，因此它是 &quot;mutation&quot; 的。正如在 <a href=\"https://adispring.coding.me/2017/06/09/Thinking-in-Ramda-%E5%85%A5%E9%97%A8/\" target=\"_blank\" rel=\"external\">第一节</a> 中所讲，Immutability 是函数式编程的核心原则，所以我们不想使用 <code>++</code> 或 <code>--</code>。</p>\n<p>可以使用 <code>add(1)</code> 和 <code>subtract(1)</code> 来做递增和递减操作，但由于这两个操作非常常用，所以 Ramda 专门提供了 <code>inc</code> 和 <code>dec</code>。</p>\n<p>所以可以进一步简化我们的 &quot;pipeline&quot;：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> square = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> multiply(x, x)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> operate = pipe(</div><div class=\"line\">  multiply,</div><div class=\"line\">  inc,</div><div class=\"line\">  square</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p><code>subtract</code> 是二元操作符 <code>-</code> 的替代，但还有一个表示取反的一元操作符 <code>-</code>。我们可以使用 <code>multiply(-1)</code>，但 Ramda 也提供了 <code>negate</code> 来实现相同的功能。</p>\n<p><strong>Comparison (比较)</strong></p>\n<p>还是在 <a href=\"https://adispring.coding.me/2017/06/10/Thinking-in-Ramda-Combining-Functions/\" target=\"_blank\" rel=\"external\">第二节</a>，我们写了一些函数来确定一个人是否有资格投票。该代码的最终版本如下所示：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> wasBornInCountry = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> person.birthCountry === OUR_COUNTRY</div><div class=\"line\"><span class=\"keyword\">const</span> wasNaturalized = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> <span class=\"built_in\">Boolean</span>(person.naturalizationDate)</div><div class=\"line\"><span class=\"keyword\">const</span> isOver18 = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> person.age &gt;= <span class=\"number\">18</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> isCitizen = either(wasBornInCountry, wasNaturalized)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> isEligibleToVote = both(isOver18, isCitizen)</div></pre></td></tr></table></figure></p>\n<p>注意，上面的一些函数使用了标准比较运算符（<code>===</code> 和 <code>&gt;=</code>）。正如你现在所怀疑的，Ramda 也提供了这些运算符的替代。</p>\n<p>我们来修改一下代码：使用 <code>equals</code> 代替 <code>===</code>，使用 <code>gte</code> 替代 <code>&gt;=</code>。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> wasBornInCountry = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> equals(person.birthCountry, OUR_COUNTRY)</div><div class=\"line\"><span class=\"keyword\">const</span> wasNaturalized = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> <span class=\"built_in\">Boolean</span>(person.naturalizationDate)</div><div class=\"line\"><span class=\"keyword\">const</span> isOver18 = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> gte(person.age, <span class=\"number\">18</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> isCitizen = either(wasBornInCountry, wasNaturalized)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> isEligibleToVote = both(isOver18, isCitizen)</div></pre></td></tr></table></figure></p>\n<p>Ramda 还提供了其他比较运算符的替代：<code>gt</code> 对应 <code>&gt;</code>，<code>lt</code> 对应 <code>&lt;</code>，<code>lte</code> 对应 <code>&lt;=</code>。</p>\n<p>注意，这些函数保持正常的参数顺序（<code>gt</code> 表示第一个参数是否大于第二个参数）。这在单独使用时没有问题，但在组合函数时，可能会让人产生困惑。这些函数似乎违反了 Ramda 的 &quot;待处理数据放在最后&quot; 的原则，所以我们在 pipeline 或类似的情况下使用它们时，要格外小心。这时，<code>flip</code> 和 占位符 (<code>__</code>) 就派上了用场。</p>\n<p>除了 <code>equals</code>，还有一个 <code>identical</code>，可以用来判断两个值是否引用了同一块内存。</p>\n<p><code>===</code> 还有一些其他的用途：可以检测字符串或数组是否为空（<code>str === ''</code> 或 <code>arr.length === 0</code>），也可以检查变量是否为 <code>null</code> 或 <code>undefined</code>。Ramda 为这两种情况提供了方便的判断函数：<code>isEmpty</code> 和 <code>isNil</code>。</p>\n<p><strong>Logic (逻辑)</strong></p>\n<p>在 <a href=\"https://adispring.coding.me/2017/06/10/Thinking-in-Ramda-Combining-Functions/\" target=\"_blank\" rel=\"external\">第二节</a> 中（参见上面的相关代码）。我们使用 <code>both</code> 和 <code>either</code> 来代替 <code>&amp;&amp;</code> 和 <code>||</code> 运算符。我们还提到使用 <code>complement</code> 代替 <code>!</code>。</p>\n<p>当组合的函数作用于同一份输入值时，这些组合函数帮助很大。上述示例中，<code>wasBornInCountry</code>、<code>wasNaturalized</code> 和 <code>isOver18</code> 都作用于同一个人上。</p>\n<p>但有时我们需要将 <code>&amp;&amp;</code>、<code>||</code> 和 <code>!</code> 作用于不同的数值。对于这些情况， Ramda 提供了 <code>and</code>、<code>or</code> 和 <code>not</code> 函数。我以下列方式进行分类：<code>and</code>、<code>or</code> 和 <code>not</code> 用于处理数值；<code>both</code>、<code>either</code> 和 <code>complement</code> 用于处理函数。</p>\n<p>经常用 <code>||</code> 来提供默认值。例如，我们可能会编写如下代码：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> lineWidth = settings.lineWidth || <span class=\"number\">80</span></div></pre></td></tr></table></figure></p>\n<p>这是一个常见的用法，大部分情况下都能正常工作，但依赖于 JavaScript 对 &quot;falsy&quot; 值的定义。假设 <code>0</code> 是一个合法的设置选项呢？由于 <code>0</code> 是 &quot;falsy&quot; 值，所以我们最终会得到的行宽为 80 。</p>\n<p>我们可以使用上面刚学到的 <code>isNil</code> 函数，但 Ramda 提供了一个更好的选择：<code>defaultTo</code>。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> lineWidth = defaultTo(<span class=\"number\">80</span>, settings.lineWidth)</div></pre></td></tr></table></figure></p>\n<p><code>defaultTo</code> 检查第二个参数是否为空（<code>isNil</code>）。如果非空，则返回该值；否则返回第一个值。</p>\n<p><strong>Conditionals (条件)</strong></p>\n<p>控制流在函数式编程中不是必要的，但偶尔也会有些用处。在 <a href=\"https://adispring.coding.me/2017/06/09/Thinking-in-Ramda-%E5%85%A5%E9%97%A8/\" target=\"_blank\" rel=\"external\">第一节</a> 中讨论的集合迭代函数在大部分情况下都可以很好的取代循环，但 &quot;条件&quot; 仍然非常重要。</p>\n<p><strong>ifElse</strong></p>\n<p>我们来写一个函数，<code>forever21</code>，接受一个年龄，并返回下一个年龄。但正如名字所示，一旦成长到 21 岁，就一直保持这样。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> forever21 = <span class=\"function\"><span class=\"params\">age</span> =&gt;</span> age &gt;= <span class=\"number\">21</span> ? <span class=\"number\">21</span> : age + <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>注意，条件（<code>age &gt;= 21</code>）和第二个分支（<code>age + 1</code>）都可以写作 <code>age</code> 的函数。第一个分支（<code>21</code>）也可以重写成一个常量函数（<code>() =&gt; 21</code>）。现在我们有三个接受（或忽略）<code>age</code> 为参数的函数。</p>\n<p>现在可以使用 Ramda 的 <code>ifElse</code> 函数了，这是一个相当于 <code>if...then...else</code> 或 <code>?:</code> 的函数。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> forever21 = <span class=\"function\"><span class=\"params\">age</span> =&gt;</span> ifElse(gte(__, <span class=\"number\">21</span>), () =&gt; <span class=\"number\">21</span>, inc)(age)</div></pre></td></tr></table></figure></p>\n<p>如上所示，比较函数在进行组合时，可能并不是以我们想要的形式进行工作。所以在这里被迫引入了占位符（<code>__</code>）。我们也可以使用 <code>lte</code>：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> forever21 = <span class=\"function\"><span class=\"params\">age</span> =&gt;</span> ifElse(lte(<span class=\"number\">21</span>), () =&gt; <span class=\"number\">21</span>, inc)(age)</div></pre></td></tr></table></figure></p>\n<p>在这种情况下，我们不得不读作：&quot;21岁小于或等于给定年龄&quot;。但这样可读性很低、比较乱，所以我坚持使用占位符版本的函数。</p>\n<p><strong>constants (常量)</strong></p>\n<p>常量函数在这种情形下非常有用。你可能已经想到了，Ramda 为我们提供了一些便捷的方法。本例中，这个方法是 <code>always</code>。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> forever21 = <span class=\"function\"><span class=\"params\">age</span> =&gt;</span> ifElse(gte(__, <span class=\"number\">21</span>), always(<span class=\"number\">21</span>), inc)(age)</div></pre></td></tr></table></figure></p>\n<p>Ramda 还提供了 <code>T</code> 和 <code>F</code>，作为 <code>always(true) 和 always(false)</code> 的缩写。</p>\n<p><strong>identity (恒等)</strong></p>\n<p>再来写一个函数：<code>alwaysDrivingAge</code>。该函数接受一个年龄，如果 <code>gte</code> 16，则将该年龄返回；但如果小于 16，则返回 16。这样任何人都可以伪造他们的驾驶年龄了，即使他们还没有达到。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> alwaysDrivingAge = <span class=\"function\"><span class=\"params\">age</span> =&gt;</span> ifElse(lt(__, <span class=\"number\">16</span>), always(<span class=\"number\">16</span>), a =&gt; a)(age)</div></pre></td></tr></table></figure></p>\n<p>条件中的第二个分支（<code>a =&gt; a</code>）是函数式编程中的另一种常见的模式。它被称为恒等函数。也即，输出永远等于输入的函数。</p>\n<p>正如你所想的，Ramda 为我们提供了 <code>identity</code> 函数。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> alwaysDrivingAge = <span class=\"function\"><span class=\"params\">age</span> =&gt;</span> ifElse(lt(__, <span class=\"number\">16</span>), always(<span class=\"number\">16</span>), identity)(age)</div></pre></td></tr></table></figure></p>\n<p><code>identity</code> 可以接受多个参数，但总是返回首个参数。如果想要返回除首个参数之外的参数，可以使用更通用的 <code>nthArg</code> 函数。但 <code>nthArg</code> 不如 <code>identity</code> 用的频繁。</p>\n<p><strong>when 和 unless</strong></p>\n<p>在 <code>ifElse</code> 代码中，其中一个条件分支为 <code>identity</code> 也很常见。所以 Ramda 也提供了便捷的方法。</p>\n<p>如果像上例所示，第二个分支是 <code>identity</code>，可以用 <code>when</code> 代替 <code>ifElse</code>：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> alwaysDrivingAge = <span class=\"function\"><span class=\"params\">age</span> =&gt;</span> when(lt(__, <span class=\"number\">16</span>), always(<span class=\"number\">16</span>))(age)</div></pre></td></tr></table></figure></p>\n<p>如果第一个条件分支是 <code>identity</code>，可以用 <code>unless</code>。借助 <code>gte(__, 16)</code> 来翻转一下我们的条件，便可以使用 <code>unless</code> 了。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> alwaysDrivingAge = <span class=\"function\"><span class=\"params\">age</span> =&gt;</span> unless(gte(__, <span class=\"number\">16</span>), always(<span class=\"number\">16</span>))(age)</div></pre></td></tr></table></figure></p>\n<p><strong>cond</strong></p>\n<p>Ramda 还提供了 <code>cond</code> 函数，来代替 <code>switch</code> 语句或链式的 <code>if...then...else</code> 语句。</p>\n<p>这里采用 Ramda 文档中的例子来展示 <code>cond</code> 的用法：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> water = <span class=\"function\"><span class=\"params\">temperature</span> =&gt;</span> cond([</div><div class=\"line\">  [equals(<span class=\"number\">0</span>),   always(<span class=\"string\">'water freezes at 0°C'</span>)],</div><div class=\"line\">  [equals(<span class=\"number\">100</span>), always(<span class=\"string\">'water boils at 100°C'</span>)],</div><div class=\"line\">  [T,           temp =&gt; <span class=\"string\">`nothing special happens at <span class=\"subst\">$&#123;temp&#125;</span>°C`</span>]</div><div class=\"line\">])(temperature)</div></pre></td></tr></table></figure></p>\n<p>我目前还不需要在 Ramda 代码中使用 <code>cond</code>。但我很多年前编写过 Common Lisp 代码，所以 <code>cond</code> 函数感觉就像是位老朋友。</p>\n<p><strong>结论</strong></p>\n<p>本节中展示了很多将命令式代码转为函数声明式代码的 Ramda 函数。</p>\n<p><strong>下一节</strong></p>\n<p>你可能已经注意到了，最后我们编写的几个函数（<code>forever21</code>、<code>alwaysDrivingAge</code> 和 <code>water</code>）都接受一个参数，构建一个新函数，然后将该函数作用于参数。</p>\n<p>这也是一种常见的模式，并且 Ramda 照例提供了一些简化这些代码的便捷方法。下一节中，<a href=\"https://adispring.coding.me/2017/06/13/Thinking-in-Ramda-Pointfree-Style/\" target=\"_blank\" rel=\"external\">Pointfree Style</a> 将演示如何简化符合这种模式的代码。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>译者注：本文翻译自 Randy Coulman 的 《<a href=\"http://randycoulman.com/blog/2016/06/14/thinking-in-ramda-declarative-programming/\" target=\"_blank\" rel=\"external\">Thinking in Ramda: Declarative Programming</a>》，转载请与<a href=\"https://github.com/randycoulman\" target=\"_blank\" rel=\"external\">原作者</a>或<a href=\"https://github.com/adispring\" target=\"_blank\" rel=\"external\">本人</a>联系。下面开始正文。</p>\n<hr>\n<p>本文是函数式编程系列文章：<a href=\"https://adispring.coding.me/categories/Thinking-in-Ramda/\" target=\"_blank\" rel=\"external\">Thinking in Ramda</a> 的第四篇。</p>\n<p>在<a href=\"https://adispring.coding.me/2017/06/11/Thinking-in-Ramda-Partial-Application/\" target=\"_blank\" rel=\"external\">第三节</a>中，讨论了使用 &quot;部分应用&quot; 和 &quot;柯里化&quot; 技术来组合多元（多参数）函数。</p>\n<p>当我们开始编写小的函数式构建块并组合它们时，发现必须写好多函数来包裹 JavaScript 操作符，比如算术、比较、逻辑操作符和控制流。这可能比较乏味，但 Ramda 将我们拉了回来，让事情变得有趣起来。</p>\n<p>开始之前，先介绍一些背景知识。</p>\n<p><strong>命令式 vs 声明式</strong></p>\n<p>存在很多编程语言分类的方式，如静态语言和动态语言，解释型语言和编译型语言，底层和高层语言等等。</p>\n<p>另一种划分的方式是命令式编程和声明式编程。</p>\n<p>简单地说，命令式编程中，程序员需要告诉计算机怎么做来完成任务。命令式编程带给我们每天会用到的大量的基本结构：控制流（<code>if</code>-<code>then</code>-<code>else</code> 语句和循环），算术运算符（<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>），比较运算符（<code>===</code>、<code>&gt;</code>、<code>&lt;</code> 等），和逻辑运算符（<code>&amp;&amp;</code>、<code>||</code>、<code>!</code>）。</p>\n<p>而声明式编程，程序员只需告诉计算机我想要什么，然后计算机自己理清如何产生结果。</p>\n<p>其中一种经典的声明式编程语言是 Prolog。在 Prolog 中，程序是由一组 &quot;facts&quot; (谓词) 和 一组 &quot;rules&quot; (规则) 组成。可以通过提问来启动程序。Prolog 的推理机使用 facts 和 rules 来回答问题。</p>\n<p>函数式编程被认为是声明式编程的一个子集。在一段函数式程序中，我们定义函数，然后通过组合这些函数告诉计算机做什么。</p>\n<p>即使在声明式程序中，也需要做一些命令式程序中的工作。控制流，算术、比较和逻辑操作仍然是必须使用的基本构建块。但我们需要找到一种声明式的方式来描述这些基本构建块。</p>\n<p><strong>声明式替换</strong></p>\n<p>由于我们使用 JavaScript （一种命令式语言）编程，所以在编写 &quot;普通&quot; JavaScript 代码时，使用标准的命令式结构也是正常的。</p>\n<p>但当使用 &quot;pipeline&quot; 或类似的结构编写函数式变换时，命令式的结构并不能很好的工作。</p>\n<p><strong>算术</strong></p>\n<p>在 <a href=\"https://adispring.coding.me/2017/06/10/Thinking-in-Ramda-Combining-Functions/\" target=\"_blank\" rel=\"external\">第二节</a> ，我们实现了一系列算术变换来演示 &quot;pipeline&quot;：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> multiply = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a * b</div><div class=\"line\"><span class=\"keyword\">const</span> addOne = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">const</span> square = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * x</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> operate = pipe(</div><div class=\"line\">  multiply,</div><div class=\"line\">  addOne,</div><div class=\"line\">  square</div><div class=\"line\">)</div><div class=\"line\"> </div><div class=\"line\">operate(<span class=\"number\">3</span>, <span class=\"number\">4</span>) <span class=\"comment\">// =&gt; ((3 * 4) + 1)^2 =&gt; (12 + 1)^2 =&gt; 13^2 =&gt; 169</span></div></pre></td></tr></table></figure></p>\n<p>注意我们是如何编写函数来实现我们想要的基本构建块的。</p>\n<p>Ramda 提供了 <code>add</code>、<code>subtract</code>、<code>multiply</code> 和 <code>divide</code> 函数来替代标准的算术运算符。所以我们可以使用 Ramda 的 <code>multiply</code> 来代替我们自己实现的乘法，可以利用 Ramda 的柯里化 <code>add</code> 函数的优势来取代我们的 <code>addOne</code>，也可以利用 <code>multiply</code> 来编写 <code>square</code>：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> square = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> multiply(x, x)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> operate = pipe(</div><div class=\"line\">  multiply,</div><div class=\"line\">  add(<span class=\"number\">1</span>),</div><div class=\"line\">  square</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p><code>add(1)</code> 与增量运算符（<code>++</code>）非常相似，但 <code>++</code> 修改了被操作的值，因此它是 &quot;mutation&quot; 的。正如在 <a href=\"https://adispring.coding.me/2017/06/09/Thinking-in-Ramda-%E5%85%A5%E9%97%A8/\" target=\"_blank\" rel=\"external\">第一节</a> 中所讲，Immutability 是函数式编程的核心原则，所以我们不想使用 <code>++</code> 或 <code>--</code>。</p>\n<p>可以使用 <code>add(1)</code> 和 <code>subtract(1)</code> 来做递增和递减操作，但由于这两个操作非常常用，所以 Ramda 专门提供了 <code>inc</code> 和 <code>dec</code>。</p>\n<p>所以可以进一步简化我们的 &quot;pipeline&quot;：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> square = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> multiply(x, x)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> operate = pipe(</div><div class=\"line\">  multiply,</div><div class=\"line\">  inc,</div><div class=\"line\">  square</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p><code>subtract</code> 是二元操作符 <code>-</code> 的替代，但还有一个表示取反的一元操作符 <code>-</code>。我们可以使用 <code>multiply(-1)</code>，但 Ramda 也提供了 <code>negate</code> 来实现相同的功能。</p>\n<p><strong>Comparison (比较)</strong></p>\n<p>还是在 <a href=\"https://adispring.coding.me/2017/06/10/Thinking-in-Ramda-Combining-Functions/\" target=\"_blank\" rel=\"external\">第二节</a>，我们写了一些函数来确定一个人是否有资格投票。该代码的最终版本如下所示：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> wasBornInCountry = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> person.birthCountry === OUR_COUNTRY</div><div class=\"line\"><span class=\"keyword\">const</span> wasNaturalized = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> <span class=\"built_in\">Boolean</span>(person.naturalizationDate)</div><div class=\"line\"><span class=\"keyword\">const</span> isOver18 = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> person.age &gt;= <span class=\"number\">18</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> isCitizen = either(wasBornInCountry, wasNaturalized)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> isEligibleToVote = both(isOver18, isCitizen)</div></pre></td></tr></table></figure></p>\n<p>注意，上面的一些函数使用了标准比较运算符（<code>===</code> 和 <code>&gt;=</code>）。正如你现在所怀疑的，Ramda 也提供了这些运算符的替代。</p>\n<p>我们来修改一下代码：使用 <code>equals</code> 代替 <code>===</code>，使用 <code>gte</code> 替代 <code>&gt;=</code>。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> wasBornInCountry = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> equals(person.birthCountry, OUR_COUNTRY)</div><div class=\"line\"><span class=\"keyword\">const</span> wasNaturalized = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> <span class=\"built_in\">Boolean</span>(person.naturalizationDate)</div><div class=\"line\"><span class=\"keyword\">const</span> isOver18 = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> gte(person.age, <span class=\"number\">18</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> isCitizen = either(wasBornInCountry, wasNaturalized)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> isEligibleToVote = both(isOver18, isCitizen)</div></pre></td></tr></table></figure></p>\n<p>Ramda 还提供了其他比较运算符的替代：<code>gt</code> 对应 <code>&gt;</code>，<code>lt</code> 对应 <code>&lt;</code>，<code>lte</code> 对应 <code>&lt;=</code>。</p>\n<p>注意，这些函数保持正常的参数顺序（<code>gt</code> 表示第一个参数是否大于第二个参数）。这在单独使用时没有问题，但在组合函数时，可能会让人产生困惑。这些函数似乎违反了 Ramda 的 &quot;待处理数据放在最后&quot; 的原则，所以我们在 pipeline 或类似的情况下使用它们时，要格外小心。这时，<code>flip</code> 和 占位符 (<code>__</code>) 就派上了用场。</p>\n<p>除了 <code>equals</code>，还有一个 <code>identical</code>，可以用来判断两个值是否引用了同一块内存。</p>\n<p><code>===</code> 还有一些其他的用途：可以检测字符串或数组是否为空（<code>str === ''</code> 或 <code>arr.length === 0</code>），也可以检查变量是否为 <code>null</code> 或 <code>undefined</code>。Ramda 为这两种情况提供了方便的判断函数：<code>isEmpty</code> 和 <code>isNil</code>。</p>\n<p><strong>Logic (逻辑)</strong></p>\n<p>在 <a href=\"https://adispring.coding.me/2017/06/10/Thinking-in-Ramda-Combining-Functions/\" target=\"_blank\" rel=\"external\">第二节</a> 中（参见上面的相关代码）。我们使用 <code>both</code> 和 <code>either</code> 来代替 <code>&amp;&amp;</code> 和 <code>||</code> 运算符。我们还提到使用 <code>complement</code> 代替 <code>!</code>。</p>\n<p>当组合的函数作用于同一份输入值时，这些组合函数帮助很大。上述示例中，<code>wasBornInCountry</code>、<code>wasNaturalized</code> 和 <code>isOver18</code> 都作用于同一个人上。</p>\n<p>但有时我们需要将 <code>&amp;&amp;</code>、<code>||</code> 和 <code>!</code> 作用于不同的数值。对于这些情况， Ramda 提供了 <code>and</code>、<code>or</code> 和 <code>not</code> 函数。我以下列方式进行分类：<code>and</code>、<code>or</code> 和 <code>not</code> 用于处理数值；<code>both</code>、<code>either</code> 和 <code>complement</code> 用于处理函数。</p>\n<p>经常用 <code>||</code> 来提供默认值。例如，我们可能会编写如下代码：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> lineWidth = settings.lineWidth || <span class=\"number\">80</span></div></pre></td></tr></table></figure></p>\n<p>这是一个常见的用法，大部分情况下都能正常工作，但依赖于 JavaScript 对 &quot;falsy&quot; 值的定义。假设 <code>0</code> 是一个合法的设置选项呢？由于 <code>0</code> 是 &quot;falsy&quot; 值，所以我们最终会得到的行宽为 80 。</p>\n<p>我们可以使用上面刚学到的 <code>isNil</code> 函数，但 Ramda 提供了一个更好的选择：<code>defaultTo</code>。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> lineWidth = defaultTo(<span class=\"number\">80</span>, settings.lineWidth)</div></pre></td></tr></table></figure></p>\n<p><code>defaultTo</code> 检查第二个参数是否为空（<code>isNil</code>）。如果非空，则返回该值；否则返回第一个值。</p>\n<p><strong>Conditionals (条件)</strong></p>\n<p>控制流在函数式编程中不是必要的，但偶尔也会有些用处。在 <a href=\"https://adispring.coding.me/2017/06/09/Thinking-in-Ramda-%E5%85%A5%E9%97%A8/\" target=\"_blank\" rel=\"external\">第一节</a> 中讨论的集合迭代函数在大部分情况下都可以很好的取代循环，但 &quot;条件&quot; 仍然非常重要。</p>\n<p><strong>ifElse</strong></p>\n<p>我们来写一个函数，<code>forever21</code>，接受一个年龄，并返回下一个年龄。但正如名字所示，一旦成长到 21 岁，就一直保持这样。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> forever21 = <span class=\"function\"><span class=\"params\">age</span> =&gt;</span> age &gt;= <span class=\"number\">21</span> ? <span class=\"number\">21</span> : age + <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>注意，条件（<code>age &gt;= 21</code>）和第二个分支（<code>age + 1</code>）都可以写作 <code>age</code> 的函数。第一个分支（<code>21</code>）也可以重写成一个常量函数（<code>() =&gt; 21</code>）。现在我们有三个接受（或忽略）<code>age</code> 为参数的函数。</p>\n<p>现在可以使用 Ramda 的 <code>ifElse</code> 函数了，这是一个相当于 <code>if...then...else</code> 或 <code>?:</code> 的函数。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> forever21 = <span class=\"function\"><span class=\"params\">age</span> =&gt;</span> ifElse(gte(__, <span class=\"number\">21</span>), () =&gt; <span class=\"number\">21</span>, inc)(age)</div></pre></td></tr></table></figure></p>\n<p>如上所示，比较函数在进行组合时，可能并不是以我们想要的形式进行工作。所以在这里被迫引入了占位符（<code>__</code>）。我们也可以使用 <code>lte</code>：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> forever21 = <span class=\"function\"><span class=\"params\">age</span> =&gt;</span> ifElse(lte(<span class=\"number\">21</span>), () =&gt; <span class=\"number\">21</span>, inc)(age)</div></pre></td></tr></table></figure></p>\n<p>在这种情况下，我们不得不读作：&quot;21岁小于或等于给定年龄&quot;。但这样可读性很低、比较乱，所以我坚持使用占位符版本的函数。</p>\n<p><strong>constants (常量)</strong></p>\n<p>常量函数在这种情形下非常有用。你可能已经想到了，Ramda 为我们提供了一些便捷的方法。本例中，这个方法是 <code>always</code>。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> forever21 = <span class=\"function\"><span class=\"params\">age</span> =&gt;</span> ifElse(gte(__, <span class=\"number\">21</span>), always(<span class=\"number\">21</span>), inc)(age)</div></pre></td></tr></table></figure></p>\n<p>Ramda 还提供了 <code>T</code> 和 <code>F</code>，作为 <code>always(true) 和 always(false)</code> 的缩写。</p>\n<p><strong>identity (恒等)</strong></p>\n<p>再来写一个函数：<code>alwaysDrivingAge</code>。该函数接受一个年龄，如果 <code>gte</code> 16，则将该年龄返回；但如果小于 16，则返回 16。这样任何人都可以伪造他们的驾驶年龄了，即使他们还没有达到。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> alwaysDrivingAge = <span class=\"function\"><span class=\"params\">age</span> =&gt;</span> ifElse(lt(__, <span class=\"number\">16</span>), always(<span class=\"number\">16</span>), a =&gt; a)(age)</div></pre></td></tr></table></figure></p>\n<p>条件中的第二个分支（<code>a =&gt; a</code>）是函数式编程中的另一种常见的模式。它被称为恒等函数。也即，输出永远等于输入的函数。</p>\n<p>正如你所想的，Ramda 为我们提供了 <code>identity</code> 函数。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> alwaysDrivingAge = <span class=\"function\"><span class=\"params\">age</span> =&gt;</span> ifElse(lt(__, <span class=\"number\">16</span>), always(<span class=\"number\">16</span>), identity)(age)</div></pre></td></tr></table></figure></p>\n<p><code>identity</code> 可以接受多个参数，但总是返回首个参数。如果想要返回除首个参数之外的参数，可以使用更通用的 <code>nthArg</code> 函数。但 <code>nthArg</code> 不如 <code>identity</code> 用的频繁。</p>\n<p><strong>when 和 unless</strong></p>\n<p>在 <code>ifElse</code> 代码中，其中一个条件分支为 <code>identity</code> 也很常见。所以 Ramda 也提供了便捷的方法。</p>\n<p>如果像上例所示，第二个分支是 <code>identity</code>，可以用 <code>when</code> 代替 <code>ifElse</code>：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> alwaysDrivingAge = <span class=\"function\"><span class=\"params\">age</span> =&gt;</span> when(lt(__, <span class=\"number\">16</span>), always(<span class=\"number\">16</span>))(age)</div></pre></td></tr></table></figure></p>\n<p>如果第一个条件分支是 <code>identity</code>，可以用 <code>unless</code>。借助 <code>gte(__, 16)</code> 来翻转一下我们的条件，便可以使用 <code>unless</code> 了。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> alwaysDrivingAge = <span class=\"function\"><span class=\"params\">age</span> =&gt;</span> unless(gte(__, <span class=\"number\">16</span>), always(<span class=\"number\">16</span>))(age)</div></pre></td></tr></table></figure></p>\n<p><strong>cond</strong></p>\n<p>Ramda 还提供了 <code>cond</code> 函数，来代替 <code>switch</code> 语句或链式的 <code>if...then...else</code> 语句。</p>\n<p>这里采用 Ramda 文档中的例子来展示 <code>cond</code> 的用法：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> water = <span class=\"function\"><span class=\"params\">temperature</span> =&gt;</span> cond([</div><div class=\"line\">  [equals(<span class=\"number\">0</span>),   always(<span class=\"string\">'water freezes at 0°C'</span>)],</div><div class=\"line\">  [equals(<span class=\"number\">100</span>), always(<span class=\"string\">'water boils at 100°C'</span>)],</div><div class=\"line\">  [T,           temp =&gt; <span class=\"string\">`nothing special happens at <span class=\"subst\">$&#123;temp&#125;</span>°C`</span>]</div><div class=\"line\">])(temperature)</div></pre></td></tr></table></figure></p>\n<p>我目前还不需要在 Ramda 代码中使用 <code>cond</code>。但我很多年前编写过 Common Lisp 代码，所以 <code>cond</code> 函数感觉就像是位老朋友。</p>\n<p><strong>结论</strong></p>\n<p>本节中展示了很多将命令式代码转为函数声明式代码的 Ramda 函数。</p>\n<p><strong>下一节</strong></p>\n<p>你可能已经注意到了，最后我们编写的几个函数（<code>forever21</code>、<code>alwaysDrivingAge</code> 和 <code>water</code>）都接受一个参数，构建一个新函数，然后将该函数作用于参数。</p>\n<p>这也是一种常见的模式，并且 Ramda 照例提供了一些简化这些代码的便捷方法。下一节中，<a href=\"https://adispring.coding.me/2017/06/13/Thinking-in-Ramda-Pointfree-Style/\" target=\"_blank\" rel=\"external\">Pointfree Style</a> 将演示如何简化符合这种模式的代码。</p>\n"},{"title":"Thinking in Ramda: Pointfree Style (无参数风格编程)","date":"2017-06-13T13:27:05.000Z","_content":"\n译者注：本文翻译自 Randy Coulman 的 《[Thinking in Ramda: Pointfree Style](http://randycoulman.com/blog/2016/06/21/thinking-in-ramda-pointfree-style/)》，转载请与[原作者](https://github.com/randycoulman)或[本人](https://github.com/adispring)联系。下面开始正文。\n\n---\n\n本文是函数式编程系列文章：[Thinking in Ramda](https://adispring.coding.me/categories/Thinking-in-Ramda/) 的第五篇。\n\n在[第四节](https://adispring.coding.me/2017/06/11/Thinking-in-Ramda-Declarative-Programming/)中，我们讨论了如何用声明式编程（告诉计算机做什么，我们想要什么）代替命令式编程（告诉计算机该怎么做，详细的执行步骤）来编写代码。\n\n你可能已经注意到了，我们编写的几个函数（如 `forever21`、`alwaysDrivingAge`、`water`）都接受一个参数，构建一个新函数，然后将该函数作用于该参数。\n\n这是函数式编程里非常常见的一种模式，Ramda 同样提供了优化这种模式的方法。\n\n**Pointfree 风格（无参数风格）**\n\n我们在 [第三节](https://adispring.coding.me/2017/06/11/Thinking-in-Ramda-Partial-Application/) 中讨论了 Ramda 的两个指导原则：\n\n* 将数据放到参数列表的最后面。\n* 柯里化所有的东西。\n\n这两个原则衍生出了一种被函数式程序员称为 \"pointfree\" 的风格。我喜欢将 pointfree 的代码看作：\"数据？什么数据？这里没有数据！\"\n\n有一篇很好的博客：[Why Ramda?](http://fr.umio.us/why-ramda/)，展示了 pointfree 风格 真得不错。具体来说，它有一些有趣的标题，例如：\"数据在哪里？\"，\"好了，已经有了！\"，\"那么我可以看看数据吗？\" 和 \"拜托，我只是想要我的数据\"。\n\n我们还没有使用需要的工具来让所有的例子都变成完全 \"pointfree\" 的，现在就开始吧。\n\n再看一下 `forever21`：\n\n```js\nconst forever21 = age => ifElse(gte(__, 21), always(21), inc)(age)\n```\n\n注意，参数 `age` 出现了两次：一次在参数列表中；一次在函数的最后面：我们将由 `ifElse` 返回的新函数作用于 `age`。\n\n在使用 Ramda 编程时稍加留意，就会发现很多这种模式的代码。这也意味着，总应该有一种方法将这些函数转成 \"pointfree\" 风格。\n\n我们来看看这会是什么样子：\n\n```js\nconst forever21 = ifElse(gte(__, 21), always(21), inc)\n```\n\n嘭~~！我们刚刚让 `age` 消失了。这就是 Pointfree 风格。注意，这两个版本所做的事情完全一样。我们仍然返回一个接受年龄的函数，但并未显示的指定 `age` 参数。\n\n可以对 `alwaysDrivingAge` 和 `water` 进行相同的处理。\n\n原来的 `alwaysDrivingAge` 如下所示：\n\n```js\nconst alwaysDrivingAge = age => ifElse(lt(__, 16), always(16), identity)(age)\n```\n\n可以使用相同的方法使其变为 pointfree 的。\n\n```js\nconst alwaysDrivingAge = when(lt(__, 16), always(16))\n```\n\n下面是 `water` 原来的形式：\n\n```js\nconst water = temperature => cond([\n  [equals(0),   always('water freezes at 0°C')],\n  [equals(100), always('water boils at 100°C')],\n  [T,           temp => `nothing special happens at ${temp}°C`]\n])(temperature)\n```\n\n现在将其变为 pointfree 风格的：\n\n```js\nconst water = cond([\n  [equals(0),   always('water freezes at 0°C')],\n  [equals(100), always('water boils at 100°C')],\n  [T,           temp => `nothing special happens at ${temp}°C`]\n])\n```\n\n**多元函数（多参数函数）**\n\n如果函数接受多个参数会怎样呢？回顾一下 [第三节](https://adispring.coding.me/2017/06/11/Thinking-in-Ramda-Partial-Application/) 中的例子：`titlesForYear`。\n\n```js\nconst titlesForYear = curry((year, books) =>\n  pipe(\n    filter(publishedInYear(year)),\n    map(book => book.title)\n  )(books)\n)\n```\n\n注意，`books` 出现了两次：一次作为参数列表的最后一个参数（最后一个数据！）；一次出现在函数最后，当我们将其传入 pipeline 的时候。这跟我们之前看到参数为 `age` 的模式类似，所以可以对它进行相同的转换：\n\n```js\nconst titlesForYear = year =>\n  pipe(\n    filter(publishedInYear(year)),\n    map(book => book.title)\n  )\n```\n\n可以了！我们现在有了一个 pointfree 版本的 `titlesFroYear`。\n\n其实，这种情况下，我可能不会刻意追求 pointfree 风格，因为就像之前文章讨论过的：JavaScript 在调用一系列单参数函数方面并不方便。\n\n在 pipeline 中使用 `titleForYear` 是很方便，如我们可以很轻松的调用 `titlesForYear(2012)`，但当想要单独使用它时，我们就不得不回到之前文章里看到的形式 `)(`，对我而言，并不值得做出这种妥协（没必要为了 pointfree 而 pointfree）。\n\n但只要有如上形式的单参数函数（或者可能以后会被重构），我几乎总是写成 pointfree 风格的。\n\n**重构为 pointfree 风格的代码**\n\n有时我们的代码不会遵循这种模式。我们可能会在同一函数内多次对数据进行操作。\n\n在 [第二节](https://adispring.coding.me/2017/06/10/Thinking-in-Ramda-Combining-Functions/) 的几个例子中便是这种情形。我们使用诸如 `both`、`either`、`pipe`、`compose` 来重构代码。一旦我们这样做了，便会很容易让函数转换为 pointfree 风格的。\n\n我们来回顾一下 `isEligibleToVote` 这个例子，代码如下：\n\n```js\nconst wasBornInCountry = person => person.birthCountry === OUR_COUNTRY\nconst wasNaturalized = person => Boolean(person.naturalizationDate)\nconst isOver18 = person => person.age >= 18\n \nconst isCitizen = person => wasBornInCountry(person) || wasNaturalized(person)\n \nconst isEligibleToVote = person => isOver18(person) && isCitizen(person)\n```\n\n先从 `isCitizen` 开始。它接受一个 `person`, 然后将两个函数作用于该 `person`，将结果使用 `||` 组合起来。正如在 [第二节](https://adispring.coding.me/2017/06/10/Thinking-in-Ramda-Combining-Functions/) 中学到的，可以使用 `either` 将两个函数组合成一个新函数，然后将该组合函数作用于该 `person`。\n\n```js\nconst isCitizen = person => either(wasBornInCountry, wasNaturalized)(person)\n```\n\n可以使用 `both` 对 `isEligibleToVote` 做类似的处理。\n\n```js\nconst isEligibleToVote = person => both(isOver18, isCitizen)(person)\n```\n\n现在我们已经完成了这些重构，可以看到，这两个函数都遵循上面提到的模式：`person` 出现了两次，一次作为函数参数；一次放到最后，将组合函数作用其上。现在可以将它们重构为 pointfree 风格的代码：\n\n```js\nconst isCitizen = either(wasBornInCountry, wasNaturalized)\nconst isEligibleToVote = both(isOver18, isCitizen)\n```\n\n**为什么要这么做？**\n\nPointfree 风格需要一定的时间才能习惯。可能并不需要所有的地方都没有参数。有时候知道某些 Ramda 函数需要多少参数，也是很重要的。\n\n但是，一旦习惯了这种方式，它将变得非常强大：可以以非常有趣的方式将很多小的 pointfree 函数组合起来。\n\nPointfree 风格的优点是什么呢？人们可能会认为，这只不过是为了让函数式编程赢得 \"优点徽章\" 的学术活动而已（实际上并没有什么用处）。然而，我认为还是有一些优点的，即使需要花一些时间来习惯这种方式也是值得的：\n\n* 它让编程更简单、精练。这并不总是一件好事，但大部分情况下是这样的。\n* 它让算法更清晰。通过只关注正在组合的函数，我们可以在没有参数的干扰下，更好地了解发生了什么。\n* 它促使我们更专注于正在做的转换的本身，而不是正被转换的数据。\n* 它可以帮助我们将函数视为可以作用于不同数据的通用构建模块，而非对特定类型数据的操作。如果给数据一个名字，我们的思想便会被[禁锢](https://en.wikipedia.org/wiki/Anchoring)在：\"需要在哪里使用我们的函数\"；如果去掉参数，便会使我们更有创造力。\n\n**结论**\n\nPointfree 风格也被成为 [tacit 式编程](https://en.wikipedia.org/wiki/Tacit_programming)(隐含式编程)，可以使代码更清晰、更易于理解。通过代码重构将所有的转换组合成单一函数，我们最终会得到可以在更多地方使用的更小的构建块（函数）。\n\n**下一节**\n\n在当前示例中，我们尚未将所有代码都重构为 pointfree 的风格。还有一些代码是命令式的。大部分这种代码是处理对象和数组的。\n\n我们需要找到声明式的方式来处理对象和数组。Immutability (不变性) 怎么样？我们如何以 \"不变\" (immutable) 的方式来操作对象和数组呢？\n\n本系列的下一节，[数据不变性和对象](#todo: 需要下一节的链接) 将讨论如何以函数式和 immutable 的方式来处理对象。紧随其后的章节：[数据不变性和数组](#todo: 需要下下节的链接) 对数组也是相同的处理方式。\n","source":"_posts/Thinking-in-Ramda-Pointfree-Style.md","raw":"---\ntitle: 'Thinking in Ramda: Pointfree Style (无参数风格编程)'\ndate: 2017-06-13 21:27:05\ncategories: 'Thinking in Ramda'\n---\n\n译者注：本文翻译自 Randy Coulman 的 《[Thinking in Ramda: Pointfree Style](http://randycoulman.com/blog/2016/06/21/thinking-in-ramda-pointfree-style/)》，转载请与[原作者](https://github.com/randycoulman)或[本人](https://github.com/adispring)联系。下面开始正文。\n\n---\n\n本文是函数式编程系列文章：[Thinking in Ramda](https://adispring.coding.me/categories/Thinking-in-Ramda/) 的第五篇。\n\n在[第四节](https://adispring.coding.me/2017/06/11/Thinking-in-Ramda-Declarative-Programming/)中，我们讨论了如何用声明式编程（告诉计算机做什么，我们想要什么）代替命令式编程（告诉计算机该怎么做，详细的执行步骤）来编写代码。\n\n你可能已经注意到了，我们编写的几个函数（如 `forever21`、`alwaysDrivingAge`、`water`）都接受一个参数，构建一个新函数，然后将该函数作用于该参数。\n\n这是函数式编程里非常常见的一种模式，Ramda 同样提供了优化这种模式的方法。\n\n**Pointfree 风格（无参数风格）**\n\n我们在 [第三节](https://adispring.coding.me/2017/06/11/Thinking-in-Ramda-Partial-Application/) 中讨论了 Ramda 的两个指导原则：\n\n* 将数据放到参数列表的最后面。\n* 柯里化所有的东西。\n\n这两个原则衍生出了一种被函数式程序员称为 \"pointfree\" 的风格。我喜欢将 pointfree 的代码看作：\"数据？什么数据？这里没有数据！\"\n\n有一篇很好的博客：[Why Ramda?](http://fr.umio.us/why-ramda/)，展示了 pointfree 风格 真得不错。具体来说，它有一些有趣的标题，例如：\"数据在哪里？\"，\"好了，已经有了！\"，\"那么我可以看看数据吗？\" 和 \"拜托，我只是想要我的数据\"。\n\n我们还没有使用需要的工具来让所有的例子都变成完全 \"pointfree\" 的，现在就开始吧。\n\n再看一下 `forever21`：\n\n```js\nconst forever21 = age => ifElse(gte(__, 21), always(21), inc)(age)\n```\n\n注意，参数 `age` 出现了两次：一次在参数列表中；一次在函数的最后面：我们将由 `ifElse` 返回的新函数作用于 `age`。\n\n在使用 Ramda 编程时稍加留意，就会发现很多这种模式的代码。这也意味着，总应该有一种方法将这些函数转成 \"pointfree\" 风格。\n\n我们来看看这会是什么样子：\n\n```js\nconst forever21 = ifElse(gte(__, 21), always(21), inc)\n```\n\n嘭~~！我们刚刚让 `age` 消失了。这就是 Pointfree 风格。注意，这两个版本所做的事情完全一样。我们仍然返回一个接受年龄的函数，但并未显示的指定 `age` 参数。\n\n可以对 `alwaysDrivingAge` 和 `water` 进行相同的处理。\n\n原来的 `alwaysDrivingAge` 如下所示：\n\n```js\nconst alwaysDrivingAge = age => ifElse(lt(__, 16), always(16), identity)(age)\n```\n\n可以使用相同的方法使其变为 pointfree 的。\n\n```js\nconst alwaysDrivingAge = when(lt(__, 16), always(16))\n```\n\n下面是 `water` 原来的形式：\n\n```js\nconst water = temperature => cond([\n  [equals(0),   always('water freezes at 0°C')],\n  [equals(100), always('water boils at 100°C')],\n  [T,           temp => `nothing special happens at ${temp}°C`]\n])(temperature)\n```\n\n现在将其变为 pointfree 风格的：\n\n```js\nconst water = cond([\n  [equals(0),   always('water freezes at 0°C')],\n  [equals(100), always('water boils at 100°C')],\n  [T,           temp => `nothing special happens at ${temp}°C`]\n])\n```\n\n**多元函数（多参数函数）**\n\n如果函数接受多个参数会怎样呢？回顾一下 [第三节](https://adispring.coding.me/2017/06/11/Thinking-in-Ramda-Partial-Application/) 中的例子：`titlesForYear`。\n\n```js\nconst titlesForYear = curry((year, books) =>\n  pipe(\n    filter(publishedInYear(year)),\n    map(book => book.title)\n  )(books)\n)\n```\n\n注意，`books` 出现了两次：一次作为参数列表的最后一个参数（最后一个数据！）；一次出现在函数最后，当我们将其传入 pipeline 的时候。这跟我们之前看到参数为 `age` 的模式类似，所以可以对它进行相同的转换：\n\n```js\nconst titlesForYear = year =>\n  pipe(\n    filter(publishedInYear(year)),\n    map(book => book.title)\n  )\n```\n\n可以了！我们现在有了一个 pointfree 版本的 `titlesFroYear`。\n\n其实，这种情况下，我可能不会刻意追求 pointfree 风格，因为就像之前文章讨论过的：JavaScript 在调用一系列单参数函数方面并不方便。\n\n在 pipeline 中使用 `titleForYear` 是很方便，如我们可以很轻松的调用 `titlesForYear(2012)`，但当想要单独使用它时，我们就不得不回到之前文章里看到的形式 `)(`，对我而言，并不值得做出这种妥协（没必要为了 pointfree 而 pointfree）。\n\n但只要有如上形式的单参数函数（或者可能以后会被重构），我几乎总是写成 pointfree 风格的。\n\n**重构为 pointfree 风格的代码**\n\n有时我们的代码不会遵循这种模式。我们可能会在同一函数内多次对数据进行操作。\n\n在 [第二节](https://adispring.coding.me/2017/06/10/Thinking-in-Ramda-Combining-Functions/) 的几个例子中便是这种情形。我们使用诸如 `both`、`either`、`pipe`、`compose` 来重构代码。一旦我们这样做了，便会很容易让函数转换为 pointfree 风格的。\n\n我们来回顾一下 `isEligibleToVote` 这个例子，代码如下：\n\n```js\nconst wasBornInCountry = person => person.birthCountry === OUR_COUNTRY\nconst wasNaturalized = person => Boolean(person.naturalizationDate)\nconst isOver18 = person => person.age >= 18\n \nconst isCitizen = person => wasBornInCountry(person) || wasNaturalized(person)\n \nconst isEligibleToVote = person => isOver18(person) && isCitizen(person)\n```\n\n先从 `isCitizen` 开始。它接受一个 `person`, 然后将两个函数作用于该 `person`，将结果使用 `||` 组合起来。正如在 [第二节](https://adispring.coding.me/2017/06/10/Thinking-in-Ramda-Combining-Functions/) 中学到的，可以使用 `either` 将两个函数组合成一个新函数，然后将该组合函数作用于该 `person`。\n\n```js\nconst isCitizen = person => either(wasBornInCountry, wasNaturalized)(person)\n```\n\n可以使用 `both` 对 `isEligibleToVote` 做类似的处理。\n\n```js\nconst isEligibleToVote = person => both(isOver18, isCitizen)(person)\n```\n\n现在我们已经完成了这些重构，可以看到，这两个函数都遵循上面提到的模式：`person` 出现了两次，一次作为函数参数；一次放到最后，将组合函数作用其上。现在可以将它们重构为 pointfree 风格的代码：\n\n```js\nconst isCitizen = either(wasBornInCountry, wasNaturalized)\nconst isEligibleToVote = both(isOver18, isCitizen)\n```\n\n**为什么要这么做？**\n\nPointfree 风格需要一定的时间才能习惯。可能并不需要所有的地方都没有参数。有时候知道某些 Ramda 函数需要多少参数，也是很重要的。\n\n但是，一旦习惯了这种方式，它将变得非常强大：可以以非常有趣的方式将很多小的 pointfree 函数组合起来。\n\nPointfree 风格的优点是什么呢？人们可能会认为，这只不过是为了让函数式编程赢得 \"优点徽章\" 的学术活动而已（实际上并没有什么用处）。然而，我认为还是有一些优点的，即使需要花一些时间来习惯这种方式也是值得的：\n\n* 它让编程更简单、精练。这并不总是一件好事，但大部分情况下是这样的。\n* 它让算法更清晰。通过只关注正在组合的函数，我们可以在没有参数的干扰下，更好地了解发生了什么。\n* 它促使我们更专注于正在做的转换的本身，而不是正被转换的数据。\n* 它可以帮助我们将函数视为可以作用于不同数据的通用构建模块，而非对特定类型数据的操作。如果给数据一个名字，我们的思想便会被[禁锢](https://en.wikipedia.org/wiki/Anchoring)在：\"需要在哪里使用我们的函数\"；如果去掉参数，便会使我们更有创造力。\n\n**结论**\n\nPointfree 风格也被成为 [tacit 式编程](https://en.wikipedia.org/wiki/Tacit_programming)(隐含式编程)，可以使代码更清晰、更易于理解。通过代码重构将所有的转换组合成单一函数，我们最终会得到可以在更多地方使用的更小的构建块（函数）。\n\n**下一节**\n\n在当前示例中，我们尚未将所有代码都重构为 pointfree 的风格。还有一些代码是命令式的。大部分这种代码是处理对象和数组的。\n\n我们需要找到声明式的方式来处理对象和数组。Immutability (不变性) 怎么样？我们如何以 \"不变\" (immutable) 的方式来操作对象和数组呢？\n\n本系列的下一节，[数据不变性和对象](#todo: 需要下一节的链接) 将讨论如何以函数式和 immutable 的方式来处理对象。紧随其后的章节：[数据不变性和数组](#todo: 需要下下节的链接) 对数组也是相同的处理方式。\n","slug":"Thinking-in-Ramda-Pointfree-Style","published":1,"updated":"2017-06-15T01:09:15.000Z","_id":"cj3vm14h400073bs66iu5htpy","comments":1,"layout":"post","photos":[],"link":"","content":"<p>译者注：本文翻译自 Randy Coulman 的 《<a href=\"http://randycoulman.com/blog/2016/06/21/thinking-in-ramda-pointfree-style/\" target=\"_blank\" rel=\"external\">Thinking in Ramda: Pointfree Style</a>》，转载请与<a href=\"https://github.com/randycoulman\" target=\"_blank\" rel=\"external\">原作者</a>或<a href=\"https://github.com/adispring\" target=\"_blank\" rel=\"external\">本人</a>联系。下面开始正文。</p>\n<hr>\n<p>本文是函数式编程系列文章：<a href=\"https://adispring.coding.me/categories/Thinking-in-Ramda/\" target=\"_blank\" rel=\"external\">Thinking in Ramda</a> 的第五篇。</p>\n<p>在<a href=\"https://adispring.coding.me/2017/06/11/Thinking-in-Ramda-Declarative-Programming/\" target=\"_blank\" rel=\"external\">第四节</a>中，我们讨论了如何用声明式编程（告诉计算机做什么，我们想要什么）代替命令式编程（告诉计算机该怎么做，详细的执行步骤）来编写代码。</p>\n<p>你可能已经注意到了，我们编写的几个函数（如 <code>forever21</code>、<code>alwaysDrivingAge</code>、<code>water</code>）都接受一个参数，构建一个新函数，然后将该函数作用于该参数。</p>\n<p>这是函数式编程里非常常见的一种模式，Ramda 同样提供了优化这种模式的方法。</p>\n<p><strong>Pointfree 风格（无参数风格）</strong></p>\n<p>我们在 <a href=\"https://adispring.coding.me/2017/06/11/Thinking-in-Ramda-Partial-Application/\" target=\"_blank\" rel=\"external\">第三节</a> 中讨论了 Ramda 的两个指导原则：</p>\n<ul>\n<li>将数据放到参数列表的最后面。</li>\n<li>柯里化所有的东西。</li>\n</ul>\n<p>这两个原则衍生出了一种被函数式程序员称为 &quot;pointfree&quot; 的风格。我喜欢将 pointfree 的代码看作：&quot;数据？什么数据？这里没有数据！&quot;</p>\n<p>有一篇很好的博客：<a href=\"http://fr.umio.us/why-ramda/\" target=\"_blank\" rel=\"external\">Why Ramda?</a>，展示了 pointfree 风格 真得不错。具体来说，它有一些有趣的标题，例如：&quot;数据在哪里？&quot;，&quot;好了，已经有了！&quot;，&quot;那么我可以看看数据吗？&quot; 和 &quot;拜托，我只是想要我的数据&quot;。</p>\n<p>我们还没有使用需要的工具来让所有的例子都变成完全 &quot;pointfree&quot; 的，现在就开始吧。</p>\n<p>再看一下 <code>forever21</code>：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> forever21 = <span class=\"function\"><span class=\"params\">age</span> =&gt;</span> ifElse(gte(__, <span class=\"number\">21</span>), always(<span class=\"number\">21</span>), inc)(age)</div></pre></td></tr></table></figure></p>\n<p>注意，参数 <code>age</code> 出现了两次：一次在参数列表中；一次在函数的最后面：我们将由 <code>ifElse</code> 返回的新函数作用于 <code>age</code>。</p>\n<p>在使用 Ramda 编程时稍加留意，就会发现很多这种模式的代码。这也意味着，总应该有一种方法将这些函数转成 &quot;pointfree&quot; 风格。</p>\n<p>我们来看看这会是什么样子：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> forever21 = ifElse(gte(__, <span class=\"number\">21</span>), always(<span class=\"number\">21</span>), inc)</div></pre></td></tr></table></figure></p>\n<p>嘭~~！我们刚刚让 <code>age</code> 消失了。这就是 Pointfree 风格。注意，这两个版本所做的事情完全一样。我们仍然返回一个接受年龄的函数，但并未显示的指定 <code>age</code> 参数。</p>\n<p>可以对 <code>alwaysDrivingAge</code> 和 <code>water</code> 进行相同的处理。</p>\n<p>原来的 <code>alwaysDrivingAge</code> 如下所示：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> alwaysDrivingAge = <span class=\"function\"><span class=\"params\">age</span> =&gt;</span> ifElse(lt(__, <span class=\"number\">16</span>), always(<span class=\"number\">16</span>), identity)(age)</div></pre></td></tr></table></figure></p>\n<p>可以使用相同的方法使其变为 pointfree 的。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> alwaysDrivingAge = when(lt(__, <span class=\"number\">16</span>), always(<span class=\"number\">16</span>))</div></pre></td></tr></table></figure></p>\n<p>下面是 <code>water</code> 原来的形式：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> water = <span class=\"function\"><span class=\"params\">temperature</span> =&gt;</span> cond([</div><div class=\"line\">  [equals(<span class=\"number\">0</span>),   always(<span class=\"string\">'water freezes at 0°C'</span>)],</div><div class=\"line\">  [equals(<span class=\"number\">100</span>), always(<span class=\"string\">'water boils at 100°C'</span>)],</div><div class=\"line\">  [T,           temp =&gt; <span class=\"string\">`nothing special happens at <span class=\"subst\">$&#123;temp&#125;</span>°C`</span>]</div><div class=\"line\">])(temperature)</div></pre></td></tr></table></figure></p>\n<p>现在将其变为 pointfree 风格的：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> water = cond([</div><div class=\"line\">  [equals(<span class=\"number\">0</span>),   always(<span class=\"string\">'water freezes at 0°C'</span>)],</div><div class=\"line\">  [equals(<span class=\"number\">100</span>), always(<span class=\"string\">'water boils at 100°C'</span>)],</div><div class=\"line\">  [T,           temp =&gt; <span class=\"string\">`nothing special happens at <span class=\"subst\">$&#123;temp&#125;</span>°C`</span>]</div><div class=\"line\">])</div></pre></td></tr></table></figure></p>\n<p><strong>多元函数（多参数函数）</strong></p>\n<p>如果函数接受多个参数会怎样呢？回顾一下 <a href=\"https://adispring.coding.me/2017/06/11/Thinking-in-Ramda-Partial-Application/\" target=\"_blank\" rel=\"external\">第三节</a> 中的例子：<code>titlesForYear</code>。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> titlesForYear = curry(<span class=\"function\">(<span class=\"params\">year, books</span>) =&gt;</span></div><div class=\"line\">  pipe(</div><div class=\"line\">    filter(publishedInYear(year)),</div><div class=\"line\">    map(<span class=\"function\"><span class=\"params\">book</span> =&gt;</span> book.title)</div><div class=\"line\">  )(books)</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p>注意，<code>books</code> 出现了两次：一次作为参数列表的最后一个参数（最后一个数据！）；一次出现在函数最后，当我们将其传入 pipeline 的时候。这跟我们之前看到参数为 <code>age</code> 的模式类似，所以可以对它进行相同的转换：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> titlesForYear = <span class=\"function\"><span class=\"params\">year</span> =&gt;</span></div><div class=\"line\">  pipe(</div><div class=\"line\">    filter(publishedInYear(year)),</div><div class=\"line\">    map(<span class=\"function\"><span class=\"params\">book</span> =&gt;</span> book.title)</div><div class=\"line\">  )</div></pre></td></tr></table></figure></p>\n<p>可以了！我们现在有了一个 pointfree 版本的 <code>titlesFroYear</code>。</p>\n<p>其实，这种情况下，我可能不会刻意追求 pointfree 风格，因为就像之前文章讨论过的：JavaScript 在调用一系列单参数函数方面并不方便。</p>\n<p>在 pipeline 中使用 <code>titleForYear</code> 是很方便，如我们可以很轻松的调用 <code>titlesForYear(2012)</code>，但当想要单独使用它时，我们就不得不回到之前文章里看到的形式 <code>)(</code>，对我而言，并不值得做出这种妥协（没必要为了 pointfree 而 pointfree）。</p>\n<p>但只要有如上形式的单参数函数（或者可能以后会被重构），我几乎总是写成 pointfree 风格的。</p>\n<p><strong>重构为 pointfree 风格的代码</strong></p>\n<p>有时我们的代码不会遵循这种模式。我们可能会在同一函数内多次对数据进行操作。</p>\n<p>在 <a href=\"https://adispring.coding.me/2017/06/10/Thinking-in-Ramda-Combining-Functions/\" target=\"_blank\" rel=\"external\">第二节</a> 的几个例子中便是这种情形。我们使用诸如 <code>both</code>、<code>either</code>、<code>pipe</code>、<code>compose</code> 来重构代码。一旦我们这样做了，便会很容易让函数转换为 pointfree 风格的。</p>\n<p>我们来回顾一下 <code>isEligibleToVote</code> 这个例子，代码如下：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> wasBornInCountry = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> person.birthCountry === OUR_COUNTRY</div><div class=\"line\"><span class=\"keyword\">const</span> wasNaturalized = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> <span class=\"built_in\">Boolean</span>(person.naturalizationDate)</div><div class=\"line\"><span class=\"keyword\">const</span> isOver18 = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> person.age &gt;= <span class=\"number\">18</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> isCitizen = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> wasBornInCountry(person) || wasNaturalized(person)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> isEligibleToVote = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> isOver18(person) &amp;&amp; isCitizen(person)</div></pre></td></tr></table></figure></p>\n<p>先从 <code>isCitizen</code> 开始。它接受一个 <code>person</code>, 然后将两个函数作用于该 <code>person</code>，将结果使用 <code>||</code> 组合起来。正如在 <a href=\"https://adispring.coding.me/2017/06/10/Thinking-in-Ramda-Combining-Functions/\" target=\"_blank\" rel=\"external\">第二节</a> 中学到的，可以使用 <code>either</code> 将两个函数组合成一个新函数，然后将该组合函数作用于该 <code>person</code>。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> isCitizen = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> either(wasBornInCountry, wasNaturalized)(person)</div></pre></td></tr></table></figure></p>\n<p>可以使用 <code>both</code> 对 <code>isEligibleToVote</code> 做类似的处理。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> isEligibleToVote = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> both(isOver18, isCitizen)(person)</div></pre></td></tr></table></figure></p>\n<p>现在我们已经完成了这些重构，可以看到，这两个函数都遵循上面提到的模式：<code>person</code> 出现了两次，一次作为函数参数；一次放到最后，将组合函数作用其上。现在可以将它们重构为 pointfree 风格的代码：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> isCitizen = either(wasBornInCountry, wasNaturalized)</div><div class=\"line\"><span class=\"keyword\">const</span> isEligibleToVote = both(isOver18, isCitizen)</div></pre></td></tr></table></figure></p>\n<p><strong>为什么要这么做？</strong></p>\n<p>Pointfree 风格需要一定的时间才能习惯。可能并不需要所有的地方都没有参数。有时候知道某些 Ramda 函数需要多少参数，也是很重要的。</p>\n<p>但是，一旦习惯了这种方式，它将变得非常强大：可以以非常有趣的方式将很多小的 pointfree 函数组合起来。</p>\n<p>Pointfree 风格的优点是什么呢？人们可能会认为，这只不过是为了让函数式编程赢得 &quot;优点徽章&quot; 的学术活动而已（实际上并没有什么用处）。然而，我认为还是有一些优点的，即使需要花一些时间来习惯这种方式也是值得的：</p>\n<ul>\n<li>它让编程更简单、精练。这并不总是一件好事，但大部分情况下是这样的。</li>\n<li>它让算法更清晰。通过只关注正在组合的函数，我们可以在没有参数的干扰下，更好地了解发生了什么。</li>\n<li>它促使我们更专注于正在做的转换的本身，而不是正被转换的数据。</li>\n<li>它可以帮助我们将函数视为可以作用于不同数据的通用构建模块，而非对特定类型数据的操作。如果给数据一个名字，我们的思想便会被<a href=\"https://en.wikipedia.org/wiki/Anchoring\" target=\"_blank\" rel=\"external\">禁锢</a>在：&quot;需要在哪里使用我们的函数&quot;；如果去掉参数，便会使我们更有创造力。</li>\n</ul>\n<p><strong>结论</strong></p>\n<p>Pointfree 风格也被成为 <a href=\"https://en.wikipedia.org/wiki/Tacit_programming\" target=\"_blank\" rel=\"external\">tacit 式编程</a>(隐含式编程)，可以使代码更清晰、更易于理解。通过代码重构将所有的转换组合成单一函数，我们最终会得到可以在更多地方使用的更小的构建块（函数）。</p>\n<p><strong>下一节</strong></p>\n<p>在当前示例中，我们尚未将所有代码都重构为 pointfree 的风格。还有一些代码是命令式的。大部分这种代码是处理对象和数组的。</p>\n<p>我们需要找到声明式的方式来处理对象和数组。Immutability (不变性) 怎么样？我们如何以 &quot;不变&quot; (immutable) 的方式来操作对象和数组呢？</p>\n<p>本系列的下一节，[数据不变性和对象](#todo: 需要下一节的链接) 将讨论如何以函数式和 immutable 的方式来处理对象。紧随其后的章节：[数据不变性和数组](#todo: 需要下下节的链接) 对数组也是相同的处理方式。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>译者注：本文翻译自 Randy Coulman 的 《<a href=\"http://randycoulman.com/blog/2016/06/21/thinking-in-ramda-pointfree-style/\" target=\"_blank\" rel=\"external\">Thinking in Ramda: Pointfree Style</a>》，转载请与<a href=\"https://github.com/randycoulman\" target=\"_blank\" rel=\"external\">原作者</a>或<a href=\"https://github.com/adispring\" target=\"_blank\" rel=\"external\">本人</a>联系。下面开始正文。</p>\n<hr>\n<p>本文是函数式编程系列文章：<a href=\"https://adispring.coding.me/categories/Thinking-in-Ramda/\" target=\"_blank\" rel=\"external\">Thinking in Ramda</a> 的第五篇。</p>\n<p>在<a href=\"https://adispring.coding.me/2017/06/11/Thinking-in-Ramda-Declarative-Programming/\" target=\"_blank\" rel=\"external\">第四节</a>中，我们讨论了如何用声明式编程（告诉计算机做什么，我们想要什么）代替命令式编程（告诉计算机该怎么做，详细的执行步骤）来编写代码。</p>\n<p>你可能已经注意到了，我们编写的几个函数（如 <code>forever21</code>、<code>alwaysDrivingAge</code>、<code>water</code>）都接受一个参数，构建一个新函数，然后将该函数作用于该参数。</p>\n<p>这是函数式编程里非常常见的一种模式，Ramda 同样提供了优化这种模式的方法。</p>\n<p><strong>Pointfree 风格（无参数风格）</strong></p>\n<p>我们在 <a href=\"https://adispring.coding.me/2017/06/11/Thinking-in-Ramda-Partial-Application/\" target=\"_blank\" rel=\"external\">第三节</a> 中讨论了 Ramda 的两个指导原则：</p>\n<ul>\n<li>将数据放到参数列表的最后面。</li>\n<li>柯里化所有的东西。</li>\n</ul>\n<p>这两个原则衍生出了一种被函数式程序员称为 &quot;pointfree&quot; 的风格。我喜欢将 pointfree 的代码看作：&quot;数据？什么数据？这里没有数据！&quot;</p>\n<p>有一篇很好的博客：<a href=\"http://fr.umio.us/why-ramda/\" target=\"_blank\" rel=\"external\">Why Ramda?</a>，展示了 pointfree 风格 真得不错。具体来说，它有一些有趣的标题，例如：&quot;数据在哪里？&quot;，&quot;好了，已经有了！&quot;，&quot;那么我可以看看数据吗？&quot; 和 &quot;拜托，我只是想要我的数据&quot;。</p>\n<p>我们还没有使用需要的工具来让所有的例子都变成完全 &quot;pointfree&quot; 的，现在就开始吧。</p>\n<p>再看一下 <code>forever21</code>：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> forever21 = <span class=\"function\"><span class=\"params\">age</span> =&gt;</span> ifElse(gte(__, <span class=\"number\">21</span>), always(<span class=\"number\">21</span>), inc)(age)</div></pre></td></tr></table></figure></p>\n<p>注意，参数 <code>age</code> 出现了两次：一次在参数列表中；一次在函数的最后面：我们将由 <code>ifElse</code> 返回的新函数作用于 <code>age</code>。</p>\n<p>在使用 Ramda 编程时稍加留意，就会发现很多这种模式的代码。这也意味着，总应该有一种方法将这些函数转成 &quot;pointfree&quot; 风格。</p>\n<p>我们来看看这会是什么样子：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> forever21 = ifElse(gte(__, <span class=\"number\">21</span>), always(<span class=\"number\">21</span>), inc)</div></pre></td></tr></table></figure></p>\n<p>嘭~~！我们刚刚让 <code>age</code> 消失了。这就是 Pointfree 风格。注意，这两个版本所做的事情完全一样。我们仍然返回一个接受年龄的函数，但并未显示的指定 <code>age</code> 参数。</p>\n<p>可以对 <code>alwaysDrivingAge</code> 和 <code>water</code> 进行相同的处理。</p>\n<p>原来的 <code>alwaysDrivingAge</code> 如下所示：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> alwaysDrivingAge = <span class=\"function\"><span class=\"params\">age</span> =&gt;</span> ifElse(lt(__, <span class=\"number\">16</span>), always(<span class=\"number\">16</span>), identity)(age)</div></pre></td></tr></table></figure></p>\n<p>可以使用相同的方法使其变为 pointfree 的。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> alwaysDrivingAge = when(lt(__, <span class=\"number\">16</span>), always(<span class=\"number\">16</span>))</div></pre></td></tr></table></figure></p>\n<p>下面是 <code>water</code> 原来的形式：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> water = <span class=\"function\"><span class=\"params\">temperature</span> =&gt;</span> cond([</div><div class=\"line\">  [equals(<span class=\"number\">0</span>),   always(<span class=\"string\">'water freezes at 0°C'</span>)],</div><div class=\"line\">  [equals(<span class=\"number\">100</span>), always(<span class=\"string\">'water boils at 100°C'</span>)],</div><div class=\"line\">  [T,           temp =&gt; <span class=\"string\">`nothing special happens at <span class=\"subst\">$&#123;temp&#125;</span>°C`</span>]</div><div class=\"line\">])(temperature)</div></pre></td></tr></table></figure></p>\n<p>现在将其变为 pointfree 风格的：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> water = cond([</div><div class=\"line\">  [equals(<span class=\"number\">0</span>),   always(<span class=\"string\">'water freezes at 0°C'</span>)],</div><div class=\"line\">  [equals(<span class=\"number\">100</span>), always(<span class=\"string\">'water boils at 100°C'</span>)],</div><div class=\"line\">  [T,           temp =&gt; <span class=\"string\">`nothing special happens at <span class=\"subst\">$&#123;temp&#125;</span>°C`</span>]</div><div class=\"line\">])</div></pre></td></tr></table></figure></p>\n<p><strong>多元函数（多参数函数）</strong></p>\n<p>如果函数接受多个参数会怎样呢？回顾一下 <a href=\"https://adispring.coding.me/2017/06/11/Thinking-in-Ramda-Partial-Application/\" target=\"_blank\" rel=\"external\">第三节</a> 中的例子：<code>titlesForYear</code>。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> titlesForYear = curry(<span class=\"function\">(<span class=\"params\">year, books</span>) =&gt;</span></div><div class=\"line\">  pipe(</div><div class=\"line\">    filter(publishedInYear(year)),</div><div class=\"line\">    map(<span class=\"function\"><span class=\"params\">book</span> =&gt;</span> book.title)</div><div class=\"line\">  )(books)</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p>注意，<code>books</code> 出现了两次：一次作为参数列表的最后一个参数（最后一个数据！）；一次出现在函数最后，当我们将其传入 pipeline 的时候。这跟我们之前看到参数为 <code>age</code> 的模式类似，所以可以对它进行相同的转换：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> titlesForYear = <span class=\"function\"><span class=\"params\">year</span> =&gt;</span></div><div class=\"line\">  pipe(</div><div class=\"line\">    filter(publishedInYear(year)),</div><div class=\"line\">    map(<span class=\"function\"><span class=\"params\">book</span> =&gt;</span> book.title)</div><div class=\"line\">  )</div></pre></td></tr></table></figure></p>\n<p>可以了！我们现在有了一个 pointfree 版本的 <code>titlesFroYear</code>。</p>\n<p>其实，这种情况下，我可能不会刻意追求 pointfree 风格，因为就像之前文章讨论过的：JavaScript 在调用一系列单参数函数方面并不方便。</p>\n<p>在 pipeline 中使用 <code>titleForYear</code> 是很方便，如我们可以很轻松的调用 <code>titlesForYear(2012)</code>，但当想要单独使用它时，我们就不得不回到之前文章里看到的形式 <code>)(</code>，对我而言，并不值得做出这种妥协（没必要为了 pointfree 而 pointfree）。</p>\n<p>但只要有如上形式的单参数函数（或者可能以后会被重构），我几乎总是写成 pointfree 风格的。</p>\n<p><strong>重构为 pointfree 风格的代码</strong></p>\n<p>有时我们的代码不会遵循这种模式。我们可能会在同一函数内多次对数据进行操作。</p>\n<p>在 <a href=\"https://adispring.coding.me/2017/06/10/Thinking-in-Ramda-Combining-Functions/\" target=\"_blank\" rel=\"external\">第二节</a> 的几个例子中便是这种情形。我们使用诸如 <code>both</code>、<code>either</code>、<code>pipe</code>、<code>compose</code> 来重构代码。一旦我们这样做了，便会很容易让函数转换为 pointfree 风格的。</p>\n<p>我们来回顾一下 <code>isEligibleToVote</code> 这个例子，代码如下：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> wasBornInCountry = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> person.birthCountry === OUR_COUNTRY</div><div class=\"line\"><span class=\"keyword\">const</span> wasNaturalized = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> <span class=\"built_in\">Boolean</span>(person.naturalizationDate)</div><div class=\"line\"><span class=\"keyword\">const</span> isOver18 = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> person.age &gt;= <span class=\"number\">18</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> isCitizen = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> wasBornInCountry(person) || wasNaturalized(person)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">const</span> isEligibleToVote = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> isOver18(person) &amp;&amp; isCitizen(person)</div></pre></td></tr></table></figure></p>\n<p>先从 <code>isCitizen</code> 开始。它接受一个 <code>person</code>, 然后将两个函数作用于该 <code>person</code>，将结果使用 <code>||</code> 组合起来。正如在 <a href=\"https://adispring.coding.me/2017/06/10/Thinking-in-Ramda-Combining-Functions/\" target=\"_blank\" rel=\"external\">第二节</a> 中学到的，可以使用 <code>either</code> 将两个函数组合成一个新函数，然后将该组合函数作用于该 <code>person</code>。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> isCitizen = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> either(wasBornInCountry, wasNaturalized)(person)</div></pre></td></tr></table></figure></p>\n<p>可以使用 <code>both</code> 对 <code>isEligibleToVote</code> 做类似的处理。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> isEligibleToVote = <span class=\"function\"><span class=\"params\">person</span> =&gt;</span> both(isOver18, isCitizen)(person)</div></pre></td></tr></table></figure></p>\n<p>现在我们已经完成了这些重构，可以看到，这两个函数都遵循上面提到的模式：<code>person</code> 出现了两次，一次作为函数参数；一次放到最后，将组合函数作用其上。现在可以将它们重构为 pointfree 风格的代码：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> isCitizen = either(wasBornInCountry, wasNaturalized)</div><div class=\"line\"><span class=\"keyword\">const</span> isEligibleToVote = both(isOver18, isCitizen)</div></pre></td></tr></table></figure></p>\n<p><strong>为什么要这么做？</strong></p>\n<p>Pointfree 风格需要一定的时间才能习惯。可能并不需要所有的地方都没有参数。有时候知道某些 Ramda 函数需要多少参数，也是很重要的。</p>\n<p>但是，一旦习惯了这种方式，它将变得非常强大：可以以非常有趣的方式将很多小的 pointfree 函数组合起来。</p>\n<p>Pointfree 风格的优点是什么呢？人们可能会认为，这只不过是为了让函数式编程赢得 &quot;优点徽章&quot; 的学术活动而已（实际上并没有什么用处）。然而，我认为还是有一些优点的，即使需要花一些时间来习惯这种方式也是值得的：</p>\n<ul>\n<li>它让编程更简单、精练。这并不总是一件好事，但大部分情况下是这样的。</li>\n<li>它让算法更清晰。通过只关注正在组合的函数，我们可以在没有参数的干扰下，更好地了解发生了什么。</li>\n<li>它促使我们更专注于正在做的转换的本身，而不是正被转换的数据。</li>\n<li>它可以帮助我们将函数视为可以作用于不同数据的通用构建模块，而非对特定类型数据的操作。如果给数据一个名字，我们的思想便会被<a href=\"https://en.wikipedia.org/wiki/Anchoring\" target=\"_blank\" rel=\"external\">禁锢</a>在：&quot;需要在哪里使用我们的函数&quot;；如果去掉参数，便会使我们更有创造力。</li>\n</ul>\n<p><strong>结论</strong></p>\n<p>Pointfree 风格也被成为 <a href=\"https://en.wikipedia.org/wiki/Tacit_programming\" target=\"_blank\" rel=\"external\">tacit 式编程</a>(隐含式编程)，可以使代码更清晰、更易于理解。通过代码重构将所有的转换组合成单一函数，我们最终会得到可以在更多地方使用的更小的构建块（函数）。</p>\n<p><strong>下一节</strong></p>\n<p>在当前示例中，我们尚未将所有代码都重构为 pointfree 的风格。还有一些代码是命令式的。大部分这种代码是处理对象和数组的。</p>\n<p>我们需要找到声明式的方式来处理对象和数组。Immutability (不变性) 怎么样？我们如何以 &quot;不变&quot; (immutable) 的方式来操作对象和数组呢？</p>\n<p>本系列的下一节，[数据不变性和对象](#todo: 需要下一节的链接) 将讨论如何以函数式和 immutable 的方式来处理对象。紧随其后的章节：[数据不变性和数组](#todo: 需要下下节的链接) 对数组也是相同的处理方式。</p>\n"},{"title":"Ramda 源码分析（二） map reduce filter","date":"2016-10-23T01:43:20.000Z","_content":"\nmap、reduce 和 filter 是函数式编程中用到频率非常高的三个函数，对类Array 类型操作非常方便，被称为 FP 中的三板斧。还有几个相关的稍微复杂的函数也一并介绍： chain（flattenMap）、transduce、into、reduced。\n\n## 图解 map/reduce/filter \n\n虽然这是 [Underscore](http://underscorejs.org/) 方式的写法，但不影响对三个概念的理解.\n\n![map/reduce/filter](./mapFilterReduce.jpg)\n\n## 源码分析\n\n- map\n\n  \n  ```js\n  module.exports = _curry2(_dispatchable('map', _xmap, function map(fn, functor) {\n    switch (Object.prototype.toString.call(functor)) {\n      case '[object Function]':\n        return curryN(functor.length, function() {\n          return fn.call(this, functor.apply(this, arguments));\n        });\n      case '[object Object]':\n        return _reduce(function(acc, key) {\n          acc[key] = fn(functor[key]);\n          return acc;\n        }, {}, keys(functor));\n      default:\n        return _map(fn, functor);\n    }\n  }));\n  ```\n","source":"_posts/Ramda-map-filter-reduce-transduce.md","raw":"---\ntitle: Ramda 源码分析（二） map reduce filter\ndate: 2016-10-23 09:43:20\ntags:\n---\n\nmap、reduce 和 filter 是函数式编程中用到频率非常高的三个函数，对类Array 类型操作非常方便，被称为 FP 中的三板斧。还有几个相关的稍微复杂的函数也一并介绍： chain（flattenMap）、transduce、into、reduced。\n\n## 图解 map/reduce/filter \n\n虽然这是 [Underscore](http://underscorejs.org/) 方式的写法，但不影响对三个概念的理解.\n\n![map/reduce/filter](./mapFilterReduce.jpg)\n\n## 源码分析\n\n- map\n\n  \n  ```js\n  module.exports = _curry2(_dispatchable('map', _xmap, function map(fn, functor) {\n    switch (Object.prototype.toString.call(functor)) {\n      case '[object Function]':\n        return curryN(functor.length, function() {\n          return fn.call(this, functor.apply(this, arguments));\n        });\n      case '[object Object]':\n        return _reduce(function(acc, key) {\n          acc[key] = fn(functor[key]);\n          return acc;\n        }, {}, keys(functor));\n      default:\n        return _map(fn, functor);\n    }\n  }));\n  ```\n","slug":"Ramda-map-filter-reduce-transduce","published":1,"updated":"2016-10-23T14:53:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3vm14h500083bs6r7ce0h0z","content":"<p>map、reduce 和 filter 是函数式编程中用到频率非常高的三个函数，对类Array 类型操作非常方便，被称为 FP 中的三板斧。还有几个相关的稍微复杂的函数也一并介绍： chain（flattenMap）、transduce、into、reduced。</p>\n<h2 id=\"tu-jie-map-reduce-filter\">图解 map/reduce/filter</h2>\n<p>虽然这是 <a href=\"http://underscorejs.org/\" target=\"_blank\" rel=\"external\">Underscore</a> 方式的写法，但不影响对三个概念的理解.</p>\n<p><img src=\"./mapFilterReduce.jpg\" alt=\"map/reduce/filter\"></p>\n<h2 id=\"yuan-ma-fen-xi\">源码分析</h2>\n<ul>\n<li>map</li>\n</ul>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = _curry2(_dispatchable(<span class=\"string\">'map'</span>, _xmap, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">map</span>(<span class=\"params\">fn, functor</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(functor)) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'[object Function]'</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> curryN(functor.length, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> fn.call(<span class=\"keyword\">this</span>, functor.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>));</div><div class=\"line\">      &#125;);</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'[object Object]'</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> _reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">acc, key</span>) </span>&#123;</div><div class=\"line\">        acc[key] = fn(functor[key]);</div><div class=\"line\">        <span class=\"keyword\">return</span> acc;</div><div class=\"line\">      &#125;, &#123;&#125;, keys(functor));</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> _map(fn, functor);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;));</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>map、reduce 和 filter 是函数式编程中用到频率非常高的三个函数，对类Array 类型操作非常方便，被称为 FP 中的三板斧。还有几个相关的稍微复杂的函数也一并介绍： chain（flattenMap）、transduce、into、reduced。</p>\n<h2 id=\"tu-jie-map-reduce-filter\">图解 map/reduce/filter</h2>\n<p>虽然这是 <a href=\"http://underscorejs.org/\" target=\"_blank\" rel=\"external\">Underscore</a> 方式的写法，但不影响对三个概念的理解.</p>\n<p><img src=\"./mapFilterReduce.jpg\" alt=\"map/reduce/filter\"></p>\n<h2 id=\"yuan-ma-fen-xi\">源码分析</h2>\n<ul>\n<li>map</li>\n</ul>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = _curry2(_dispatchable(<span class=\"string\">'map'</span>, _xmap, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">map</span>(<span class=\"params\">fn, functor</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(functor)) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'[object Function]'</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> curryN(functor.length, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> fn.call(<span class=\"keyword\">this</span>, functor.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>));</div><div class=\"line\">      &#125;);</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'[object Object]'</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> _reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">acc, key</span>) </span>&#123;</div><div class=\"line\">        acc[key] = fn(functor[key]);</div><div class=\"line\">        <span class=\"keyword\">return</span> acc;</div><div class=\"line\">      &#125;, &#123;&#125;, keys(functor));</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> _map(fn, functor);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;));</div></pre></td></tr></table></figure></p>\n"},{"title":"Hexo Workflow","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\n### Generate & Deploy together\n\n``` bash\n$ hexo d -g\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hexo Workflow\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\n### Generate & Deploy together\n\n``` bash\n$ hexo d -g\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-10-23T01:39:00.000Z","updated":"2017-06-10T05:07:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3vm14ha000a3bs6sg0k45i4","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"quick-start\">Quick Start</h2>\n<h3 id=\"create-a-new-post\">Create a new post</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure></p>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"run-server\">Run server</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure></p>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"generate-static-files\">Generate static files</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure></p>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\">Deploy to remote sites</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure></p>\n<h3 id=\"generate-amp-deploy-together\">Generate &amp; Deploy together</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo d -g</div></pre></td></tr></table></figure></p>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"quick-start\">Quick Start</h2>\n<h3 id=\"create-a-new-post\">Create a new post</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure></p>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"run-server\">Run server</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure></p>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"generate-static-files\">Generate static files</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure></p>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\">Deploy to remote sites</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure></p>\n<h3 id=\"generate-amp-deploy-together\">Generate &amp; Deploy together</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo d -g</div></pre></td></tr></table></figure></p>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"Thinking in Ramda: 入门","date":"2017-06-09T13:45:47.000Z","_content":"\n译者注：本文翻译自 Randy Coulman 的 《[Thinking in Ramda: Getting Started](http://randycoulman.com/blog/2016/05/24/thinking-in-ramda-getting-started/)》，转载请与[原作者](https://github.com/randycoulman)或[本人](https://github.com/adispring)联系。下面开始正文。\n\n---\n\n本文是函数式编程系列文章：[Thinking in Ramda](https://adispring.coding.me/categories/Thinking-in-Ramda/) 的第一篇。\n\n本系列文章使用 [Ramda](http://ramda.cn) JavaScript 库进行演示。许多理论、方法同样适用于其他函数式 JavaScript 库，如 [Underscore](http://underscorejs.org/) 和 [Lodash](https://lodash.com/)。\n\n我将尽量用通俗、非学术性的语言演示函数式编程。一方面想让更多的人理解该系列文章；另一方面本人在函数式编程方面造诣尚浅。\n\n**Ramda**\n\n我已经在博客中多次提到过 [Ramda](http://ramda.cn) JavaScript 库：\n\n* 在 [Using Ramda With Redux](http://randycoulman.com/blog/2016/02/16/using-ramda-with-redux/) 中，展示了在编写 [Redux](http://redux.js.org/) 应用程序时如何运用 Ramda 的例子。\n* 在 [Using Redux-api-middleware With Rails](http://randycoulman.com/blog/2016/04/19/using-redux-api-middleware-with-rails/) 中，我使用 Ramda 来转换请求和响应的数据。\n\n我发现 Ramda 是一个精心设计的库：包含许多 API ，来简洁、优雅进行 JavaScript 函数式编程。\n\n如果你想在阅读本系列文章时进行 Ramda 实验，Ramda 网站有一个 [repl 运行环境](http://ramda.cn/repl/) 。\n\n**函数**\n\n正如名字所示，函数式编程与函数有很大的关系。为了演示，我们定义一个函数为一段可重用的代码：接受 0 到多个参数，返回单个值。\n\n下面是一个简单的 JavaScript 函数：\n\n```js\nfunction double(x) {\n  return x * 2\n}\n```\n\n使用 ES6 箭头函数，可以以更简洁的方式实现相同的函数。现在就提一下，是因为在接下来会大量用到箭头函数：\n\n```js\nconst double = x => x * 2\n```\n\n几乎每种语言都会支持函数调用。\n\n有些语言更进一步，将函数视为一等公民：可以像使用普通类型的值的方式使用函数。例如：\n\n* 使用变量或常量引用函数\n* 将函数作为参数传递给其他函数\n* 将函数作为其他函数的返回值\n\nJavaScript 就是一种这样的语言，我们将利用它的这一优势进行编程。\n\n**纯函数**\n\n在进行函数式编程时，使用所谓的 \"纯\" 函数进行工作将变得非常重要。\n\n[纯函数](https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch3.html)是没有副作用的函数。它不会给任何外部变量赋值，不会获取输入，不会产生 \"输出\"，不会对数据库进行读写，不会修改输入参数等。\n\n纯函数的基本思想是：相同的输入，永远会得到相同的输出。\n\n当然可以用非纯函数编程（而且这也是必须的，如果想让程序做任何有趣的事情），但在大多数情况下，需要保持大部分函数是纯函数。（译者注：并不是说，要禁止使用一切副作用，而是说，要让它们在可控的范围内发生）\n\n**IMMUTABILITY**\n\n函数式编程的另一个重要概念是 \"Immutability\"。什么意思呢？\"Immutability\" 是指 \"数据不变性\"。\n\n当以 immutable 方式工作时，一旦定义了某个值或对象，以后就再也不会改变它了。这意味着不能更改已有数组中的元素或对象中的属性。\n\n如果想改变数组或对象中的元素时，需要返回一份带有更改值的新拷贝。后面文章将会对此做详细介绍。\n\nImmutability 和 纯函数息息相关。由于纯函数不允许有副作用，所以不允许更改函数体外部的数据结构。纯函数强制以 immutable 的方式处理数据。\n\n**从哪里开始呢？**\n\n开始以函数式思维思考最简单的方式是，使用集合迭代函数代替循环。\n\n如果用过具备这些特性的其他语言（如 Ruby、Smalltalk），你可能已经熟悉了这些特性。\n\nMartin Fowler 有几篇关于 \"Collection PipeLines\" 非常好的文章，展示了[如何使用这些函数](https://martinfowler.com/articles/collection-pipeline/) 以及[如何将现有代码重构为 collection pipelines](https://martinfowler.com/articles/refactoring-pipelines.html)。\n\n注意，所有这些函数 `Array.prototype` 都有（除了 `reject`）。因此不需要 Ramda 也可以使用它们。但是，为了保持和本系列其他文章一致，本文将使用 Ramda 版本的函数。\n\n**foreach**\n\n不必写显式的循环，而是用 `forEach` 函数代替循环。示例如下：\n\n```js\n// Replace this:\nfor (const value of myArray) {\n  console.log(value)\n}\n \n// with:\nforEach(value => console.log(value), myArray)\n```\n\n`forEach` 接受一个函数和一个数组，然后将函数作用于数组的每个元素。\n\n虽然 `forEach` 是这些函数中最简单的，但在函数式编程中它可能是最少用到的一个。`forEach` 没有返回值，所以只能用在有副作用的函数调用中。\n\n**map**\n\n下一个要学习的最重要的函数是 `map`。类似于 `forEach`，`map` 也是将函数作用于数组的每个元素。但与 `forEach` 不同的是，`map` 将函数的每个返回值组成一个新数组，并将其返回。示例如下：\n\n```js\nmap(x => x * 2, [1, 2, 3]) //=> [2, 4, 6]\n```\n\n这里使用了匿名函数，但我们也可以在这里使用具名函数：\n\n```js\nconst double = x => x * 2\nmap(double, [1, 2, 3])\n```\n\n**filter/reject**\n\n接下来，我们来看看 `filter` 和 `reject`。就像名字所示，`filter` 会根据断言函数的返回值从数组中选择元素，例如：\n\n```js\nconst isEven = x => x % 2 === 0\nfilter(isEven, [1, 2, 3, 4]) //=> [2, 4]\n```\n\n`filter` 将断言函数（本例中为 `isEven`）作用于数组中的每个元素。每当断言函数返回 \"真值\" 时，相应的元素将包含到结果中；反之当断言函数返回为 \"falsy\" 值时，相应的元素将从结果数组中排除掉（过滤掉）。\n\n`reject` 是 `filter` 的补操作。它保留使断言函数返回 \"falsy\" 的元素，排除使断言函数返回 \"truthy\" 的元素。\n\n```js\nreject(isEven, [1, 2, 3, 4]) //=> [1, 3]\n````\n\n**find**\n\n`find` 将断言函数作用于数组中的每个元素，并返回第一个使断言函数返回真值的元素。\n\n```js\nfind(isEven, [1, 2, 3, 4]) //=> 2 \n```\n\n**reduce**\n\n`reduce` 比之前遇到的其他函数要复杂一些。了解它是值得的，但如果刚开始不太好理解，不要被它挡住。你可以在理解它之前继续学习其他知识。\n\n`reduce` 接受一个二元函数(`reducing function`)、一个初始值和待处理的数组。\n\n归约函数的第一个参数称为 \"accumulator\" (累加值)，第二个参数取自数组中的元素；返回值为一个新的 \"accumulator\"。\n\n先来看一个示例，然后看看会发生什么。\n\n```js\nconst add = (accum, value) => accum + value\n\nreduce(add, 5, [1, 2, 3, 4]) //=> 15\n```\n\n1. `reduce` 首先将初始值 `5` 和 数组中的首个元素 `1` 传入归约函数 `add`，`add` 返回一个新的累加值：`5 + 1 = 6`。\n2. `reduce` 再次调用 `add`，这次使用新的累加值 `6` 和 数组中的下一个元素 `2` 作为参数，`add` 返回 `8`。\n3. `reduce` 再次使用 `8` 和 数组中的下个元素 `3` 来调用 `add`，输出 `11`。\n4. `reduce` 最后一次调用 `add`，使用 `11` 和 数组中的最后一个元素 `4` ，输出 `15`。\n5. `reduce` 将最终累加值 `15` 作为结果返回。\n\n**结论**\n\n从这些集合迭代函数开始，需要逐渐习惯将函数传入其他函数的编程方式。你可能在其他语言中用过，但没有意识到正在做函数式编程。\n\n**下一节**\n\n本系列的下一篇文章，[函数组合](https://adispring.coding.me/2017/06/10/Thinking-in-Ramda-Combining-Functions/) 将演示怎样以新的、有趣的方式对函数进行组合。\n","source":"_posts/Thinking-in-Ramda-入门.md","raw":"---\ntitle: 'Thinking in Ramda: 入门'\ndate: 2017-06-09 21:45:47\ncategories: 'Thinking in Ramda'\n---\n\n译者注：本文翻译自 Randy Coulman 的 《[Thinking in Ramda: Getting Started](http://randycoulman.com/blog/2016/05/24/thinking-in-ramda-getting-started/)》，转载请与[原作者](https://github.com/randycoulman)或[本人](https://github.com/adispring)联系。下面开始正文。\n\n---\n\n本文是函数式编程系列文章：[Thinking in Ramda](https://adispring.coding.me/categories/Thinking-in-Ramda/) 的第一篇。\n\n本系列文章使用 [Ramda](http://ramda.cn) JavaScript 库进行演示。许多理论、方法同样适用于其他函数式 JavaScript 库，如 [Underscore](http://underscorejs.org/) 和 [Lodash](https://lodash.com/)。\n\n我将尽量用通俗、非学术性的语言演示函数式编程。一方面想让更多的人理解该系列文章；另一方面本人在函数式编程方面造诣尚浅。\n\n**Ramda**\n\n我已经在博客中多次提到过 [Ramda](http://ramda.cn) JavaScript 库：\n\n* 在 [Using Ramda With Redux](http://randycoulman.com/blog/2016/02/16/using-ramda-with-redux/) 中，展示了在编写 [Redux](http://redux.js.org/) 应用程序时如何运用 Ramda 的例子。\n* 在 [Using Redux-api-middleware With Rails](http://randycoulman.com/blog/2016/04/19/using-redux-api-middleware-with-rails/) 中，我使用 Ramda 来转换请求和响应的数据。\n\n我发现 Ramda 是一个精心设计的库：包含许多 API ，来简洁、优雅进行 JavaScript 函数式编程。\n\n如果你想在阅读本系列文章时进行 Ramda 实验，Ramda 网站有一个 [repl 运行环境](http://ramda.cn/repl/) 。\n\n**函数**\n\n正如名字所示，函数式编程与函数有很大的关系。为了演示，我们定义一个函数为一段可重用的代码：接受 0 到多个参数，返回单个值。\n\n下面是一个简单的 JavaScript 函数：\n\n```js\nfunction double(x) {\n  return x * 2\n}\n```\n\n使用 ES6 箭头函数，可以以更简洁的方式实现相同的函数。现在就提一下，是因为在接下来会大量用到箭头函数：\n\n```js\nconst double = x => x * 2\n```\n\n几乎每种语言都会支持函数调用。\n\n有些语言更进一步，将函数视为一等公民：可以像使用普通类型的值的方式使用函数。例如：\n\n* 使用变量或常量引用函数\n* 将函数作为参数传递给其他函数\n* 将函数作为其他函数的返回值\n\nJavaScript 就是一种这样的语言，我们将利用它的这一优势进行编程。\n\n**纯函数**\n\n在进行函数式编程时，使用所谓的 \"纯\" 函数进行工作将变得非常重要。\n\n[纯函数](https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch3.html)是没有副作用的函数。它不会给任何外部变量赋值，不会获取输入，不会产生 \"输出\"，不会对数据库进行读写，不会修改输入参数等。\n\n纯函数的基本思想是：相同的输入，永远会得到相同的输出。\n\n当然可以用非纯函数编程（而且这也是必须的，如果想让程序做任何有趣的事情），但在大多数情况下，需要保持大部分函数是纯函数。（译者注：并不是说，要禁止使用一切副作用，而是说，要让它们在可控的范围内发生）\n\n**IMMUTABILITY**\n\n函数式编程的另一个重要概念是 \"Immutability\"。什么意思呢？\"Immutability\" 是指 \"数据不变性\"。\n\n当以 immutable 方式工作时，一旦定义了某个值或对象，以后就再也不会改变它了。这意味着不能更改已有数组中的元素或对象中的属性。\n\n如果想改变数组或对象中的元素时，需要返回一份带有更改值的新拷贝。后面文章将会对此做详细介绍。\n\nImmutability 和 纯函数息息相关。由于纯函数不允许有副作用，所以不允许更改函数体外部的数据结构。纯函数强制以 immutable 的方式处理数据。\n\n**从哪里开始呢？**\n\n开始以函数式思维思考最简单的方式是，使用集合迭代函数代替循环。\n\n如果用过具备这些特性的其他语言（如 Ruby、Smalltalk），你可能已经熟悉了这些特性。\n\nMartin Fowler 有几篇关于 \"Collection PipeLines\" 非常好的文章，展示了[如何使用这些函数](https://martinfowler.com/articles/collection-pipeline/) 以及[如何将现有代码重构为 collection pipelines](https://martinfowler.com/articles/refactoring-pipelines.html)。\n\n注意，所有这些函数 `Array.prototype` 都有（除了 `reject`）。因此不需要 Ramda 也可以使用它们。但是，为了保持和本系列其他文章一致，本文将使用 Ramda 版本的函数。\n\n**foreach**\n\n不必写显式的循环，而是用 `forEach` 函数代替循环。示例如下：\n\n```js\n// Replace this:\nfor (const value of myArray) {\n  console.log(value)\n}\n \n// with:\nforEach(value => console.log(value), myArray)\n```\n\n`forEach` 接受一个函数和一个数组，然后将函数作用于数组的每个元素。\n\n虽然 `forEach` 是这些函数中最简单的，但在函数式编程中它可能是最少用到的一个。`forEach` 没有返回值，所以只能用在有副作用的函数调用中。\n\n**map**\n\n下一个要学习的最重要的函数是 `map`。类似于 `forEach`，`map` 也是将函数作用于数组的每个元素。但与 `forEach` 不同的是，`map` 将函数的每个返回值组成一个新数组，并将其返回。示例如下：\n\n```js\nmap(x => x * 2, [1, 2, 3]) //=> [2, 4, 6]\n```\n\n这里使用了匿名函数，但我们也可以在这里使用具名函数：\n\n```js\nconst double = x => x * 2\nmap(double, [1, 2, 3])\n```\n\n**filter/reject**\n\n接下来，我们来看看 `filter` 和 `reject`。就像名字所示，`filter` 会根据断言函数的返回值从数组中选择元素，例如：\n\n```js\nconst isEven = x => x % 2 === 0\nfilter(isEven, [1, 2, 3, 4]) //=> [2, 4]\n```\n\n`filter` 将断言函数（本例中为 `isEven`）作用于数组中的每个元素。每当断言函数返回 \"真值\" 时，相应的元素将包含到结果中；反之当断言函数返回为 \"falsy\" 值时，相应的元素将从结果数组中排除掉（过滤掉）。\n\n`reject` 是 `filter` 的补操作。它保留使断言函数返回 \"falsy\" 的元素，排除使断言函数返回 \"truthy\" 的元素。\n\n```js\nreject(isEven, [1, 2, 3, 4]) //=> [1, 3]\n````\n\n**find**\n\n`find` 将断言函数作用于数组中的每个元素，并返回第一个使断言函数返回真值的元素。\n\n```js\nfind(isEven, [1, 2, 3, 4]) //=> 2 \n```\n\n**reduce**\n\n`reduce` 比之前遇到的其他函数要复杂一些。了解它是值得的，但如果刚开始不太好理解，不要被它挡住。你可以在理解它之前继续学习其他知识。\n\n`reduce` 接受一个二元函数(`reducing function`)、一个初始值和待处理的数组。\n\n归约函数的第一个参数称为 \"accumulator\" (累加值)，第二个参数取自数组中的元素；返回值为一个新的 \"accumulator\"。\n\n先来看一个示例，然后看看会发生什么。\n\n```js\nconst add = (accum, value) => accum + value\n\nreduce(add, 5, [1, 2, 3, 4]) //=> 15\n```\n\n1. `reduce` 首先将初始值 `5` 和 数组中的首个元素 `1` 传入归约函数 `add`，`add` 返回一个新的累加值：`5 + 1 = 6`。\n2. `reduce` 再次调用 `add`，这次使用新的累加值 `6` 和 数组中的下一个元素 `2` 作为参数，`add` 返回 `8`。\n3. `reduce` 再次使用 `8` 和 数组中的下个元素 `3` 来调用 `add`，输出 `11`。\n4. `reduce` 最后一次调用 `add`，使用 `11` 和 数组中的最后一个元素 `4` ，输出 `15`。\n5. `reduce` 将最终累加值 `15` 作为结果返回。\n\n**结论**\n\n从这些集合迭代函数开始，需要逐渐习惯将函数传入其他函数的编程方式。你可能在其他语言中用过，但没有意识到正在做函数式编程。\n\n**下一节**\n\n本系列的下一篇文章，[函数组合](https://adispring.coding.me/2017/06/10/Thinking-in-Ramda-Combining-Functions/) 将演示怎样以新的、有趣的方式对函数进行组合。\n","slug":"Thinking-in-Ramda-入门","published":1,"updated":"2017-06-10T22:06:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3vm14hc000c3bs6upqzpw23","content":"<p>译者注：本文翻译自 Randy Coulman 的 《<a href=\"http://randycoulman.com/blog/2016/05/24/thinking-in-ramda-getting-started/\" target=\"_blank\" rel=\"external\">Thinking in Ramda: Getting Started</a>》，转载请与<a href=\"https://github.com/randycoulman\" target=\"_blank\" rel=\"external\">原作者</a>或<a href=\"https://github.com/adispring\" target=\"_blank\" rel=\"external\">本人</a>联系。下面开始正文。</p>\n<hr>\n<p>本文是函数式编程系列文章：<a href=\"https://adispring.coding.me/categories/Thinking-in-Ramda/\" target=\"_blank\" rel=\"external\">Thinking in Ramda</a> 的第一篇。</p>\n<p>本系列文章使用 <a href=\"http://ramda.cn\" target=\"_blank\" rel=\"external\">Ramda</a> JavaScript 库进行演示。许多理论、方法同样适用于其他函数式 JavaScript 库，如 <a href=\"http://underscorejs.org/\" target=\"_blank\" rel=\"external\">Underscore</a> 和 <a href=\"https://lodash.com/\" target=\"_blank\" rel=\"external\">Lodash</a>。</p>\n<p>我将尽量用通俗、非学术性的语言演示函数式编程。一方面想让更多的人理解该系列文章；另一方面本人在函数式编程方面造诣尚浅。</p>\n<p><strong>Ramda</strong></p>\n<p>我已经在博客中多次提到过 <a href=\"http://ramda.cn\" target=\"_blank\" rel=\"external\">Ramda</a> JavaScript 库：</p>\n<ul>\n<li>在 <a href=\"http://randycoulman.com/blog/2016/02/16/using-ramda-with-redux/\" target=\"_blank\" rel=\"external\">Using Ramda With Redux</a> 中，展示了在编写 <a href=\"http://redux.js.org/\" target=\"_blank\" rel=\"external\">Redux</a> 应用程序时如何运用 Ramda 的例子。</li>\n<li>在 <a href=\"http://randycoulman.com/blog/2016/04/19/using-redux-api-middleware-with-rails/\" target=\"_blank\" rel=\"external\">Using Redux-api-middleware With Rails</a> 中，我使用 Ramda 来转换请求和响应的数据。</li>\n</ul>\n<p>我发现 Ramda 是一个精心设计的库：包含许多 API ，来简洁、优雅进行 JavaScript 函数式编程。</p>\n<p>如果你想在阅读本系列文章时进行 Ramda 实验，Ramda 网站有一个 <a href=\"http://ramda.cn/repl/\" target=\"_blank\" rel=\"external\">repl 运行环境</a> 。</p>\n<p><strong>函数</strong></p>\n<p>正如名字所示，函数式编程与函数有很大的关系。为了演示，我们定义一个函数为一段可重用的代码：接受 0 到多个参数，返回单个值。</p>\n<p>下面是一个简单的 JavaScript 函数：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">double</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x * <span class=\"number\">2</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用 ES6 箭头函数，可以以更简洁的方式实现相同的函数。现在就提一下，是因为在接下来会大量用到箭头函数：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> double = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * <span class=\"number\">2</span></div></pre></td></tr></table></figure></p>\n<p>几乎每种语言都会支持函数调用。</p>\n<p>有些语言更进一步，将函数视为一等公民：可以像使用普通类型的值的方式使用函数。例如：</p>\n<ul>\n<li>使用变量或常量引用函数</li>\n<li>将函数作为参数传递给其他函数</li>\n<li>将函数作为其他函数的返回值</li>\n</ul>\n<p>JavaScript 就是一种这样的语言，我们将利用它的这一优势进行编程。</p>\n<p><strong>纯函数</strong></p>\n<p>在进行函数式编程时，使用所谓的 &quot;纯&quot; 函数进行工作将变得非常重要。</p>\n<p><a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch3.html\" target=\"_blank\" rel=\"external\">纯函数</a>是没有副作用的函数。它不会给任何外部变量赋值，不会获取输入，不会产生 &quot;输出&quot;，不会对数据库进行读写，不会修改输入参数等。</p>\n<p>纯函数的基本思想是：相同的输入，永远会得到相同的输出。</p>\n<p>当然可以用非纯函数编程（而且这也是必须的，如果想让程序做任何有趣的事情），但在大多数情况下，需要保持大部分函数是纯函数。（译者注：并不是说，要禁止使用一切副作用，而是说，要让它们在可控的范围内发生）</p>\n<p><strong>IMMUTABILITY</strong></p>\n<p>函数式编程的另一个重要概念是 &quot;Immutability&quot;。什么意思呢？&quot;Immutability&quot; 是指 &quot;数据不变性&quot;。</p>\n<p>当以 immutable 方式工作时，一旦定义了某个值或对象，以后就再也不会改变它了。这意味着不能更改已有数组中的元素或对象中的属性。</p>\n<p>如果想改变数组或对象中的元素时，需要返回一份带有更改值的新拷贝。后面文章将会对此做详细介绍。</p>\n<p>Immutability 和 纯函数息息相关。由于纯函数不允许有副作用，所以不允许更改函数体外部的数据结构。纯函数强制以 immutable 的方式处理数据。</p>\n<p><strong>从哪里开始呢？</strong></p>\n<p>开始以函数式思维思考最简单的方式是，使用集合迭代函数代替循环。</p>\n<p>如果用过具备这些特性的其他语言（如 Ruby、Smalltalk），你可能已经熟悉了这些特性。</p>\n<p>Martin Fowler 有几篇关于 &quot;Collection PipeLines&quot; 非常好的文章，展示了<a href=\"https://martinfowler.com/articles/collection-pipeline/\" target=\"_blank\" rel=\"external\">如何使用这些函数</a> 以及<a href=\"https://martinfowler.com/articles/refactoring-pipelines.html\" target=\"_blank\" rel=\"external\">如何将现有代码重构为 collection pipelines</a>。</p>\n<p>注意，所有这些函数 <code>Array.prototype</code> 都有（除了 <code>reject</code>）。因此不需要 Ramda 也可以使用它们。但是，为了保持和本系列其他文章一致，本文将使用 Ramda 版本的函数。</p>\n<p><strong>foreach</strong></p>\n<p>不必写显式的循环，而是用 <code>forEach</code> 函数代替循环。示例如下：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Replace this:</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> value <span class=\"keyword\">of</span> myArray) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(value)</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// with:</span></div><div class=\"line\">forEach(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value), myArray)</div></pre></td></tr></table></figure></p>\n<p><code>forEach</code> 接受一个函数和一个数组，然后将函数作用于数组的每个元素。</p>\n<p>虽然 <code>forEach</code> 是这些函数中最简单的，但在函数式编程中它可能是最少用到的一个。<code>forEach</code> 没有返回值，所以只能用在有副作用的函数调用中。</p>\n<p><strong>map</strong></p>\n<p>下一个要学习的最重要的函数是 <code>map</code>。类似于 <code>forEach</code>，<code>map</code> 也是将函数作用于数组的每个元素。但与 <code>forEach</code> 不同的是，<code>map</code> 将函数的每个返回值组成一个新数组，并将其返回。示例如下：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * <span class=\"number\">2</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]) <span class=\"comment\">//=&gt; [2, 4, 6]</span></div></pre></td></tr></table></figure></p>\n<p>这里使用了匿名函数，但我们也可以在这里使用具名函数：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> double = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * <span class=\"number\">2</span></div><div class=\"line\">map(double, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</div></pre></td></tr></table></figure></p>\n<p><strong>filter/reject</strong></p>\n<p>接下来，我们来看看 <code>filter</code> 和 <code>reject</code>。就像名字所示，<code>filter</code> 会根据断言函数的返回值从数组中选择元素，例如：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> isEven = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x % <span class=\"number\">2</span> === <span class=\"number\">0</span></div><div class=\"line\">filter(isEven, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]) <span class=\"comment\">//=&gt; [2, 4]</span></div></pre></td></tr></table></figure></p>\n<p><code>filter</code> 将断言函数（本例中为 <code>isEven</code>）作用于数组中的每个元素。每当断言函数返回 &quot;真值&quot; 时，相应的元素将包含到结果中；反之当断言函数返回为 &quot;falsy&quot; 值时，相应的元素将从结果数组中排除掉（过滤掉）。</p>\n<p><code>reject</code> 是 <code>filter</code> 的补操作。它保留使断言函数返回 &quot;falsy&quot; 的元素，排除使断言函数返回 &quot;truthy&quot; 的元素。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">reject(isEven, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]) <span class=\"comment\">//=&gt; [1, 3]</span></div><div class=\"line\"><span class=\"string\">`</span></div></pre></td></tr></table></figure></p>\n<p><strong>find</strong></p>\n<p><code>find</code> 将断言函数作用于数组中的每个元素，并返回第一个使断言函数返回真值的元素。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">find(isEven, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]) <span class=\"comment\">//=&gt; 2</span></div></pre></td></tr></table></figure></p>\n<p><strong>reduce</strong></p>\n<p><code>reduce</code> 比之前遇到的其他函数要复杂一些。了解它是值得的，但如果刚开始不太好理解，不要被它挡住。你可以在理解它之前继续学习其他知识。</p>\n<p><code>reduce</code> 接受一个二元函数(<code>reducing function</code>)、一个初始值和待处理的数组。</p>\n<p>归约函数的第一个参数称为 &quot;accumulator&quot; (累加值)，第二个参数取自数组中的元素；返回值为一个新的 &quot;accumulator&quot;。</p>\n<p>先来看一个示例，然后看看会发生什么。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">accum, value</span>) =&gt;</span> accum + value</div><div class=\"line\"></div><div class=\"line\">reduce(add, <span class=\"number\">5</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]) <span class=\"comment\">//=&gt; 15</span></div></pre></td></tr></table></figure></p>\n<ol>\n<li><code>reduce</code> 首先将初始值 <code>5</code> 和 数组中的首个元素 <code>1</code> 传入归约函数 <code>add</code>，<code>add</code> 返回一个新的累加值：<code>5 + 1 = 6</code>。</li>\n<li><code>reduce</code> 再次调用 <code>add</code>，这次使用新的累加值 <code>6</code> 和 数组中的下一个元素 <code>2</code> 作为参数，<code>add</code> 返回 <code>8</code>。</li>\n<li><code>reduce</code> 再次使用 <code>8</code> 和 数组中的下个元素 <code>3</code> 来调用 <code>add</code>，输出 <code>11</code>。</li>\n<li><code>reduce</code> 最后一次调用 <code>add</code>，使用 <code>11</code> 和 数组中的最后一个元素 <code>4</code> ，输出 <code>15</code>。</li>\n<li><code>reduce</code> 将最终累加值 <code>15</code> 作为结果返回。</li>\n</ol>\n<p><strong>结论</strong></p>\n<p>从这些集合迭代函数开始，需要逐渐习惯将函数传入其他函数的编程方式。你可能在其他语言中用过，但没有意识到正在做函数式编程。</p>\n<p><strong>下一节</strong></p>\n<p>本系列的下一篇文章，<a href=\"https://adispring.coding.me/2017/06/10/Thinking-in-Ramda-Combining-Functions/\" target=\"_blank\" rel=\"external\">函数组合</a> 将演示怎样以新的、有趣的方式对函数进行组合。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>译者注：本文翻译自 Randy Coulman 的 《<a href=\"http://randycoulman.com/blog/2016/05/24/thinking-in-ramda-getting-started/\" target=\"_blank\" rel=\"external\">Thinking in Ramda: Getting Started</a>》，转载请与<a href=\"https://github.com/randycoulman\" target=\"_blank\" rel=\"external\">原作者</a>或<a href=\"https://github.com/adispring\" target=\"_blank\" rel=\"external\">本人</a>联系。下面开始正文。</p>\n<hr>\n<p>本文是函数式编程系列文章：<a href=\"https://adispring.coding.me/categories/Thinking-in-Ramda/\" target=\"_blank\" rel=\"external\">Thinking in Ramda</a> 的第一篇。</p>\n<p>本系列文章使用 <a href=\"http://ramda.cn\" target=\"_blank\" rel=\"external\">Ramda</a> JavaScript 库进行演示。许多理论、方法同样适用于其他函数式 JavaScript 库，如 <a href=\"http://underscorejs.org/\" target=\"_blank\" rel=\"external\">Underscore</a> 和 <a href=\"https://lodash.com/\" target=\"_blank\" rel=\"external\">Lodash</a>。</p>\n<p>我将尽量用通俗、非学术性的语言演示函数式编程。一方面想让更多的人理解该系列文章；另一方面本人在函数式编程方面造诣尚浅。</p>\n<p><strong>Ramda</strong></p>\n<p>我已经在博客中多次提到过 <a href=\"http://ramda.cn\" target=\"_blank\" rel=\"external\">Ramda</a> JavaScript 库：</p>\n<ul>\n<li>在 <a href=\"http://randycoulman.com/blog/2016/02/16/using-ramda-with-redux/\" target=\"_blank\" rel=\"external\">Using Ramda With Redux</a> 中，展示了在编写 <a href=\"http://redux.js.org/\" target=\"_blank\" rel=\"external\">Redux</a> 应用程序时如何运用 Ramda 的例子。</li>\n<li>在 <a href=\"http://randycoulman.com/blog/2016/04/19/using-redux-api-middleware-with-rails/\" target=\"_blank\" rel=\"external\">Using Redux-api-middleware With Rails</a> 中，我使用 Ramda 来转换请求和响应的数据。</li>\n</ul>\n<p>我发现 Ramda 是一个精心设计的库：包含许多 API ，来简洁、优雅进行 JavaScript 函数式编程。</p>\n<p>如果你想在阅读本系列文章时进行 Ramda 实验，Ramda 网站有一个 <a href=\"http://ramda.cn/repl/\" target=\"_blank\" rel=\"external\">repl 运行环境</a> 。</p>\n<p><strong>函数</strong></p>\n<p>正如名字所示，函数式编程与函数有很大的关系。为了演示，我们定义一个函数为一段可重用的代码：接受 0 到多个参数，返回单个值。</p>\n<p>下面是一个简单的 JavaScript 函数：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">double</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x * <span class=\"number\">2</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用 ES6 箭头函数，可以以更简洁的方式实现相同的函数。现在就提一下，是因为在接下来会大量用到箭头函数：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> double = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * <span class=\"number\">2</span></div></pre></td></tr></table></figure></p>\n<p>几乎每种语言都会支持函数调用。</p>\n<p>有些语言更进一步，将函数视为一等公民：可以像使用普通类型的值的方式使用函数。例如：</p>\n<ul>\n<li>使用变量或常量引用函数</li>\n<li>将函数作为参数传递给其他函数</li>\n<li>将函数作为其他函数的返回值</li>\n</ul>\n<p>JavaScript 就是一种这样的语言，我们将利用它的这一优势进行编程。</p>\n<p><strong>纯函数</strong></p>\n<p>在进行函数式编程时，使用所谓的 &quot;纯&quot; 函数进行工作将变得非常重要。</p>\n<p><a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch3.html\" target=\"_blank\" rel=\"external\">纯函数</a>是没有副作用的函数。它不会给任何外部变量赋值，不会获取输入，不会产生 &quot;输出&quot;，不会对数据库进行读写，不会修改输入参数等。</p>\n<p>纯函数的基本思想是：相同的输入，永远会得到相同的输出。</p>\n<p>当然可以用非纯函数编程（而且这也是必须的，如果想让程序做任何有趣的事情），但在大多数情况下，需要保持大部分函数是纯函数。（译者注：并不是说，要禁止使用一切副作用，而是说，要让它们在可控的范围内发生）</p>\n<p><strong>IMMUTABILITY</strong></p>\n<p>函数式编程的另一个重要概念是 &quot;Immutability&quot;。什么意思呢？&quot;Immutability&quot; 是指 &quot;数据不变性&quot;。</p>\n<p>当以 immutable 方式工作时，一旦定义了某个值或对象，以后就再也不会改变它了。这意味着不能更改已有数组中的元素或对象中的属性。</p>\n<p>如果想改变数组或对象中的元素时，需要返回一份带有更改值的新拷贝。后面文章将会对此做详细介绍。</p>\n<p>Immutability 和 纯函数息息相关。由于纯函数不允许有副作用，所以不允许更改函数体外部的数据结构。纯函数强制以 immutable 的方式处理数据。</p>\n<p><strong>从哪里开始呢？</strong></p>\n<p>开始以函数式思维思考最简单的方式是，使用集合迭代函数代替循环。</p>\n<p>如果用过具备这些特性的其他语言（如 Ruby、Smalltalk），你可能已经熟悉了这些特性。</p>\n<p>Martin Fowler 有几篇关于 &quot;Collection PipeLines&quot; 非常好的文章，展示了<a href=\"https://martinfowler.com/articles/collection-pipeline/\" target=\"_blank\" rel=\"external\">如何使用这些函数</a> 以及<a href=\"https://martinfowler.com/articles/refactoring-pipelines.html\" target=\"_blank\" rel=\"external\">如何将现有代码重构为 collection pipelines</a>。</p>\n<p>注意，所有这些函数 <code>Array.prototype</code> 都有（除了 <code>reject</code>）。因此不需要 Ramda 也可以使用它们。但是，为了保持和本系列其他文章一致，本文将使用 Ramda 版本的函数。</p>\n<p><strong>foreach</strong></p>\n<p>不必写显式的循环，而是用 <code>forEach</code> 函数代替循环。示例如下：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Replace this:</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> value <span class=\"keyword\">of</span> myArray) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(value)</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// with:</span></div><div class=\"line\">forEach(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value), myArray)</div></pre></td></tr></table></figure></p>\n<p><code>forEach</code> 接受一个函数和一个数组，然后将函数作用于数组的每个元素。</p>\n<p>虽然 <code>forEach</code> 是这些函数中最简单的，但在函数式编程中它可能是最少用到的一个。<code>forEach</code> 没有返回值，所以只能用在有副作用的函数调用中。</p>\n<p><strong>map</strong></p>\n<p>下一个要学习的最重要的函数是 <code>map</code>。类似于 <code>forEach</code>，<code>map</code> 也是将函数作用于数组的每个元素。但与 <code>forEach</code> 不同的是，<code>map</code> 将函数的每个返回值组成一个新数组，并将其返回。示例如下：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * <span class=\"number\">2</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]) <span class=\"comment\">//=&gt; [2, 4, 6]</span></div></pre></td></tr></table></figure></p>\n<p>这里使用了匿名函数，但我们也可以在这里使用具名函数：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> double = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * <span class=\"number\">2</span></div><div class=\"line\">map(double, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</div></pre></td></tr></table></figure></p>\n<p><strong>filter/reject</strong></p>\n<p>接下来，我们来看看 <code>filter</code> 和 <code>reject</code>。就像名字所示，<code>filter</code> 会根据断言函数的返回值从数组中选择元素，例如：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> isEven = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x % <span class=\"number\">2</span> === <span class=\"number\">0</span></div><div class=\"line\">filter(isEven, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]) <span class=\"comment\">//=&gt; [2, 4]</span></div></pre></td></tr></table></figure></p>\n<p><code>filter</code> 将断言函数（本例中为 <code>isEven</code>）作用于数组中的每个元素。每当断言函数返回 &quot;真值&quot; 时，相应的元素将包含到结果中；反之当断言函数返回为 &quot;falsy&quot; 值时，相应的元素将从结果数组中排除掉（过滤掉）。</p>\n<p><code>reject</code> 是 <code>filter</code> 的补操作。它保留使断言函数返回 &quot;falsy&quot; 的元素，排除使断言函数返回 &quot;truthy&quot; 的元素。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">reject(isEven, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]) <span class=\"comment\">//=&gt; [1, 3]</span></div><div class=\"line\"><span class=\"string\">`</span></div></pre></td></tr></table></figure></p>\n<p><strong>find</strong></p>\n<p><code>find</code> 将断言函数作用于数组中的每个元素，并返回第一个使断言函数返回真值的元素。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">find(isEven, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]) <span class=\"comment\">//=&gt; 2</span></div></pre></td></tr></table></figure></p>\n<p><strong>reduce</strong></p>\n<p><code>reduce</code> 比之前遇到的其他函数要复杂一些。了解它是值得的，但如果刚开始不太好理解，不要被它挡住。你可以在理解它之前继续学习其他知识。</p>\n<p><code>reduce</code> 接受一个二元函数(<code>reducing function</code>)、一个初始值和待处理的数组。</p>\n<p>归约函数的第一个参数称为 &quot;accumulator&quot; (累加值)，第二个参数取自数组中的元素；返回值为一个新的 &quot;accumulator&quot;。</p>\n<p>先来看一个示例，然后看看会发生什么。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">accum, value</span>) =&gt;</span> accum + value</div><div class=\"line\"></div><div class=\"line\">reduce(add, <span class=\"number\">5</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]) <span class=\"comment\">//=&gt; 15</span></div></pre></td></tr></table></figure></p>\n<ol>\n<li><code>reduce</code> 首先将初始值 <code>5</code> 和 数组中的首个元素 <code>1</code> 传入归约函数 <code>add</code>，<code>add</code> 返回一个新的累加值：<code>5 + 1 = 6</code>。</li>\n<li><code>reduce</code> 再次调用 <code>add</code>，这次使用新的累加值 <code>6</code> 和 数组中的下一个元素 <code>2</code> 作为参数，<code>add</code> 返回 <code>8</code>。</li>\n<li><code>reduce</code> 再次使用 <code>8</code> 和 数组中的下个元素 <code>3</code> 来调用 <code>add</code>，输出 <code>11</code>。</li>\n<li><code>reduce</code> 最后一次调用 <code>add</code>，使用 <code>11</code> 和 数组中的最后一个元素 <code>4</code> ，输出 <code>15</code>。</li>\n<li><code>reduce</code> 将最终累加值 <code>15</code> 作为结果返回。</li>\n</ol>\n<p><strong>结论</strong></p>\n<p>从这些集合迭代函数开始，需要逐渐习惯将函数传入其他函数的编程方式。你可能在其他语言中用过，但没有意识到正在做函数式编程。</p>\n<p><strong>下一节</strong></p>\n<p>本系列的下一篇文章，<a href=\"https://adispring.coding.me/2017/06/10/Thinking-in-Ramda-Combining-Functions/\" target=\"_blank\" rel=\"external\">函数组合</a> 将演示怎样以新的、有趣的方式对函数进行组合。</p>\n"},{"title":"Transducers Explained: Part 1 中文","date":"2016-10-24T02:10:20.000Z","_content":"\n译者注：本文翻译自 Kevin Beaty 的《[Transducers Explained: Part 1](http://simplectic.com/blog/2014/transducers-explained-1/)》, 转载请与[原作者](https://github.com/kevinbeaty)或[本人](https://github.com/adispring)联系。 \n对原文中出现的专业术语，在不妨碍理解的情况下采用原文单词。\n\nTransduce 相较于 Reduce 的改进，用一句话概括：在使用 Reduce 对每个元素归约之前，先对取出的每个元素进行转换。\n\nTransduce 的时间复杂度为 O(n), 传统 compose + reduce 的为O(mn)，m：compose 中包含 转变函数的个数，n：输入“类数组”的长度。\n\n名词解释：\n\n* reduce：归约、折叠。\n* transduce：transform + reduce。\n* transducer：出入一个transformer，返回一个新的transformer。\n* transformer：封装 *reducing function*，返回控制 reduce 声明周期的对象 `init` `step` `result` \n* xf：reduce 函数的首个参数，可以是 *reducing Function*，也可以是 transformer。\n* reducing function：用来进行 reduce 的二元函数。\n* stepper function：等同于 reducing function。\n* result：reducing function 的首个参数，累加器。\n* item：reducing function 的第二个参数。reduce 遍历对象的每个元素。\n\n下面开始正文。\n\n---\n\n本文使用 JavaScript 对 transducers 原理进行剖析。首先介绍数组的 reducing(归约) 过程，以此讲解 reduce 中用于转换的 transformers；然后逐步引入 transducers，并将其用于 transduce 中。文末会有总结、展望、一些补充链接，以及当前涉及 transducer 的一些库。\n\n**Transducers...**\n\n\n## 什么是 Transducers ？\n\n[原文](http://clojure.org/reference/transducers)解释如下\n\n> Transducers 是可组合的算法变换。它们独立于输入和输出的上下文，并且作为一个独立的单元提供最基本的 transformation。由于 transducers 与输入和输出相解耦，所以它们可以用于许多不同的处理场景：collections, streams, channels, observables（集合、流、管道、观察者模式）等。Transducers 可以直接组合，与输入无关且不会产生额外的中间变量。\n\n**嗯...**\n\n## 还是不太理解\n\n让我们看看相关的代码。当使用 transducers 时，\"algorithmic transformations\" 已经（至少部分）被定义了, 定义的函数类似于传入 reduce 的“函数参数”。[Clojure 文档](http://clojure.org/reference/transducers)将这些\"algorithmic transformations\" 称为 reducing functions。这又是什么东西？好吧…… ，让我们从数组的 reduce 函数开始讲解。可以先看下 [MDN 的定义](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)。 \n\n## Reduce\n\n> reduce() 方法将一个二元函数作用于一个累加器和数组的每个元素（从左到右依次取出）， 最终输出为与累加器类型相同的单个值。\n\n更多解释可以参考 [MDN 文档](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)（译者注：reduce 在某些语言中称为 foldl 左折叠，如 Haskell）。大家对 reduce 可能已经比较熟悉，在此将快速举些例子说明一下。\n\n```js\nconst sum = (result, item) => result + item;\n\nconst mult = (result, item) => result * item;\n\n// 10 (=1+2+3+4)\nconst summed = [2,3,4].reduce(sum, 1);\n\n// 24 (=1*2*3*4)\nconst multed = [2,3,4].reduce(mult, 1);\n```\n\n上述代码中的 *reducing functions* 是 `sum` 和 `mult`。*reducing functions* 连同初始值：1，一起传入 `reduce` 中。“输入源”是数组 [2, 3, 4]，“输出源”是通过 reduce 内部实现创建的新数组。\n\n关于 `reduce`， 需要记住的非常重要几点是：\n\n1. 归约（reduce）从输入的初始值开始。\n2. *reducing functions* 每次对一个元素进行操作，操作过程为：\n    * 初始值作为第一步的“结果参数”\n    * 单步操作函数(*reducing functions* )的返回值作为下次迭代的“结果参数”\n3. 将最后一次计算结果作为返回值。\n\n注意，在上述两例中，*reducing function* 是一个二元函数。*reducing function* 第一个参数是由 reduce 函数外部提供的, 其值为传入的初始值或者上次调用 *reducing function* 的计算结果。第二个参数是由某个迭代过程传入的单个元素。本例中， reduce 对数组中的每个元素进行迭代。我们稍后会看到其他的迭代方式。我们使用 *reduce function* 来描述 “转换（归约）的本质”。\n\n## Transformer\n\n我们来正式实现 *transformer* 的归约过程：\n\n```js\nconst transformer = reducingFunction => ({\n  // 1. 作为 reduce 开始的初始值\n  init: () => 1,\n\n  // 2. 每次输入一个元素，并将本次计算结果\n  //    传给下次迭代的 reducing function\n  step: reducingFunction,\n\n  // 3. 将最后一次的计算结果作为输出\n  result: result => result,\n});\n```\n\n我们创建一个对象来封装 reduce 的内部实现。其中包括一个名为 `step` 的 reducing function，一个用来初始化 transformer 的 `init`函数和一个用来将最后一次计算结果转换为需要的输出的 `result`函数。注意，在本文中，我们将只关注 `step` 函数，`init` 和 `result` 函数将在后续文章中做深入分析。现在，你可以把它们当作管理 transformation 声明周期的方法：`init` 用于初始化，`step` 用于迭代，`result` 用于输出整个归约结果。\n\n现在让我们将刚定义的 transformer 运用到 reduce 中。\n\n```js\nconst input = [2,3,4];\n\nconst xf = transformer(sum);\nconst output = input.reduce(xf.step, xf.init());\n// output = 10 (=1+2+3+4)\n\nconst xf = transformer(mult);\nconst output = input.reduce(xf.step, xf.init());\n// output = 24 (=1*2*3*4)\n```\n\n我们的目标是将 transformation 与输入和输出解耦，所以将 reduce 定义为函数。\n\n```js\nconst reduce = (xf, init, input) => {\n  let result = input.reduce(xf.step, init);\n  return xf.result(result);\n};\n```\n\n在使用 reduce 时，我们传入一个 transducer、初始值和输入源。上述实现将 *step function* 与数组的 reduce 方法结合使用，并将 *step function* 的结果作为输出。本次 reduce 的内部实现仍然假设输入类型为数组。 我们稍后将去掉这个假设。\n\n我们还接受一个 `init` 值作为 reduce 的参数，我们本可以使用 transformer 的 `init`，但是考虑到 reduce 函数的灵活性，需要能够自定义初始值。在实践中，transformer 的 `init` 函数仅在 reduce 未提供初始值的情况下使用。\n\n新 reduce 函数的使用类似于之前的 reduce 。\n\n```js\nconst input = [2,3,4];\nconst xf = transformer(sum);\nconst output = reduce(xf, xf.init(), input);\n// output = 10 (=1+2+3+4)\n\nconst input = [2,3,4];\nconst xf = transformer(mult);\nconst output = reduce(xf, xf.init(), input);\n// output = 24 (=1*2*3*4)\n```\n\n还可以给 reduce 传入初始值。\n\n```js\nconst input = [2,3,4];\nconst xf = transformer(sum);\nconst output = reduce(xf, 2, input);\n// output = 11 (=2+2+3+4)\n\nconst input = [2,3,4];\nconst xf = transformer(mult);\nconst output = reduce(xf, 2, input);\n// output = 48 (=2*2*3*4)\n```\nreduce 函数现在需要一个 transformer。由于 transformer的 `init` 函数未在 reduce 中用到，且 `result` 经常作为单位元(identity、恒等)函数使用：一个直接返回单参数（输入本身）的函数，我们将定义一个辅助函数，来将 *reduceing function* 转换为 transformer，并传入 reduce 使用。\n\n```js\nconst reduce = (xf, init, input) => {\n  if(typeof xf === 'function'){\n    // 确保 reduce 中含有 transformer \n    xf = wrap(xf);\n  }\n  const result = input.reduce(xf.step, init);\n  return xf.result(result);\n}\n\nconst wrap = xf => ({\n  // 1. 我们会显式的传入一个 reduce 的初始值，\n  //    所以这里不再需要内部的 init 函数\n  init: () => {\n    throw new Error('init not supported');\n  },\n\n  // 2. 每次输入一个元素，并将本次计算结果\n  //    传给下次迭代的 reducing function\n  step: reducingFunction,\n\n  // 3. 将最后一次的计算结果作为输出\n  result: result => result,\n}\n```\n\n首先我们检查参数 `xf` 的类型是否为 function。若是，我们假定它是一个 step function, 并调用 wrap 函数将其转换为 transformer。然后像之前一样调用 reduce 。\n\n现在已经可以直接向 reduce 传递 reducing function了。\n\n```js\nconst input = [2,3,4];\nconst output = reduce(sum, 1, input);\n// output = 10 (=1+2+3+4)\n\nconst input = [2,3,4];\nconst output = reduce(mult, 2, input);\n// output = 48 (=2*2*3*4)\n```\n\n![reduce](./reduce.png)\n\n但我们仍然可以向 reduce 传 transformers。\n\n```js\nconst input = [2,3,4];\nconst xf = wrap(sum);\nconst output = reduce(xf, 2, input);\n// output = 11 (=2+2+3+4)\n\nconst input = [2,3,4];\nconst xf = wrap(mult);\nconst output = reduce(xf, 1, input);\n// output = 24 (=1*2*3*4)\n```\n\n请注意，我们现在可以在外部借助 wrap 直接封装已有的 *reducing functions* 来创建 transformer。这是使用 transducers 时经常用到的方法：将 transformations 定义为简单的函数，然后使用 transducers 库将其转换为transformer。\n\n## 不一样的数组拷贝\n\n目前，我们一直使用数字作为初始值和算术 *reducing functions* 的处理元素。其实不一定非要这样，`reduce` 也可以将数组作为处理元素。\n\n```js\nconst append = (result, item) => result.push(item);\n\nconst input = [2,3,4];\nconst output = reduce(append, [], input);\n// output = [2, 3, 4]\n```\n\n我们定义一个步进函数（stepper function）`append`，用于将每个元素拷贝到新数组中，并返回该数组。借助 `append`， reduce 便可以创建一份数组的拷贝。\n\n上述操作是否够酷？或许算不上...。当你在将元素添加到输出数组之前先对它变换一下时，情况才变得有趣起来。\n\n## 最孤单的数字\n\n（注：One is the loneliest number，一句英文歌词，引出 `plus1` 转换）\n\n假设我们想要每个元素加1，定义一个加1函数。\n\n```js\nconst plus1 = item => itme + 1;\n```\n\n现在创建一个 transformer ，它使用上面的函数在 step 中对每个独立元素进行转换。\n\n```js\nconst xfplus1 = {\n  init: () => { throw new Error('init not needed'); },\n\n  step: (result, item) => {\n    const plus1ed = plus1(item);\n    return append(result, plus1ed);\n  },\n  // step: (result, item) => append(result, plus1(item)),\n  \n  result: result => result,\n}\n```\n\n可以使用 transformer 逐步遍历并输出每步结果\n\n```js\nconst xf = xfplus1;\nconst init = [];\nlet result = xf.step(init, 2);\n// [3] (=append([], 2+1)))\n\nresult = xf.step(result, 3);\n// [3,4] (=append([3], 3+1)))\n\nresult = xf.step(result, 4);\n// [3,4,5] (=append([3,4], 4+1)))\n\nconst output = xf.result(result);\n// [3,4,5]\n```\n\n因此，我们使用一个 transformer 来遍历元素：将每个元素加1后添加到输出数组中。\n\n如果我们想要每个元素加1 后的总和，该怎么办呢？可以使用 reduce 。\n\n```js\nconst output = reduce(sum, 0, output);\n// 12 (=0+3+4+5)\n```\n\n上述方案虽然可行，但不幸的是，我们在获得最终答案的过程中，不得不创建一个中间数组。 有更好的方案吗？\n\n事实上是有的。回顾上面的 `xfplus1` ，如果我们将 `append` 调用换为 `sum` 调用，并且以 0 作为初始值，就可以定义一个不会产生中间数组，但直接对元素求和的 transformer。\n\n但是，有时我们想立即查看替换 *reducing function* 后的结果，因为中间涉及的唯一变化就是将 `append` 替换为 `sum`。因此我们希望有一个能够创建 transformation 的函数，该函数不依赖于用于组合中间结果的 transformer。\n\n```js\nconst transducerPlus1 = (xf) => ({\n  init: () => xf.init(),\n  step: (result, item) => {\n    const plus1ed = plus1(item);\n    return xf.step(result, plus1ed);\n  },\n  result: result => result,\n});\n```\n\n该函数接受一个 transformer：`xf`，返回一个基于 `xf` 的新的 transformer。新 transformer 将经由 `plus1` 转换后的结果代理给 `xf`。由于我们可以使用 `step` 函数完全定义这个 transformation，新的 transformer 的 `xf` 只需 `init` 和 `result`。每次迭代时，先将每个元素进行 `plus1` 转换，然后调用封装过的 transformer 内部的 `step` 函数。\n\n## Transducer\n\n我们刚刚创建了第一个 transducer：一个接受现有 transformer，并返回新 transformer 的函数。新 transformer 会改变原有 transformation 的行为，transducer 会将一些额外的处理委托给新的封装过的 transformer。\n\n让我们实践一下，首先用刚才的 transducer 来重新实现前面的例子。\n\n```js\nconst stepper = wrap(append);\nconst init = [];\nconst transducer = transducerPlus1;\nconst xf = transducer(stepper);\nlet result = xf.step(init, 2);\n// [3] (=append([], 2+1)))\n\nresult = xf.step(result, 3);\n// [3,4] (=append([3], 3+1)))\n\nresult = xf.step(result, 4);\n// [3,4,5] (=append([3,4], 4+1)))\n\nconst output = xf.result(result);\n// [3,4,5]\n```\n\n运行过程和结果与之前相同，很好。唯一的区别是 transformer：`xf` 的创建。我们使用 `wrap` 将 `append` 转换成名为 `stepper` 的 transformer，然后使用 transducer 封装这个 stepper 并返回一个 `plus1` 转换。然后我们就可以像从前一样使用转换函数：xf 对每个元素逐步操作，并得到结果。\n\n## 中间辅助元素\n\n从现在开始，事情变得有趣起来：我们可以用相同的 transducer 来获得最终的累加和，不需要中间辅助数组，只需改变 stepper 和初始值。\n\n```js\nconst stepper = wrap(sum);\nconst init = 0;\nconst transducer = transducerPlus1;\nconst xf = transducer(stepper);\nlet result = xf.step(init, 2);\n// 3 (=sum(0, 2+1)))\n\nresult = xf.step(result, 3);\n// 7 (=sum(3, 3+1)))\n\nresult = xf.step(result, 4);\n// 12 (=sum(7, 4+1)))\n\nconst output = xf.result(result);\n// 12\n```\n\n不需要计算中间数组，一次迭代就可以得到结果。`sum` 与之前 `append` 例子只有两处不同：\n\n* 创建 stepper 时，用 sum 代替 append 进行封装。\n* 初始值使用 0 代替 []。\n\n仅此两处差异，其他完全一样。\n\n需要注意的是，只有 `stepper` 转换知道 `result` 的数据类型。当封装 `sum` 时，结果类型为数字，封装 `append` 时，结果是数组。初始值类型与 stepper 的 `result` 参数类型相同。被处理的单个元素的类型不限，因为 stepper 知道如何组合上次输出的结果和新的元素，并返回一个新的组合的结果，本次输出结果可能会用于下次迭代中的组合，如此迭代循环。\n\n这些特性允许我们定义独立于输出的 transformation 。\n\n## 可能会变糟\n\n(注：第二句歌词，Can be as bad as one，作者意思应该是，如果 `plus2` 还跟 `plus1` 一样从头重新实现一遍，就比较坑了)\n\n假如我们想要在归约之前 `plus2`，需要改变哪些地方呢？我们可以定义一个类似于 `transducerPlus1` 的新的 `transducerPlus2` 。回头看一下 `transducerPlus1` 是如何实现的，并决定哪些地方需要更改。但这样做违反了 DRY 原则。\n\n有更好的方案吗？\n\n实际上，除了将 step 的值用 `plus2` 替换掉 `plus1` 以外，其他都是一样的。\n\n让我们将 `plus1` 提取出来，并将其作为函数 `f` 进行传递。\n\n```js\nconst map = f => xf => ({\n  init: () => xf.init(),\n  step: (result, item) => {\n    const mapped = f(item);\n    return xf.step(result, mapped);\n  },\n  result: result => xf.result(result),\n});\n```\n\n我们定义了 mapping transducer，让我们使用它来逐步转换。\n\n```js\nconst plus2 = (input) => input + 2;\nconst transducer = map(plus2);\nconst stepper = wrap(append);\nconst xf = transducer(stepper);\nconst init = [];\nlet result = xf.step(init, 2);\n// [4] (=append([], 2+2)))\n\nresult = xf.step(result, 3);\n// [4,5] (=append([4], 3+2)))\n\nresult = xf.step(result, 4);\n// [4,5,6] (=append([4,5], 4+1)))\n\nconst output = xf.result(result);\n// [4,5,6]\n```\n\n本例相较于之前使用`plus1` 和 `append` 函数的例子，唯一的区别在于使用 `map` 创建 transducer。我们可以类似地使用 `map(plus1)` 来创建 `plus1` transducer。`transducerPlus1` 虽然只是短暂的出现便被 `map(plus1)` 代替，但它对我们理解 transduce 的内部原理帮助很大。\n\n## Transduce\n\n前面的示例讲解了使用 transducers 手动转换一系列的输入。让我们进一步优化。\n\n首先通过调用一个包含 stepper 转换的 transducer 来初始化 transformation，并定义 transduce 的初始值。\n\n```js\nconst transducer = map(plus1);\nconst stepper = wrap(append);\nconst xf = transducer(stepper);\nconst init = [];\n```\n\n然后使用 *reducing function* `xf.step` 来遍历每个输入元素。将初始值作为 step 函数的第一个 `result` 参数（另一个是输入源中的元素），上一个 step 函数的返回值供所有后续元素迭代使用。\n\n```js\nlet result = xf.step(init, 2);\n// [3] (=append([], 2+1)))\n\nresult = xf.step(result, 3);\n// [3,4] (=append([3], 3+1)))\n\nresult = xf.step(result, 4);\n// [3,4,5] (=append([3,4], 4+1)))\n```\n\n我们使用 `xf.result` 输出最终结果。\n\n```js\nconst output = xf.result(result);\n// [3,4,5]\n```\n\n可能你已经注意到了，这与上面定义的 `reduce` 实现非常相似。 事实也是如此。 我们可以将这个过程封装成一个新的函数 `transduce`。\n\n```js\nconst transduce = (transducer, stepper, init, input) => {\n  if(typeof stepper === 'function'){\n    // 确保存在用于步进（迭代）的 transformer\n    stepper = wrap(stepper);\n  }\n\n  // 传入 stepper 来创建 transformer：xf\n  const xf = transducer(stepper);\n  // xf 现在成为一个 transformer\n  // 现在可以使用上面定义的 reduce 来迭代并\n  // （在迭代之前）变换输入元素\n  return reduce(xf, init, input);\n};\n```\n\n就像 reduce，我们需要确保 stepper 是一个 transformer。然后通过向 transducer 传入 stepper 来创建新的 transformer。 最后，我们使用包含新的 transformer 的 reduce 来进行迭代和转换结果。也就是说 transducer 的函数类型为：transformer -> transformer。\n\n我们来实践一下。\n\n```js\nconst transducer = map(plus1);\nconst stepper = append;\nconst init = [];\nconst input = [2,3,4];\nconst output = transduce(transducer, stepper, init, input);\n// [3,4,5]\n\nconst transducer = map(plus2);\nconst stepper = append;\nconst init = [];\nconst input = [2,3,4];\nconst output = transduce(transducer, stepper, init, input);\n// [4,5,6]\n```\n\n上述两例的唯一区别是传递给 map 的函数不同。\n\n我们来尝试一下不同的 step function 和初始值。\n\n```js\nconst transducer = map(plus1);\nconst stepper = sum;\nconst init = 0;\nconst input = [2,3,4];\nconst output = transduce(transducer, stepper, init, input);\n// 12 (=3+4+5)\n\nconst transducer = map(plus2);\nconst stepper = sum;\nconst init = 0;\nconst input = [2,3,4];\nconst output = transduce(transducer, stepper, init, input);\n// 15 (=4+5+6)\n\nconst transducer = map(plus1);\nconst stepper = mult;\nconst init = 1;\nconst input = [2,3,4];\nconst output = transduce(transducer, stepper, init, input);\n// 60 (=3*4*5)\n\nconst transducer = map(plus2);\nconst stepper = mult;\nconst init = 1;\nconst input = [2,3,4];\nconst output = transduce(transducer, stepper, init, input);\n// 120 (=4*5*6)\n```\n\n![transduce](./transduce.png)\n\n这里我们只是改变了 stepper 和初始值，便可以得到不同的结果。我们可以在不依赖中间变量的情况下，遍历一次便可求得累加和或乘积。\n\n## 组合\n\n如果我们想加3，改怎么办呢？我们可以定义 `plus3` 并且使用 `map`，但更好的方法是利用 transducers 的一个特性。\n\n事实上，我们可以通过其他两个函数：`plus1` 和 `plus2`，来定义 `plus3`。\n\n```js\nconst plus3 = item => puls2(plus1(item));\n```\n\n或许你已经看出来，其实这就是[函数组合](https://en.wikipedia.org/wiki/Function_composition_%28computer_science%29)。让我们通过函数组合来重新定义 `plus3`。\n\n```js\nconst compose2 = (fn1, fn2) => item => fn1(fn2(item));\n\nconst plus3 = compose2(plus1, plus2);\n\nconst output = [plus3(2), plus3(3), plus3(4)];\n// [5,6,7]\n```\n\n`compose2` 用于组合两个函数，调用顺序从右向左，看一下 `compose2` 的实现就可以知道为什么调用顺序是从右向左的了。最后一个 function 接受传入参数，返回结果作为下个 function 的输入。如此迭代，直到输出结果。\n\n让我们使用 `compose2` 来定义一个 transducer，该 transducer 由 `plus1` 和 `plus2` 组合而成，用于将每个迭代的元素加3。\n\n```js\nconst transducerPlus3 = map(compose2(plus1, plus2));\nconst transducer = transducerPlus3;\nconst stepper = append;\nconst init = [];\nconst input = [2,3,4];\nconst output = transduce(transducer, stepper, init, input);\n// [5,6,7]\n```\n\n我们使用“函数组合”来组合 `plus1` 和 `plus2` 而不是重新定义 `plus3`，来组合出传入 map 的加3操作。\n\n将上述这些的目的是什么呢？实际上，我们可以通过组合其他的 transducers 来创建新的 transducers。\n\n```js\nconst transducerPlus1 = map(plus1);\nconst transducerPlus2 = map(plus2);\nconst transducerPlus3 = compose2(transducerPlus1, transducerPlus2);\nconst transducer = transducerPlus3;\nconst stepper = append;\nconst init = [];\nconst input = [2,3,4];\nconst output = transduce(transducer, stepper, init, input);\n// [5,6,7]\n```\n\n新组合出来的 transducer 可以用于组合其他的 transducer 。\n\n```js\nconst transducerPlus1 = map(plus1);\nconst transducerPlus2 = map(plus2);\nconst transducerPlus3 = compose2(transducerPlus1, transducerPlus2);\nconst transducerPlus4 = compose2(transducerPlus3, transducerPlus1);\nconst transducer = transducerPlus4;\nconst stepper = append;\nconst init = [];\nconst input = [2,3,4];\nconst output = transduce(transducer, stepper, init, input);\n```\n![compose_transducers](./compose_transducers.png)\n\n再次注意，与本节前面的例子的唯一区别是 transducer 的创建。其它都没变。\n\n组合之所以能工作，是因为 transducers 的定义：接受一个 transformer 并返回一个新的 transformer。也即 transducer 的输入与返回值类型相同，且为单输入单输出。只要符合上述条件，便可以使用函数组合来创建与“输入函数”相同类型的“新函数”。\n\n由上可得，transducers 是一种 “可组合的算法变换”。这在实践中已经证明其强大之处：可以将新的变换定义为一系列较小变换的组合，然后将它们通过 `compose` 或 `pipe` 组合起来。我们将在后续章节中展示更多的例子。\n\n事实上，虽然函数组合调用顺序为由左向右，而 transformation 调用是自左向右的（译者注：这也是理解 transduce 的难点之一，理解了这个，也就基本理解了 transduce。可以通过单个 transducer 和 transformer 的组合，来理解 transformation 的调用顺序。transduce 本质上做的事情是 **在对每个元素进行归约之前先对其进行变换** ，将这句话重复五遍：），这也是 transduce 区别于 reduce 的“唯一”不同点）。\n\n在上面的 `transducersPlus4` 示例中，每个元素先进行 `plus3` 转换，然后进行 `plus1` 转换。\n\n虽然在本例中 transducers 的调用顺序对结果没有影响，但是**从左向右**的变换顺序还是需要牢记在心。这个变换调用顺序让你在阅读代码时更容易理解，因为它与你的阅读顺序是一至的（如果使用的是英文，或者中文）。\n\n## part 1 总结\n\nTransducers 将 “可组合的算法转换” 抽象出来，使其独立于输入、输出，甚至迭代的整个过程。\n\n本文演示了如何使用 transducers 来抽象算法转换，transducer 将一个 transformer 转换为另一个 transformer。transformer 可以用于 transduce 进行迭代和转换输入源。\n\n相较于 [Underscore.js](http://underscorejs.org/) 或 [Lo-Dash](https://lodash.com/)对数组和计算中间结果的对象进行操作，transducers 定义的 transformation 在函数方面类似于传递给 reduce 的 stepping function：将初始值作为首次迭代的“结果参数”，执行输入为一个“结果参数”和元素的函数，返回可能变换过的结果，并将其作为下次迭代的“结果参数”。一旦将 transformation 从数据中抽象出来，就可以将相同的 transformations 应用于以某初始值开始并遍历某个“累积结果”的不同处理过程。\n\n我们已经展示了相同的 transducers 可以操作不同的“输出源”，只需改变创建 transducer 时用到的初始值和 stepper function。这种抽象的好处之一是：可以遍历一次得到结果，且没有中间数组产生。\n\n尽管没有明确说明，我们还是展示了 transducers 将 transducer 与 迭代过程及输入源解耦。在迭代过程中，我们使用相同的 transducer 对元素进行转换，并将转换结果传给 step function，我们使用数组的 reduce 从数组中获取数据。\n\n## 还想了解更多！\n\n[看这里](http://simplectic.com/blog/2014/transducers-explained-pipelines/) ,以后的文章中将会进一步讨论 transducers 并不会每步都输出元素；并且可能会提前终止迭代，并返回终止前已经归约的结果。本文只讨论了 step，未讨论 init 和 result，将来会有补充。\n\n我们将会了解到，输入源可以是任意产生一系列值的东西：惰性列表，不确定的序列生成器，CSP（通信顺序进程），[Node.js streams](https://github.com/transduce/transduce-stream)\nlazy lists, indefinite sequence generation, CSP[http://phuu.net/2014/08/31/csp-and-transducers.html), [push streams][12], [Node.js streams](https://github.com/transduce/transduce-stream), iterators, generators, immutable-js data structures, 等等。\n\n## 等不及了！\n\n在此期间，可以查看 [Clojure文档](http://clojure.org/transducers), 或者观看[视频](https://www.youtube.com/watch?v=6mTbuzafcII)或这篇[文章](http://phuu.net/2014/08/31/csp-and-transducers.html)，还有其他更多更好的介绍，可以自行 Google 。\n\n想要立刻实践一下？已经有三个库实现了相似的API：[transducers-js](https://github.com/cognitect-labs/transducers-js)、[transducers.js](https://github.com/jlongster/transducers.js)、[ramda](https://github.com/ramda/ramda/blob/v0.22.1/src/transduce.js)(译者注：ramda 中 transducer 部分也是本文作者写的）。本文介绍与 transducers-js 实现类似，但概念同样适用于 transducers.js。\n\n[Underscore.js](http://underscorejs.org/) 的粉丝？可以查看 [underarm](http://simplectic.com/projects/underarm/)，基于 [transduce](https://github.com/transduce/transduce) 库（译者注：本文作者写的库）写的。\n\n怎样将 transducer 应用到 [Node.js streams](https://github.com/transduce/transduce-stream) 中呢？我们还在探索。\n\n希望得到新文章的通知？可以在 Twitter 上关注 [simplectic](https://twitter.com/simplectic)。\n\n","source":"_posts/Transducers-Explained-Part-1.md","raw":"---\ntitle: 'Transducers Explained: Part 1 中文'\ndate: 2016-10-24 10:10:20\ntags:\n---\n\n译者注：本文翻译自 Kevin Beaty 的《[Transducers Explained: Part 1](http://simplectic.com/blog/2014/transducers-explained-1/)》, 转载请与[原作者](https://github.com/kevinbeaty)或[本人](https://github.com/adispring)联系。 \n对原文中出现的专业术语，在不妨碍理解的情况下采用原文单词。\n\nTransduce 相较于 Reduce 的改进，用一句话概括：在使用 Reduce 对每个元素归约之前，先对取出的每个元素进行转换。\n\nTransduce 的时间复杂度为 O(n), 传统 compose + reduce 的为O(mn)，m：compose 中包含 转变函数的个数，n：输入“类数组”的长度。\n\n名词解释：\n\n* reduce：归约、折叠。\n* transduce：transform + reduce。\n* transducer：出入一个transformer，返回一个新的transformer。\n* transformer：封装 *reducing function*，返回控制 reduce 声明周期的对象 `init` `step` `result` \n* xf：reduce 函数的首个参数，可以是 *reducing Function*，也可以是 transformer。\n* reducing function：用来进行 reduce 的二元函数。\n* stepper function：等同于 reducing function。\n* result：reducing function 的首个参数，累加器。\n* item：reducing function 的第二个参数。reduce 遍历对象的每个元素。\n\n下面开始正文。\n\n---\n\n本文使用 JavaScript 对 transducers 原理进行剖析。首先介绍数组的 reducing(归约) 过程，以此讲解 reduce 中用于转换的 transformers；然后逐步引入 transducers，并将其用于 transduce 中。文末会有总结、展望、一些补充链接，以及当前涉及 transducer 的一些库。\n\n**Transducers...**\n\n\n## 什么是 Transducers ？\n\n[原文](http://clojure.org/reference/transducers)解释如下\n\n> Transducers 是可组合的算法变换。它们独立于输入和输出的上下文，并且作为一个独立的单元提供最基本的 transformation。由于 transducers 与输入和输出相解耦，所以它们可以用于许多不同的处理场景：collections, streams, channels, observables（集合、流、管道、观察者模式）等。Transducers 可以直接组合，与输入无关且不会产生额外的中间变量。\n\n**嗯...**\n\n## 还是不太理解\n\n让我们看看相关的代码。当使用 transducers 时，\"algorithmic transformations\" 已经（至少部分）被定义了, 定义的函数类似于传入 reduce 的“函数参数”。[Clojure 文档](http://clojure.org/reference/transducers)将这些\"algorithmic transformations\" 称为 reducing functions。这又是什么东西？好吧…… ，让我们从数组的 reduce 函数开始讲解。可以先看下 [MDN 的定义](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)。 \n\n## Reduce\n\n> reduce() 方法将一个二元函数作用于一个累加器和数组的每个元素（从左到右依次取出）， 最终输出为与累加器类型相同的单个值。\n\n更多解释可以参考 [MDN 文档](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)（译者注：reduce 在某些语言中称为 foldl 左折叠，如 Haskell）。大家对 reduce 可能已经比较熟悉，在此将快速举些例子说明一下。\n\n```js\nconst sum = (result, item) => result + item;\n\nconst mult = (result, item) => result * item;\n\n// 10 (=1+2+3+4)\nconst summed = [2,3,4].reduce(sum, 1);\n\n// 24 (=1*2*3*4)\nconst multed = [2,3,4].reduce(mult, 1);\n```\n\n上述代码中的 *reducing functions* 是 `sum` 和 `mult`。*reducing functions* 连同初始值：1，一起传入 `reduce` 中。“输入源”是数组 [2, 3, 4]，“输出源”是通过 reduce 内部实现创建的新数组。\n\n关于 `reduce`， 需要记住的非常重要几点是：\n\n1. 归约（reduce）从输入的初始值开始。\n2. *reducing functions* 每次对一个元素进行操作，操作过程为：\n    * 初始值作为第一步的“结果参数”\n    * 单步操作函数(*reducing functions* )的返回值作为下次迭代的“结果参数”\n3. 将最后一次计算结果作为返回值。\n\n注意，在上述两例中，*reducing function* 是一个二元函数。*reducing function* 第一个参数是由 reduce 函数外部提供的, 其值为传入的初始值或者上次调用 *reducing function* 的计算结果。第二个参数是由某个迭代过程传入的单个元素。本例中， reduce 对数组中的每个元素进行迭代。我们稍后会看到其他的迭代方式。我们使用 *reduce function* 来描述 “转换（归约）的本质”。\n\n## Transformer\n\n我们来正式实现 *transformer* 的归约过程：\n\n```js\nconst transformer = reducingFunction => ({\n  // 1. 作为 reduce 开始的初始值\n  init: () => 1,\n\n  // 2. 每次输入一个元素，并将本次计算结果\n  //    传给下次迭代的 reducing function\n  step: reducingFunction,\n\n  // 3. 将最后一次的计算结果作为输出\n  result: result => result,\n});\n```\n\n我们创建一个对象来封装 reduce 的内部实现。其中包括一个名为 `step` 的 reducing function，一个用来初始化 transformer 的 `init`函数和一个用来将最后一次计算结果转换为需要的输出的 `result`函数。注意，在本文中，我们将只关注 `step` 函数，`init` 和 `result` 函数将在后续文章中做深入分析。现在，你可以把它们当作管理 transformation 声明周期的方法：`init` 用于初始化，`step` 用于迭代，`result` 用于输出整个归约结果。\n\n现在让我们将刚定义的 transformer 运用到 reduce 中。\n\n```js\nconst input = [2,3,4];\n\nconst xf = transformer(sum);\nconst output = input.reduce(xf.step, xf.init());\n// output = 10 (=1+2+3+4)\n\nconst xf = transformer(mult);\nconst output = input.reduce(xf.step, xf.init());\n// output = 24 (=1*2*3*4)\n```\n\n我们的目标是将 transformation 与输入和输出解耦，所以将 reduce 定义为函数。\n\n```js\nconst reduce = (xf, init, input) => {\n  let result = input.reduce(xf.step, init);\n  return xf.result(result);\n};\n```\n\n在使用 reduce 时，我们传入一个 transducer、初始值和输入源。上述实现将 *step function* 与数组的 reduce 方法结合使用，并将 *step function* 的结果作为输出。本次 reduce 的内部实现仍然假设输入类型为数组。 我们稍后将去掉这个假设。\n\n我们还接受一个 `init` 值作为 reduce 的参数，我们本可以使用 transformer 的 `init`，但是考虑到 reduce 函数的灵活性，需要能够自定义初始值。在实践中，transformer 的 `init` 函数仅在 reduce 未提供初始值的情况下使用。\n\n新 reduce 函数的使用类似于之前的 reduce 。\n\n```js\nconst input = [2,3,4];\nconst xf = transformer(sum);\nconst output = reduce(xf, xf.init(), input);\n// output = 10 (=1+2+3+4)\n\nconst input = [2,3,4];\nconst xf = transformer(mult);\nconst output = reduce(xf, xf.init(), input);\n// output = 24 (=1*2*3*4)\n```\n\n还可以给 reduce 传入初始值。\n\n```js\nconst input = [2,3,4];\nconst xf = transformer(sum);\nconst output = reduce(xf, 2, input);\n// output = 11 (=2+2+3+4)\n\nconst input = [2,3,4];\nconst xf = transformer(mult);\nconst output = reduce(xf, 2, input);\n// output = 48 (=2*2*3*4)\n```\nreduce 函数现在需要一个 transformer。由于 transformer的 `init` 函数未在 reduce 中用到，且 `result` 经常作为单位元(identity、恒等)函数使用：一个直接返回单参数（输入本身）的函数，我们将定义一个辅助函数，来将 *reduceing function* 转换为 transformer，并传入 reduce 使用。\n\n```js\nconst reduce = (xf, init, input) => {\n  if(typeof xf === 'function'){\n    // 确保 reduce 中含有 transformer \n    xf = wrap(xf);\n  }\n  const result = input.reduce(xf.step, init);\n  return xf.result(result);\n}\n\nconst wrap = xf => ({\n  // 1. 我们会显式的传入一个 reduce 的初始值，\n  //    所以这里不再需要内部的 init 函数\n  init: () => {\n    throw new Error('init not supported');\n  },\n\n  // 2. 每次输入一个元素，并将本次计算结果\n  //    传给下次迭代的 reducing function\n  step: reducingFunction,\n\n  // 3. 将最后一次的计算结果作为输出\n  result: result => result,\n}\n```\n\n首先我们检查参数 `xf` 的类型是否为 function。若是，我们假定它是一个 step function, 并调用 wrap 函数将其转换为 transformer。然后像之前一样调用 reduce 。\n\n现在已经可以直接向 reduce 传递 reducing function了。\n\n```js\nconst input = [2,3,4];\nconst output = reduce(sum, 1, input);\n// output = 10 (=1+2+3+4)\n\nconst input = [2,3,4];\nconst output = reduce(mult, 2, input);\n// output = 48 (=2*2*3*4)\n```\n\n![reduce](./reduce.png)\n\n但我们仍然可以向 reduce 传 transformers。\n\n```js\nconst input = [2,3,4];\nconst xf = wrap(sum);\nconst output = reduce(xf, 2, input);\n// output = 11 (=2+2+3+4)\n\nconst input = [2,3,4];\nconst xf = wrap(mult);\nconst output = reduce(xf, 1, input);\n// output = 24 (=1*2*3*4)\n```\n\n请注意，我们现在可以在外部借助 wrap 直接封装已有的 *reducing functions* 来创建 transformer。这是使用 transducers 时经常用到的方法：将 transformations 定义为简单的函数，然后使用 transducers 库将其转换为transformer。\n\n## 不一样的数组拷贝\n\n目前，我们一直使用数字作为初始值和算术 *reducing functions* 的处理元素。其实不一定非要这样，`reduce` 也可以将数组作为处理元素。\n\n```js\nconst append = (result, item) => result.push(item);\n\nconst input = [2,3,4];\nconst output = reduce(append, [], input);\n// output = [2, 3, 4]\n```\n\n我们定义一个步进函数（stepper function）`append`，用于将每个元素拷贝到新数组中，并返回该数组。借助 `append`， reduce 便可以创建一份数组的拷贝。\n\n上述操作是否够酷？或许算不上...。当你在将元素添加到输出数组之前先对它变换一下时，情况才变得有趣起来。\n\n## 最孤单的数字\n\n（注：One is the loneliest number，一句英文歌词，引出 `plus1` 转换）\n\n假设我们想要每个元素加1，定义一个加1函数。\n\n```js\nconst plus1 = item => itme + 1;\n```\n\n现在创建一个 transformer ，它使用上面的函数在 step 中对每个独立元素进行转换。\n\n```js\nconst xfplus1 = {\n  init: () => { throw new Error('init not needed'); },\n\n  step: (result, item) => {\n    const plus1ed = plus1(item);\n    return append(result, plus1ed);\n  },\n  // step: (result, item) => append(result, plus1(item)),\n  \n  result: result => result,\n}\n```\n\n可以使用 transformer 逐步遍历并输出每步结果\n\n```js\nconst xf = xfplus1;\nconst init = [];\nlet result = xf.step(init, 2);\n// [3] (=append([], 2+1)))\n\nresult = xf.step(result, 3);\n// [3,4] (=append([3], 3+1)))\n\nresult = xf.step(result, 4);\n// [3,4,5] (=append([3,4], 4+1)))\n\nconst output = xf.result(result);\n// [3,4,5]\n```\n\n因此，我们使用一个 transformer 来遍历元素：将每个元素加1后添加到输出数组中。\n\n如果我们想要每个元素加1 后的总和，该怎么办呢？可以使用 reduce 。\n\n```js\nconst output = reduce(sum, 0, output);\n// 12 (=0+3+4+5)\n```\n\n上述方案虽然可行，但不幸的是，我们在获得最终答案的过程中，不得不创建一个中间数组。 有更好的方案吗？\n\n事实上是有的。回顾上面的 `xfplus1` ，如果我们将 `append` 调用换为 `sum` 调用，并且以 0 作为初始值，就可以定义一个不会产生中间数组，但直接对元素求和的 transformer。\n\n但是，有时我们想立即查看替换 *reducing function* 后的结果，因为中间涉及的唯一变化就是将 `append` 替换为 `sum`。因此我们希望有一个能够创建 transformation 的函数，该函数不依赖于用于组合中间结果的 transformer。\n\n```js\nconst transducerPlus1 = (xf) => ({\n  init: () => xf.init(),\n  step: (result, item) => {\n    const plus1ed = plus1(item);\n    return xf.step(result, plus1ed);\n  },\n  result: result => result,\n});\n```\n\n该函数接受一个 transformer：`xf`，返回一个基于 `xf` 的新的 transformer。新 transformer 将经由 `plus1` 转换后的结果代理给 `xf`。由于我们可以使用 `step` 函数完全定义这个 transformation，新的 transformer 的 `xf` 只需 `init` 和 `result`。每次迭代时，先将每个元素进行 `plus1` 转换，然后调用封装过的 transformer 内部的 `step` 函数。\n\n## Transducer\n\n我们刚刚创建了第一个 transducer：一个接受现有 transformer，并返回新 transformer 的函数。新 transformer 会改变原有 transformation 的行为，transducer 会将一些额外的处理委托给新的封装过的 transformer。\n\n让我们实践一下，首先用刚才的 transducer 来重新实现前面的例子。\n\n```js\nconst stepper = wrap(append);\nconst init = [];\nconst transducer = transducerPlus1;\nconst xf = transducer(stepper);\nlet result = xf.step(init, 2);\n// [3] (=append([], 2+1)))\n\nresult = xf.step(result, 3);\n// [3,4] (=append([3], 3+1)))\n\nresult = xf.step(result, 4);\n// [3,4,5] (=append([3,4], 4+1)))\n\nconst output = xf.result(result);\n// [3,4,5]\n```\n\n运行过程和结果与之前相同，很好。唯一的区别是 transformer：`xf` 的创建。我们使用 `wrap` 将 `append` 转换成名为 `stepper` 的 transformer，然后使用 transducer 封装这个 stepper 并返回一个 `plus1` 转换。然后我们就可以像从前一样使用转换函数：xf 对每个元素逐步操作，并得到结果。\n\n## 中间辅助元素\n\n从现在开始，事情变得有趣起来：我们可以用相同的 transducer 来获得最终的累加和，不需要中间辅助数组，只需改变 stepper 和初始值。\n\n```js\nconst stepper = wrap(sum);\nconst init = 0;\nconst transducer = transducerPlus1;\nconst xf = transducer(stepper);\nlet result = xf.step(init, 2);\n// 3 (=sum(0, 2+1)))\n\nresult = xf.step(result, 3);\n// 7 (=sum(3, 3+1)))\n\nresult = xf.step(result, 4);\n// 12 (=sum(7, 4+1)))\n\nconst output = xf.result(result);\n// 12\n```\n\n不需要计算中间数组，一次迭代就可以得到结果。`sum` 与之前 `append` 例子只有两处不同：\n\n* 创建 stepper 时，用 sum 代替 append 进行封装。\n* 初始值使用 0 代替 []。\n\n仅此两处差异，其他完全一样。\n\n需要注意的是，只有 `stepper` 转换知道 `result` 的数据类型。当封装 `sum` 时，结果类型为数字，封装 `append` 时，结果是数组。初始值类型与 stepper 的 `result` 参数类型相同。被处理的单个元素的类型不限，因为 stepper 知道如何组合上次输出的结果和新的元素，并返回一个新的组合的结果，本次输出结果可能会用于下次迭代中的组合，如此迭代循环。\n\n这些特性允许我们定义独立于输出的 transformation 。\n\n## 可能会变糟\n\n(注：第二句歌词，Can be as bad as one，作者意思应该是，如果 `plus2` 还跟 `plus1` 一样从头重新实现一遍，就比较坑了)\n\n假如我们想要在归约之前 `plus2`，需要改变哪些地方呢？我们可以定义一个类似于 `transducerPlus1` 的新的 `transducerPlus2` 。回头看一下 `transducerPlus1` 是如何实现的，并决定哪些地方需要更改。但这样做违反了 DRY 原则。\n\n有更好的方案吗？\n\n实际上，除了将 step 的值用 `plus2` 替换掉 `plus1` 以外，其他都是一样的。\n\n让我们将 `plus1` 提取出来，并将其作为函数 `f` 进行传递。\n\n```js\nconst map = f => xf => ({\n  init: () => xf.init(),\n  step: (result, item) => {\n    const mapped = f(item);\n    return xf.step(result, mapped);\n  },\n  result: result => xf.result(result),\n});\n```\n\n我们定义了 mapping transducer，让我们使用它来逐步转换。\n\n```js\nconst plus2 = (input) => input + 2;\nconst transducer = map(plus2);\nconst stepper = wrap(append);\nconst xf = transducer(stepper);\nconst init = [];\nlet result = xf.step(init, 2);\n// [4] (=append([], 2+2)))\n\nresult = xf.step(result, 3);\n// [4,5] (=append([4], 3+2)))\n\nresult = xf.step(result, 4);\n// [4,5,6] (=append([4,5], 4+1)))\n\nconst output = xf.result(result);\n// [4,5,6]\n```\n\n本例相较于之前使用`plus1` 和 `append` 函数的例子，唯一的区别在于使用 `map` 创建 transducer。我们可以类似地使用 `map(plus1)` 来创建 `plus1` transducer。`transducerPlus1` 虽然只是短暂的出现便被 `map(plus1)` 代替，但它对我们理解 transduce 的内部原理帮助很大。\n\n## Transduce\n\n前面的示例讲解了使用 transducers 手动转换一系列的输入。让我们进一步优化。\n\n首先通过调用一个包含 stepper 转换的 transducer 来初始化 transformation，并定义 transduce 的初始值。\n\n```js\nconst transducer = map(plus1);\nconst stepper = wrap(append);\nconst xf = transducer(stepper);\nconst init = [];\n```\n\n然后使用 *reducing function* `xf.step` 来遍历每个输入元素。将初始值作为 step 函数的第一个 `result` 参数（另一个是输入源中的元素），上一个 step 函数的返回值供所有后续元素迭代使用。\n\n```js\nlet result = xf.step(init, 2);\n// [3] (=append([], 2+1)))\n\nresult = xf.step(result, 3);\n// [3,4] (=append([3], 3+1)))\n\nresult = xf.step(result, 4);\n// [3,4,5] (=append([3,4], 4+1)))\n```\n\n我们使用 `xf.result` 输出最终结果。\n\n```js\nconst output = xf.result(result);\n// [3,4,5]\n```\n\n可能你已经注意到了，这与上面定义的 `reduce` 实现非常相似。 事实也是如此。 我们可以将这个过程封装成一个新的函数 `transduce`。\n\n```js\nconst transduce = (transducer, stepper, init, input) => {\n  if(typeof stepper === 'function'){\n    // 确保存在用于步进（迭代）的 transformer\n    stepper = wrap(stepper);\n  }\n\n  // 传入 stepper 来创建 transformer：xf\n  const xf = transducer(stepper);\n  // xf 现在成为一个 transformer\n  // 现在可以使用上面定义的 reduce 来迭代并\n  // （在迭代之前）变换输入元素\n  return reduce(xf, init, input);\n};\n```\n\n就像 reduce，我们需要确保 stepper 是一个 transformer。然后通过向 transducer 传入 stepper 来创建新的 transformer。 最后，我们使用包含新的 transformer 的 reduce 来进行迭代和转换结果。也就是说 transducer 的函数类型为：transformer -> transformer。\n\n我们来实践一下。\n\n```js\nconst transducer = map(plus1);\nconst stepper = append;\nconst init = [];\nconst input = [2,3,4];\nconst output = transduce(transducer, stepper, init, input);\n// [3,4,5]\n\nconst transducer = map(plus2);\nconst stepper = append;\nconst init = [];\nconst input = [2,3,4];\nconst output = transduce(transducer, stepper, init, input);\n// [4,5,6]\n```\n\n上述两例的唯一区别是传递给 map 的函数不同。\n\n我们来尝试一下不同的 step function 和初始值。\n\n```js\nconst transducer = map(plus1);\nconst stepper = sum;\nconst init = 0;\nconst input = [2,3,4];\nconst output = transduce(transducer, stepper, init, input);\n// 12 (=3+4+5)\n\nconst transducer = map(plus2);\nconst stepper = sum;\nconst init = 0;\nconst input = [2,3,4];\nconst output = transduce(transducer, stepper, init, input);\n// 15 (=4+5+6)\n\nconst transducer = map(plus1);\nconst stepper = mult;\nconst init = 1;\nconst input = [2,3,4];\nconst output = transduce(transducer, stepper, init, input);\n// 60 (=3*4*5)\n\nconst transducer = map(plus2);\nconst stepper = mult;\nconst init = 1;\nconst input = [2,3,4];\nconst output = transduce(transducer, stepper, init, input);\n// 120 (=4*5*6)\n```\n\n![transduce](./transduce.png)\n\n这里我们只是改变了 stepper 和初始值，便可以得到不同的结果。我们可以在不依赖中间变量的情况下，遍历一次便可求得累加和或乘积。\n\n## 组合\n\n如果我们想加3，改怎么办呢？我们可以定义 `plus3` 并且使用 `map`，但更好的方法是利用 transducers 的一个特性。\n\n事实上，我们可以通过其他两个函数：`plus1` 和 `plus2`，来定义 `plus3`。\n\n```js\nconst plus3 = item => puls2(plus1(item));\n```\n\n或许你已经看出来，其实这就是[函数组合](https://en.wikipedia.org/wiki/Function_composition_%28computer_science%29)。让我们通过函数组合来重新定义 `plus3`。\n\n```js\nconst compose2 = (fn1, fn2) => item => fn1(fn2(item));\n\nconst plus3 = compose2(plus1, plus2);\n\nconst output = [plus3(2), plus3(3), plus3(4)];\n// [5,6,7]\n```\n\n`compose2` 用于组合两个函数，调用顺序从右向左，看一下 `compose2` 的实现就可以知道为什么调用顺序是从右向左的了。最后一个 function 接受传入参数，返回结果作为下个 function 的输入。如此迭代，直到输出结果。\n\n让我们使用 `compose2` 来定义一个 transducer，该 transducer 由 `plus1` 和 `plus2` 组合而成，用于将每个迭代的元素加3。\n\n```js\nconst transducerPlus3 = map(compose2(plus1, plus2));\nconst transducer = transducerPlus3;\nconst stepper = append;\nconst init = [];\nconst input = [2,3,4];\nconst output = transduce(transducer, stepper, init, input);\n// [5,6,7]\n```\n\n我们使用“函数组合”来组合 `plus1` 和 `plus2` 而不是重新定义 `plus3`，来组合出传入 map 的加3操作。\n\n将上述这些的目的是什么呢？实际上，我们可以通过组合其他的 transducers 来创建新的 transducers。\n\n```js\nconst transducerPlus1 = map(plus1);\nconst transducerPlus2 = map(plus2);\nconst transducerPlus3 = compose2(transducerPlus1, transducerPlus2);\nconst transducer = transducerPlus3;\nconst stepper = append;\nconst init = [];\nconst input = [2,3,4];\nconst output = transduce(transducer, stepper, init, input);\n// [5,6,7]\n```\n\n新组合出来的 transducer 可以用于组合其他的 transducer 。\n\n```js\nconst transducerPlus1 = map(plus1);\nconst transducerPlus2 = map(plus2);\nconst transducerPlus3 = compose2(transducerPlus1, transducerPlus2);\nconst transducerPlus4 = compose2(transducerPlus3, transducerPlus1);\nconst transducer = transducerPlus4;\nconst stepper = append;\nconst init = [];\nconst input = [2,3,4];\nconst output = transduce(transducer, stepper, init, input);\n```\n![compose_transducers](./compose_transducers.png)\n\n再次注意，与本节前面的例子的唯一区别是 transducer 的创建。其它都没变。\n\n组合之所以能工作，是因为 transducers 的定义：接受一个 transformer 并返回一个新的 transformer。也即 transducer 的输入与返回值类型相同，且为单输入单输出。只要符合上述条件，便可以使用函数组合来创建与“输入函数”相同类型的“新函数”。\n\n由上可得，transducers 是一种 “可组合的算法变换”。这在实践中已经证明其强大之处：可以将新的变换定义为一系列较小变换的组合，然后将它们通过 `compose` 或 `pipe` 组合起来。我们将在后续章节中展示更多的例子。\n\n事实上，虽然函数组合调用顺序为由左向右，而 transformation 调用是自左向右的（译者注：这也是理解 transduce 的难点之一，理解了这个，也就基本理解了 transduce。可以通过单个 transducer 和 transformer 的组合，来理解 transformation 的调用顺序。transduce 本质上做的事情是 **在对每个元素进行归约之前先对其进行变换** ，将这句话重复五遍：），这也是 transduce 区别于 reduce 的“唯一”不同点）。\n\n在上面的 `transducersPlus4` 示例中，每个元素先进行 `plus3` 转换，然后进行 `plus1` 转换。\n\n虽然在本例中 transducers 的调用顺序对结果没有影响，但是**从左向右**的变换顺序还是需要牢记在心。这个变换调用顺序让你在阅读代码时更容易理解，因为它与你的阅读顺序是一至的（如果使用的是英文，或者中文）。\n\n## part 1 总结\n\nTransducers 将 “可组合的算法转换” 抽象出来，使其独立于输入、输出，甚至迭代的整个过程。\n\n本文演示了如何使用 transducers 来抽象算法转换，transducer 将一个 transformer 转换为另一个 transformer。transformer 可以用于 transduce 进行迭代和转换输入源。\n\n相较于 [Underscore.js](http://underscorejs.org/) 或 [Lo-Dash](https://lodash.com/)对数组和计算中间结果的对象进行操作，transducers 定义的 transformation 在函数方面类似于传递给 reduce 的 stepping function：将初始值作为首次迭代的“结果参数”，执行输入为一个“结果参数”和元素的函数，返回可能变换过的结果，并将其作为下次迭代的“结果参数”。一旦将 transformation 从数据中抽象出来，就可以将相同的 transformations 应用于以某初始值开始并遍历某个“累积结果”的不同处理过程。\n\n我们已经展示了相同的 transducers 可以操作不同的“输出源”，只需改变创建 transducer 时用到的初始值和 stepper function。这种抽象的好处之一是：可以遍历一次得到结果，且没有中间数组产生。\n\n尽管没有明确说明，我们还是展示了 transducers 将 transducer 与 迭代过程及输入源解耦。在迭代过程中，我们使用相同的 transducer 对元素进行转换，并将转换结果传给 step function，我们使用数组的 reduce 从数组中获取数据。\n\n## 还想了解更多！\n\n[看这里](http://simplectic.com/blog/2014/transducers-explained-pipelines/) ,以后的文章中将会进一步讨论 transducers 并不会每步都输出元素；并且可能会提前终止迭代，并返回终止前已经归约的结果。本文只讨论了 step，未讨论 init 和 result，将来会有补充。\n\n我们将会了解到，输入源可以是任意产生一系列值的东西：惰性列表，不确定的序列生成器，CSP（通信顺序进程），[Node.js streams](https://github.com/transduce/transduce-stream)\nlazy lists, indefinite sequence generation, CSP[http://phuu.net/2014/08/31/csp-and-transducers.html), [push streams][12], [Node.js streams](https://github.com/transduce/transduce-stream), iterators, generators, immutable-js data structures, 等等。\n\n## 等不及了！\n\n在此期间，可以查看 [Clojure文档](http://clojure.org/transducers), 或者观看[视频](https://www.youtube.com/watch?v=6mTbuzafcII)或这篇[文章](http://phuu.net/2014/08/31/csp-and-transducers.html)，还有其他更多更好的介绍，可以自行 Google 。\n\n想要立刻实践一下？已经有三个库实现了相似的API：[transducers-js](https://github.com/cognitect-labs/transducers-js)、[transducers.js](https://github.com/jlongster/transducers.js)、[ramda](https://github.com/ramda/ramda/blob/v0.22.1/src/transduce.js)(译者注：ramda 中 transducer 部分也是本文作者写的）。本文介绍与 transducers-js 实现类似，但概念同样适用于 transducers.js。\n\n[Underscore.js](http://underscorejs.org/) 的粉丝？可以查看 [underarm](http://simplectic.com/projects/underarm/)，基于 [transduce](https://github.com/transduce/transduce) 库（译者注：本文作者写的库）写的。\n\n怎样将 transducer 应用到 [Node.js streams](https://github.com/transduce/transduce-stream) 中呢？我们还在探索。\n\n希望得到新文章的通知？可以在 Twitter 上关注 [simplectic](https://twitter.com/simplectic)。\n\n","slug":"Transducers-Explained-Part-1","published":1,"updated":"2017-06-10T00:23:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3vm14he000f3bs68jib4tzq","content":"<p>译者注：本文翻译自 Kevin Beaty 的《<a href=\"http://simplectic.com/blog/2014/transducers-explained-1/\" target=\"_blank\" rel=\"external\">Transducers Explained: Part 1</a>》, 转载请与<a href=\"https://github.com/kevinbeaty\" target=\"_blank\" rel=\"external\">原作者</a>或<a href=\"https://github.com/adispring\" target=\"_blank\" rel=\"external\">本人</a>联系。\n对原文中出现的专业术语，在不妨碍理解的情况下采用原文单词。</p>\n<p>Transduce 相较于 Reduce 的改进，用一句话概括：在使用 Reduce 对每个元素归约之前，先对取出的每个元素进行转换。</p>\n<p>Transduce 的时间复杂度为 O(n), 传统 compose + reduce 的为O(mn)，m：compose 中包含 转变函数的个数，n：输入“类数组”的长度。</p>\n<p>名词解释：</p>\n<ul>\n<li>reduce：归约、折叠。</li>\n<li>transduce：transform + reduce。</li>\n<li>transducer：出入一个transformer，返回一个新的transformer。</li>\n<li>transformer：封装 <em>reducing function</em>，返回控制 reduce 声明周期的对象 <code>init</code> <code>step</code> <code>result</code></li>\n<li>xf：reduce 函数的首个参数，可以是 <em>reducing Function</em>，也可以是 transformer。</li>\n<li>reducing function：用来进行 reduce 的二元函数。</li>\n<li>stepper function：等同于 reducing function。</li>\n<li>result：reducing function 的首个参数，累加器。</li>\n<li>item：reducing function 的第二个参数。reduce 遍历对象的每个元素。</li>\n</ul>\n<p>下面开始正文。</p>\n<hr>\n<p>本文使用 JavaScript 对 transducers 原理进行剖析。首先介绍数组的 reducing(归约) 过程，以此讲解 reduce 中用于转换的 transformers；然后逐步引入 transducers，并将其用于 transduce 中。文末会有总结、展望、一些补充链接，以及当前涉及 transducer 的一些库。</p>\n<p><strong>Transducers...</strong></p>\n<h2 id=\"shi-yao-shi-transducers\">什么是 Transducers ？</h2>\n<p><a href=\"http://clojure.org/reference/transducers\" target=\"_blank\" rel=\"external\">原文</a>解释如下</p>\n<blockquote>\n<p>Transducers 是可组合的算法变换。它们独立于输入和输出的上下文，并且作为一个独立的单元提供最基本的 transformation。由于 transducers 与输入和输出相解耦，所以它们可以用于许多不同的处理场景：collections, streams, channels, observables（集合、流、管道、观察者模式）等。Transducers 可以直接组合，与输入无关且不会产生额外的中间变量。</p>\n</blockquote>\n<p><strong>嗯...</strong></p>\n<h2 id=\"huan-shi-bu-tai-li-jie\">还是不太理解</h2>\n<p>让我们看看相关的代码。当使用 transducers 时，&quot;algorithmic transformations&quot; 已经（至少部分）被定义了, 定义的函数类似于传入 reduce 的“函数参数”。<a href=\"http://clojure.org/reference/transducers\" target=\"_blank\" rel=\"external\">Clojure 文档</a>将这些&quot;algorithmic transformations&quot; 称为 reducing functions。这又是什么东西？好吧…… ，让我们从数组的 reduce 函数开始讲解。可以先看下 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\" target=\"_blank\" rel=\"external\">MDN 的定义</a>。</p>\n<h2 id=\"reduce\">Reduce</h2>\n<blockquote>\n<p>reduce() 方法将一个二元函数作用于一个累加器和数组的每个元素（从左到右依次取出）， 最终输出为与累加器类型相同的单个值。</p>\n</blockquote>\n<p>更多解释可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\" target=\"_blank\" rel=\"external\">MDN 文档</a>（译者注：reduce 在某些语言中称为 foldl 左折叠，如 Haskell）。大家对 reduce 可能已经比较熟悉，在此将快速举些例子说明一下。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> sum = <span class=\"function\">(<span class=\"params\">result, item</span>) =&gt;</span> result + item;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> mult = <span class=\"function\">(<span class=\"params\">result, item</span>) =&gt;</span> result * item;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 10 (=1+2+3+4)</span></div><div class=\"line\"><span class=\"keyword\">const</span> summed = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>].reduce(sum, <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 24 (=1*2*3*4)</span></div><div class=\"line\"><span class=\"keyword\">const</span> multed = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>].reduce(mult, <span class=\"number\">1</span>);</div></pre></td></tr></table></figure></p>\n<p>上述代码中的 <em>reducing functions</em> 是 <code>sum</code> 和 <code>mult</code>。<em>reducing functions</em> 连同初始值：1，一起传入 <code>reduce</code> 中。“输入源”是数组 [2, 3, 4]，“输出源”是通过 reduce 内部实现创建的新数组。</p>\n<p>关于 <code>reduce</code>， 需要记住的非常重要几点是：</p>\n<ol>\n<li>归约（reduce）从输入的初始值开始。</li>\n<li><em>reducing functions</em> 每次对一个元素进行操作，操作过程为：\n<ul>\n<li>初始值作为第一步的“结果参数”</li>\n<li>单步操作函数(<em>reducing functions</em> )的返回值作为下次迭代的“结果参数”</li>\n</ul>\n</li>\n<li>将最后一次计算结果作为返回值。</li>\n</ol>\n<p>注意，在上述两例中，<em>reducing function</em> 是一个二元函数。<em>reducing function</em> 第一个参数是由 reduce 函数外部提供的, 其值为传入的初始值或者上次调用 <em>reducing function</em> 的计算结果。第二个参数是由某个迭代过程传入的单个元素。本例中， reduce 对数组中的每个元素进行迭代。我们稍后会看到其他的迭代方式。我们使用 <em>reduce function</em> 来描述 “转换（归约）的本质”。</p>\n<h2 id=\"transformer\">Transformer</h2>\n<p>我们来正式实现 <em>transformer</em> 的归约过程：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transformer = <span class=\"function\"><span class=\"params\">reducingFunction</span> =&gt;</span> (&#123;</div><div class=\"line\">  <span class=\"comment\">// 1. 作为 reduce 开始的初始值</span></div><div class=\"line\">  init: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"number\">1</span>,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 2. 每次输入一个元素，并将本次计算结果</span></div><div class=\"line\">  <span class=\"comment\">//    传给下次迭代的 reducing function</span></div><div class=\"line\">  step: reducingFunction,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 3. 将最后一次的计算结果作为输出</span></div><div class=\"line\">  result: <span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result,</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>我们创建一个对象来封装 reduce 的内部实现。其中包括一个名为 <code>step</code> 的 reducing function，一个用来初始化 transformer 的 <code>init</code>函数和一个用来将最后一次计算结果转换为需要的输出的 <code>result</code>函数。注意，在本文中，我们将只关注 <code>step</code> 函数，<code>init</code> 和 <code>result</code> 函数将在后续文章中做深入分析。现在，你可以把它们当作管理 transformation 声明周期的方法：<code>init</code> 用于初始化，<code>step</code> 用于迭代，<code>result</code> 用于输出整个归约结果。</p>\n<p>现在让我们将刚定义的 transformer 运用到 reduce 中。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> xf = transformer(sum);</div><div class=\"line\"><span class=\"keyword\">const</span> output = input.reduce(xf.step, xf.init());</div><div class=\"line\"><span class=\"comment\">// output = 10 (=1+2+3+4)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> xf = transformer(mult);</div><div class=\"line\"><span class=\"keyword\">const</span> output = input.reduce(xf.step, xf.init());</div><div class=\"line\"><span class=\"comment\">// output = 24 (=1*2*3*4)</span></div></pre></td></tr></table></figure></p>\n<p>我们的目标是将 transformation 与输入和输出解耦，所以将 reduce 定义为函数。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> reduce = <span class=\"function\">(<span class=\"params\">xf, init, input</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> result = input.reduce(xf.step, init);</div><div class=\"line\">  <span class=\"keyword\">return</span> xf.result(result);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>在使用 reduce 时，我们传入一个 transducer、初始值和输入源。上述实现将 <em>step function</em> 与数组的 reduce 方法结合使用，并将 <em>step function</em> 的结果作为输出。本次 reduce 的内部实现仍然假设输入类型为数组。 我们稍后将去掉这个假设。</p>\n<p>我们还接受一个 <code>init</code> 值作为 reduce 的参数，我们本可以使用 transformer 的 <code>init</code>，但是考虑到 reduce 函数的灵活性，需要能够自定义初始值。在实践中，transformer 的 <code>init</code> 函数仅在 reduce 未提供初始值的情况下使用。</p>\n<p>新 reduce 函数的使用类似于之前的 reduce 。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> xf = transformer(sum);</div><div class=\"line\"><span class=\"keyword\">const</span> output = reduce(xf, xf.init(), input);</div><div class=\"line\"><span class=\"comment\">// output = 10 (=1+2+3+4)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> xf = transformer(mult);</div><div class=\"line\"><span class=\"keyword\">const</span> output = reduce(xf, xf.init(), input);</div><div class=\"line\"><span class=\"comment\">// output = 24 (=1*2*3*4)</span></div></pre></td></tr></table></figure></p>\n<p>还可以给 reduce 传入初始值。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> xf = transformer(sum);</div><div class=\"line\"><span class=\"keyword\">const</span> output = reduce(xf, <span class=\"number\">2</span>, input);</div><div class=\"line\"><span class=\"comment\">// output = 11 (=2+2+3+4)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> xf = transformer(mult);</div><div class=\"line\"><span class=\"keyword\">const</span> output = reduce(xf, <span class=\"number\">2</span>, input);</div><div class=\"line\"><span class=\"comment\">// output = 48 (=2*2*3*4)</span></div></pre></td></tr></table></figure></p>\n<p>reduce 函数现在需要一个 transformer。由于 transformer的 <code>init</code> 函数未在 reduce 中用到，且 <code>result</code> 经常作为单位元(identity、恒等)函数使用：一个直接返回单参数（输入本身）的函数，我们将定义一个辅助函数，来将 <em>reduceing function</em> 转换为 transformer，并传入 reduce 使用。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> reduce = <span class=\"function\">(<span class=\"params\">xf, init, input</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> xf === <span class=\"string\">'function'</span>)&#123;</div><div class=\"line\">    <span class=\"comment\">// 确保 reduce 中含有 transformer </span></div><div class=\"line\">    xf = wrap(xf);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">const</span> result = input.reduce(xf.step, init);</div><div class=\"line\">  <span class=\"keyword\">return</span> xf.result(result);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> wrap = <span class=\"function\"><span class=\"params\">xf</span> =&gt;</span> (&#123;</div><div class=\"line\">  <span class=\"comment\">// 1. 我们会显式的传入一个 reduce 的初始值，</span></div><div class=\"line\">  <span class=\"comment\">//    所以这里不再需要内部的 init 函数</span></div><div class=\"line\">  init: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'init not supported'</span>);</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 2. 每次输入一个元素，并将本次计算结果</span></div><div class=\"line\">  <span class=\"comment\">//    传给下次迭代的 reducing function</span></div><div class=\"line\">  step: reducingFunction,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 3. 将最后一次的计算结果作为输出</span></div><div class=\"line\">  result: <span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>首先我们检查参数 <code>xf</code> 的类型是否为 function。若是，我们假定它是一个 step function, 并调用 wrap 函数将其转换为 transformer。然后像之前一样调用 reduce 。</p>\n<p>现在已经可以直接向 reduce 传递 reducing function了。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = reduce(sum, <span class=\"number\">1</span>, input);</div><div class=\"line\"><span class=\"comment\">// output = 10 (=1+2+3+4)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = reduce(mult, <span class=\"number\">2</span>, input);</div><div class=\"line\"><span class=\"comment\">// output = 48 (=2*2*3*4)</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"./reduce.png\" alt=\"reduce\"></p>\n<p>但我们仍然可以向 reduce 传 transformers。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> xf = wrap(sum);</div><div class=\"line\"><span class=\"keyword\">const</span> output = reduce(xf, <span class=\"number\">2</span>, input);</div><div class=\"line\"><span class=\"comment\">// output = 11 (=2+2+3+4)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> xf = wrap(mult);</div><div class=\"line\"><span class=\"keyword\">const</span> output = reduce(xf, <span class=\"number\">1</span>, input);</div><div class=\"line\"><span class=\"comment\">// output = 24 (=1*2*3*4)</span></div></pre></td></tr></table></figure></p>\n<p>请注意，我们现在可以在外部借助 wrap 直接封装已有的 <em>reducing functions</em> 来创建 transformer。这是使用 transducers 时经常用到的方法：将 transformations 定义为简单的函数，然后使用 transducers 库将其转换为transformer。</p>\n<h2 id=\"bu-yi-yang-de-shu-zu-kao-bei\">不一样的数组拷贝</h2>\n<p>目前，我们一直使用数字作为初始值和算术 <em>reducing functions</em> 的处理元素。其实不一定非要这样，<code>reduce</code> 也可以将数组作为处理元素。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> append = <span class=\"function\">(<span class=\"params\">result, item</span>) =&gt;</span> result.push(item);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = reduce(append, [], input);</div><div class=\"line\"><span class=\"comment\">// output = [2, 3, 4]</span></div></pre></td></tr></table></figure></p>\n<p>我们定义一个步进函数（stepper function）<code>append</code>，用于将每个元素拷贝到新数组中，并返回该数组。借助 <code>append</code>， reduce 便可以创建一份数组的拷贝。</p>\n<p>上述操作是否够酷？或许算不上...。当你在将元素添加到输出数组之前先对它变换一下时，情况才变得有趣起来。</p>\n<h2 id=\"zui-gu-dan-de-shu-zi\">最孤单的数字</h2>\n<p>（注：One is the loneliest number，一句英文歌词，引出 <code>plus1</code> 转换）</p>\n<p>假设我们想要每个元素加1，定义一个加1函数。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> plus1 = <span class=\"function\"><span class=\"params\">item</span> =&gt;</span> itme + <span class=\"number\">1</span>;</div></pre></td></tr></table></figure></p>\n<p>现在创建一个 transformer ，它使用上面的函数在 step 中对每个独立元素进行转换。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> xfplus1 = &#123;</div><div class=\"line\">  <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'init not needed'</span>); &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attr\">step</span>: <span class=\"function\">(<span class=\"params\">result, item</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> plus1ed = plus1(item);</div><div class=\"line\">    <span class=\"keyword\">return</span> append(result, plus1ed);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// step: (result, item) =&gt; append(result, plus1(item)),</span></div><div class=\"line\">  </div><div class=\"line\">  result: <span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以使用 transformer 逐步遍历并输出每步结果</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> xf = xfplus1;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">let</span> result = xf.step(init, <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// [3] (=append([], 2+1)))</span></div><div class=\"line\"></div><div class=\"line\">result = xf.step(result, <span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"comment\">// [3,4] (=append([3], 3+1)))</span></div><div class=\"line\"></div><div class=\"line\">result = xf.step(result, <span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"comment\">// [3,4,5] (=append([3,4], 4+1)))</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> output = xf.result(result);</div><div class=\"line\"><span class=\"comment\">// [3,4,5]</span></div></pre></td></tr></table></figure></p>\n<p>因此，我们使用一个 transformer 来遍历元素：将每个元素加1后添加到输出数组中。</p>\n<p>如果我们想要每个元素加1 后的总和，该怎么办呢？可以使用 reduce 。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> output = reduce(sum, <span class=\"number\">0</span>, output);</div><div class=\"line\"><span class=\"comment\">// 12 (=0+3+4+5)</span></div></pre></td></tr></table></figure></p>\n<p>上述方案虽然可行，但不幸的是，我们在获得最终答案的过程中，不得不创建一个中间数组。 有更好的方案吗？</p>\n<p>事实上是有的。回顾上面的 <code>xfplus1</code> ，如果我们将 <code>append</code> 调用换为 <code>sum</code> 调用，并且以 0 作为初始值，就可以定义一个不会产生中间数组，但直接对元素求和的 transformer。</p>\n<p>但是，有时我们想立即查看替换 <em>reducing function</em> 后的结果，因为中间涉及的唯一变化就是将 <code>append</code> 替换为 <code>sum</code>。因此我们希望有一个能够创建 transformation 的函数，该函数不依赖于用于组合中间结果的 transformer。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transducerPlus1 = <span class=\"function\">(<span class=\"params\">xf</span>) =&gt;</span> (&#123;</div><div class=\"line\">  <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> xf.init(),</div><div class=\"line\">  <span class=\"attr\">step</span>: <span class=\"function\">(<span class=\"params\">result, item</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> plus1ed = plus1(item);</div><div class=\"line\">    <span class=\"keyword\">return</span> xf.step(result, plus1ed);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">result</span>: <span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result,</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>该函数接受一个 transformer：<code>xf</code>，返回一个基于 <code>xf</code> 的新的 transformer。新 transformer 将经由 <code>plus1</code> 转换后的结果代理给 <code>xf</code>。由于我们可以使用 <code>step</code> 函数完全定义这个 transformation，新的 transformer 的 <code>xf</code> 只需 <code>init</code> 和 <code>result</code>。每次迭代时，先将每个元素进行 <code>plus1</code> 转换，然后调用封装过的 transformer 内部的 <code>step</code> 函数。</p>\n<h2 id=\"transducer\">Transducer</h2>\n<p>我们刚刚创建了第一个 transducer：一个接受现有 transformer，并返回新 transformer 的函数。新 transformer 会改变原有 transformation 的行为，transducer 会将一些额外的处理委托给新的封装过的 transformer。</p>\n<p>让我们实践一下，首先用刚才的 transducer 来重新实现前面的例子。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> stepper = wrap(append);</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> transducer = transducerPlus1;</div><div class=\"line\"><span class=\"keyword\">const</span> xf = transducer(stepper);</div><div class=\"line\"><span class=\"keyword\">let</span> result = xf.step(init, <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// [3] (=append([], 2+1)))</span></div><div class=\"line\"></div><div class=\"line\">result = xf.step(result, <span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"comment\">// [3,4] (=append([3], 3+1)))</span></div><div class=\"line\"></div><div class=\"line\">result = xf.step(result, <span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"comment\">// [3,4,5] (=append([3,4], 4+1)))</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> output = xf.result(result);</div><div class=\"line\"><span class=\"comment\">// [3,4,5]</span></div></pre></td></tr></table></figure></p>\n<p>运行过程和结果与之前相同，很好。唯一的区别是 transformer：<code>xf</code> 的创建。我们使用 <code>wrap</code> 将 <code>append</code> 转换成名为 <code>stepper</code> 的 transformer，然后使用 transducer 封装这个 stepper 并返回一个 <code>plus1</code> 转换。然后我们就可以像从前一样使用转换函数：xf 对每个元素逐步操作，并得到结果。</p>\n<h2 id=\"zhong-jian-fu-zhu-yuan-su\">中间辅助元素</h2>\n<p>从现在开始，事情变得有趣起来：我们可以用相同的 transducer 来获得最终的累加和，不需要中间辅助数组，只需改变 stepper 和初始值。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> stepper = wrap(sum);</div><div class=\"line\"><span class=\"keyword\">const</span> init = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> transducer = transducerPlus1;</div><div class=\"line\"><span class=\"keyword\">const</span> xf = transducer(stepper);</div><div class=\"line\"><span class=\"keyword\">let</span> result = xf.step(init, <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// 3 (=sum(0, 2+1)))</span></div><div class=\"line\"></div><div class=\"line\">result = xf.step(result, <span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"comment\">// 7 (=sum(3, 3+1)))</span></div><div class=\"line\"></div><div class=\"line\">result = xf.step(result, <span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"comment\">// 12 (=sum(7, 4+1)))</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> output = xf.result(result);</div><div class=\"line\"><span class=\"comment\">// 12</span></div></pre></td></tr></table></figure></p>\n<p>不需要计算中间数组，一次迭代就可以得到结果。<code>sum</code> 与之前 <code>append</code> 例子只有两处不同：</p>\n<ul>\n<li>创建 stepper 时，用 sum 代替 append 进行封装。</li>\n<li>初始值使用 0 代替 []。</li>\n</ul>\n<p>仅此两处差异，其他完全一样。</p>\n<p>需要注意的是，只有 <code>stepper</code> 转换知道 <code>result</code> 的数据类型。当封装 <code>sum</code> 时，结果类型为数字，封装 <code>append</code> 时，结果是数组。初始值类型与 stepper 的 <code>result</code> 参数类型相同。被处理的单个元素的类型不限，因为 stepper 知道如何组合上次输出的结果和新的元素，并返回一个新的组合的结果，本次输出结果可能会用于下次迭代中的组合，如此迭代循环。</p>\n<p>这些特性允许我们定义独立于输出的 transformation 。</p>\n<h2 id=\"ke-neng-hui-bian-zao\">可能会变糟</h2>\n<p>(注：第二句歌词，Can be as bad as one，作者意思应该是，如果 <code>plus2</code> 还跟 <code>plus1</code> 一样从头重新实现一遍，就比较坑了)</p>\n<p>假如我们想要在归约之前 <code>plus2</code>，需要改变哪些地方呢？我们可以定义一个类似于 <code>transducerPlus1</code> 的新的 <code>transducerPlus2</code> 。回头看一下 <code>transducerPlus1</code> 是如何实现的，并决定哪些地方需要更改。但这样做违反了 DRY 原则。</p>\n<p>有更好的方案吗？</p>\n<p>实际上，除了将 step 的值用 <code>plus2</code> 替换掉 <code>plus1</code> 以外，其他都是一样的。</p>\n<p>让我们将 <code>plus1</code> 提取出来，并将其作为函数 <code>f</code> 进行传递。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> xf =&gt; (&#123;</div><div class=\"line\">  <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> xf.init(),</div><div class=\"line\">  <span class=\"attr\">step</span>: <span class=\"function\">(<span class=\"params\">result, item</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> mapped = f(item);</div><div class=\"line\">    <span class=\"keyword\">return</span> xf.step(result, mapped);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">result</span>: <span class=\"function\"><span class=\"params\">result</span> =&gt;</span> xf.result(result),</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>我们定义了 mapping transducer，让我们使用它来逐步转换。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> plus2 = <span class=\"function\">(<span class=\"params\">input</span>) =&gt;</span> input + <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> transducer = map(plus2);</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = wrap(append);</div><div class=\"line\"><span class=\"keyword\">const</span> xf = transducer(stepper);</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">let</span> result = xf.step(init, <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// [4] (=append([], 2+2)))</span></div><div class=\"line\"></div><div class=\"line\">result = xf.step(result, <span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"comment\">// [4,5] (=append([4], 3+2)))</span></div><div class=\"line\"></div><div class=\"line\">result = xf.step(result, <span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"comment\">// [4,5,6] (=append([4,5], 4+1)))</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> output = xf.result(result);</div><div class=\"line\"><span class=\"comment\">// [4,5,6]</span></div></pre></td></tr></table></figure></p>\n<p>本例相较于之前使用<code>plus1</code> 和 <code>append</code> 函数的例子，唯一的区别在于使用 <code>map</code> 创建 transducer。我们可以类似地使用 <code>map(plus1)</code> 来创建 <code>plus1</code> transducer。<code>transducerPlus1</code> 虽然只是短暂的出现便被 <code>map(plus1)</code> 代替，但它对我们理解 transduce 的内部原理帮助很大。</p>\n<h2 id=\"transduce\">Transduce</h2>\n<p>前面的示例讲解了使用 transducers 手动转换一系列的输入。让我们进一步优化。</p>\n<p>首先通过调用一个包含 stepper 转换的 transducer 来初始化 transformation，并定义 transduce 的初始值。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transducer = map(plus1);</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = wrap(append);</div><div class=\"line\"><span class=\"keyword\">const</span> xf = transducer(stepper);</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div></pre></td></tr></table></figure></p>\n<p>然后使用 <em>reducing function</em> <code>xf.step</code> 来遍历每个输入元素。将初始值作为 step 函数的第一个 <code>result</code> 参数（另一个是输入源中的元素），上一个 step 函数的返回值供所有后续元素迭代使用。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> result = xf.step(init, <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// [3] (=append([], 2+1)))</span></div><div class=\"line\"></div><div class=\"line\">result = xf.step(result, <span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"comment\">// [3,4] (=append([3], 3+1)))</span></div><div class=\"line\"></div><div class=\"line\">result = xf.step(result, <span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"comment\">// [3,4,5] (=append([3,4], 4+1)))</span></div></pre></td></tr></table></figure></p>\n<p>我们使用 <code>xf.result</code> 输出最终结果。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> output = xf.result(result);</div><div class=\"line\"><span class=\"comment\">// [3,4,5]</span></div></pre></td></tr></table></figure></p>\n<p>可能你已经注意到了，这与上面定义的 <code>reduce</code> 实现非常相似。 事实也是如此。 我们可以将这个过程封装成一个新的函数 <code>transduce</code>。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transduce = <span class=\"function\">(<span class=\"params\">transducer, stepper, init, input</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> stepper === <span class=\"string\">'function'</span>)&#123;</div><div class=\"line\">    <span class=\"comment\">// 确保存在用于步进（迭代）的 transformer</span></div><div class=\"line\">    stepper = wrap(stepper);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 传入 stepper 来创建 transformer：xf</span></div><div class=\"line\">  <span class=\"keyword\">const</span> xf = transducer(stepper);</div><div class=\"line\">  <span class=\"comment\">// xf 现在成为一个 transformer</span></div><div class=\"line\">  <span class=\"comment\">// 现在可以使用上面定义的 reduce 来迭代并</span></div><div class=\"line\">  <span class=\"comment\">// （在迭代之前）变换输入元素</span></div><div class=\"line\">  <span class=\"keyword\">return</span> reduce(xf, init, input);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>就像 reduce，我们需要确保 stepper 是一个 transformer。然后通过向 transducer 传入 stepper 来创建新的 transformer。 最后，我们使用包含新的 transformer 的 reduce 来进行迭代和转换结果。也就是说 transducer 的函数类型为：transformer -&gt; transformer。</p>\n<p>我们来实践一下。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transducer = map(plus1);</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [3,4,5]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> transducer = map(plus2);</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [4,5,6]</span></div></pre></td></tr></table></figure></p>\n<p>上述两例的唯一区别是传递给 map 的函数不同。</p>\n<p>我们来尝试一下不同的 step function 和初始值。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transducer = map(plus1);</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = sum;</div><div class=\"line\"><span class=\"keyword\">const</span> init = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// 12 (=3+4+5)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> transducer = map(plus2);</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = sum;</div><div class=\"line\"><span class=\"keyword\">const</span> init = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// 15 (=4+5+6)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> transducer = map(plus1);</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = mult;</div><div class=\"line\"><span class=\"keyword\">const</span> init = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// 60 (=3*4*5)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> transducer = map(plus2);</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = mult;</div><div class=\"line\"><span class=\"keyword\">const</span> init = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// 120 (=4*5*6)</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"./transduce.png\" alt=\"transduce\"></p>\n<p>这里我们只是改变了 stepper 和初始值，便可以得到不同的结果。我们可以在不依赖中间变量的情况下，遍历一次便可求得累加和或乘积。</p>\n<h2 id=\"zu-he\">组合</h2>\n<p>如果我们想加3，改怎么办呢？我们可以定义 <code>plus3</code> 并且使用 <code>map</code>，但更好的方法是利用 transducers 的一个特性。</p>\n<p>事实上，我们可以通过其他两个函数：<code>plus1</code> 和 <code>plus2</code>，来定义 <code>plus3</code>。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> plus3 = <span class=\"function\"><span class=\"params\">item</span> =&gt;</span> puls2(plus1(item));</div></pre></td></tr></table></figure></p>\n<p>或许你已经看出来，其实这就是<a href=\"https://en.wikipedia.org/wiki/Function_composition_%28computer_science%29\" target=\"_blank\" rel=\"external\">函数组合</a>。让我们通过函数组合来重新定义 <code>plus3</code>。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> compose2 = <span class=\"function\">(<span class=\"params\">fn1, fn2</span>) =&gt;</span> item =&gt; fn1(fn2(item));</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> plus3 = compose2(plus1, plus2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> output = [plus3(<span class=\"number\">2</span>), plus3(<span class=\"number\">3</span>), plus3(<span class=\"number\">4</span>)];</div><div class=\"line\"><span class=\"comment\">// [5,6,7]</span></div></pre></td></tr></table></figure></p>\n<p><code>compose2</code> 用于组合两个函数，调用顺序从右向左，看一下 <code>compose2</code> 的实现就可以知道为什么调用顺序是从右向左的了。最后一个 function 接受传入参数，返回结果作为下个 function 的输入。如此迭代，直到输出结果。</p>\n<p>让我们使用 <code>compose2</code> 来定义一个 transducer，该 transducer 由 <code>plus1</code> 和 <code>plus2</code> 组合而成，用于将每个迭代的元素加3。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transducerPlus3 = map(compose2(plus1, plus2));</div><div class=\"line\"><span class=\"keyword\">const</span> transducer = transducerPlus3;</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [5,6,7]</span></div></pre></td></tr></table></figure></p>\n<p>我们使用“函数组合”来组合 <code>plus1</code> 和 <code>plus2</code> 而不是重新定义 <code>plus3</code>，来组合出传入 map 的加3操作。</p>\n<p>将上述这些的目的是什么呢？实际上，我们可以通过组合其他的 transducers 来创建新的 transducers。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transducerPlus1 = map(plus1);</div><div class=\"line\"><span class=\"keyword\">const</span> transducerPlus2 = map(plus2);</div><div class=\"line\"><span class=\"keyword\">const</span> transducerPlus3 = compose2(transducerPlus1, transducerPlus2);</div><div class=\"line\"><span class=\"keyword\">const</span> transducer = transducerPlus3;</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [5,6,7]</span></div></pre></td></tr></table></figure></p>\n<p>新组合出来的 transducer 可以用于组合其他的 transducer 。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transducerPlus1 = map(plus1);</div><div class=\"line\"><span class=\"keyword\">const</span> transducerPlus2 = map(plus2);</div><div class=\"line\"><span class=\"keyword\">const</span> transducerPlus3 = compose2(transducerPlus1, transducerPlus2);</div><div class=\"line\"><span class=\"keyword\">const</span> transducerPlus4 = compose2(transducerPlus3, transducerPlus1);</div><div class=\"line\"><span class=\"keyword\">const</span> transducer = transducerPlus4;</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div></pre></td></tr></table></figure></p>\n<p><img src=\"./compose_transducers.png\" alt=\"compose_transducers\"></p>\n<p>再次注意，与本节前面的例子的唯一区别是 transducer 的创建。其它都没变。</p>\n<p>组合之所以能工作，是因为 transducers 的定义：接受一个 transformer 并返回一个新的 transformer。也即 transducer 的输入与返回值类型相同，且为单输入单输出。只要符合上述条件，便可以使用函数组合来创建与“输入函数”相同类型的“新函数”。</p>\n<p>由上可得，transducers 是一种 “可组合的算法变换”。这在实践中已经证明其强大之处：可以将新的变换定义为一系列较小变换的组合，然后将它们通过 <code>compose</code> 或 <code>pipe</code> 组合起来。我们将在后续章节中展示更多的例子。</p>\n<p>事实上，虽然函数组合调用顺序为由左向右，而 transformation 调用是自左向右的（译者注：这也是理解 transduce 的难点之一，理解了这个，也就基本理解了 transduce。可以通过单个 transducer 和 transformer 的组合，来理解 transformation 的调用顺序。transduce 本质上做的事情是 <strong>在对每个元素进行归约之前先对其进行变换</strong> ，将这句话重复五遍：），这也是 transduce 区别于 reduce 的“唯一”不同点）。</p>\n<p>在上面的 <code>transducersPlus4</code> 示例中，每个元素先进行 <code>plus3</code> 转换，然后进行 <code>plus1</code> 转换。</p>\n<p>虽然在本例中 transducers 的调用顺序对结果没有影响，但是<strong>从左向右</strong>的变换顺序还是需要牢记在心。这个变换调用顺序让你在阅读代码时更容易理解，因为它与你的阅读顺序是一至的（如果使用的是英文，或者中文）。</p>\n<h2 id=\"part-1-zong-jie\">part 1 总结</h2>\n<p>Transducers 将 “可组合的算法转换” 抽象出来，使其独立于输入、输出，甚至迭代的整个过程。</p>\n<p>本文演示了如何使用 transducers 来抽象算法转换，transducer 将一个 transformer 转换为另一个 transformer。transformer 可以用于 transduce 进行迭代和转换输入源。</p>\n<p>相较于 <a href=\"http://underscorejs.org/\" target=\"_blank\" rel=\"external\">Underscore.js</a> 或 <a href=\"https://lodash.com/\" target=\"_blank\" rel=\"external\">Lo-Dash</a>对数组和计算中间结果的对象进行操作，transducers 定义的 transformation 在函数方面类似于传递给 reduce 的 stepping function：将初始值作为首次迭代的“结果参数”，执行输入为一个“结果参数”和元素的函数，返回可能变换过的结果，并将其作为下次迭代的“结果参数”。一旦将 transformation 从数据中抽象出来，就可以将相同的 transformations 应用于以某初始值开始并遍历某个“累积结果”的不同处理过程。</p>\n<p>我们已经展示了相同的 transducers 可以操作不同的“输出源”，只需改变创建 transducer 时用到的初始值和 stepper function。这种抽象的好处之一是：可以遍历一次得到结果，且没有中间数组产生。</p>\n<p>尽管没有明确说明，我们还是展示了 transducers 将 transducer 与 迭代过程及输入源解耦。在迭代过程中，我们使用相同的 transducer 对元素进行转换，并将转换结果传给 step function，我们使用数组的 reduce 从数组中获取数据。</p>\n<h2 id=\"huan-xiang-liao-jie-geng-duo\">还想了解更多！</h2>\n<p><a href=\"http://simplectic.com/blog/2014/transducers-explained-pipelines/\" target=\"_blank\" rel=\"external\">看这里</a> ,以后的文章中将会进一步讨论 transducers 并不会每步都输出元素；并且可能会提前终止迭代，并返回终止前已经归约的结果。本文只讨论了 step，未讨论 init 和 result，将来会有补充。</p>\n<p>我们将会了解到，输入源可以是任意产生一系列值的东西：惰性列表，不确定的序列生成器，CSP（通信顺序进程），<a href=\"https://github.com/transduce/transduce-stream\" target=\"_blank\" rel=\"external\">Node.js streams</a>\nlazy lists, indefinite sequence generation, CSP[http://phuu.net/2014/08/31/csp-and-transducers.html), [push streams][12], <a href=\"https://github.com/transduce/transduce-stream\" target=\"_blank\" rel=\"external\">Node.js streams</a>, iterators, generators, immutable-js data structures, 等等。</p>\n<h2 id=\"deng-bu-ji-liao\">等不及了！</h2>\n<p>在此期间，可以查看 <a href=\"http://clojure.org/transducers\" target=\"_blank\" rel=\"external\">Clojure文档</a>, 或者观看<a href=\"https://www.youtube.com/watch?v=6mTbuzafcII\" target=\"_blank\" rel=\"external\">视频</a>或这篇<a href=\"http://phuu.net/2014/08/31/csp-and-transducers.html\" target=\"_blank\" rel=\"external\">文章</a>，还有其他更多更好的介绍，可以自行 Google 。</p>\n<p>想要立刻实践一下？已经有三个库实现了相似的API：<a href=\"https://github.com/cognitect-labs/transducers-js\" target=\"_blank\" rel=\"external\">transducers-js</a>、<a href=\"https://github.com/jlongster/transducers.js\" target=\"_blank\" rel=\"external\">transducers.js</a>、<a href=\"https://github.com/ramda/ramda/blob/v0.22.1/src/transduce.js\" target=\"_blank\" rel=\"external\">ramda</a>(译者注：ramda 中 transducer 部分也是本文作者写的）。本文介绍与 transducers-js 实现类似，但概念同样适用于 transducers.js。</p>\n<p><a href=\"http://underscorejs.org/\" target=\"_blank\" rel=\"external\">Underscore.js</a> 的粉丝？可以查看 <a href=\"http://simplectic.com/projects/underarm/\" target=\"_blank\" rel=\"external\">underarm</a>，基于 <a href=\"https://github.com/transduce/transduce\" target=\"_blank\" rel=\"external\">transduce</a> 库（译者注：本文作者写的库）写的。</p>\n<p>怎样将 transducer 应用到 <a href=\"https://github.com/transduce/transduce-stream\" target=\"_blank\" rel=\"external\">Node.js streams</a> 中呢？我们还在探索。</p>\n<p>希望得到新文章的通知？可以在 Twitter 上关注 <a href=\"https://twitter.com/simplectic\" target=\"_blank\" rel=\"external\">simplectic</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>译者注：本文翻译自 Kevin Beaty 的《<a href=\"http://simplectic.com/blog/2014/transducers-explained-1/\" target=\"_blank\" rel=\"external\">Transducers Explained: Part 1</a>》, 转载请与<a href=\"https://github.com/kevinbeaty\" target=\"_blank\" rel=\"external\">原作者</a>或<a href=\"https://github.com/adispring\" target=\"_blank\" rel=\"external\">本人</a>联系。\n对原文中出现的专业术语，在不妨碍理解的情况下采用原文单词。</p>\n<p>Transduce 相较于 Reduce 的改进，用一句话概括：在使用 Reduce 对每个元素归约之前，先对取出的每个元素进行转换。</p>\n<p>Transduce 的时间复杂度为 O(n), 传统 compose + reduce 的为O(mn)，m：compose 中包含 转变函数的个数，n：输入“类数组”的长度。</p>\n<p>名词解释：</p>\n<ul>\n<li>reduce：归约、折叠。</li>\n<li>transduce：transform + reduce。</li>\n<li>transducer：出入一个transformer，返回一个新的transformer。</li>\n<li>transformer：封装 <em>reducing function</em>，返回控制 reduce 声明周期的对象 <code>init</code> <code>step</code> <code>result</code></li>\n<li>xf：reduce 函数的首个参数，可以是 <em>reducing Function</em>，也可以是 transformer。</li>\n<li>reducing function：用来进行 reduce 的二元函数。</li>\n<li>stepper function：等同于 reducing function。</li>\n<li>result：reducing function 的首个参数，累加器。</li>\n<li>item：reducing function 的第二个参数。reduce 遍历对象的每个元素。</li>\n</ul>\n<p>下面开始正文。</p>\n<hr>\n<p>本文使用 JavaScript 对 transducers 原理进行剖析。首先介绍数组的 reducing(归约) 过程，以此讲解 reduce 中用于转换的 transformers；然后逐步引入 transducers，并将其用于 transduce 中。文末会有总结、展望、一些补充链接，以及当前涉及 transducer 的一些库。</p>\n<p><strong>Transducers...</strong></p>\n<h2 id=\"shi-yao-shi-transducers\">什么是 Transducers ？</h2>\n<p><a href=\"http://clojure.org/reference/transducers\" target=\"_blank\" rel=\"external\">原文</a>解释如下</p>\n<blockquote>\n<p>Transducers 是可组合的算法变换。它们独立于输入和输出的上下文，并且作为一个独立的单元提供最基本的 transformation。由于 transducers 与输入和输出相解耦，所以它们可以用于许多不同的处理场景：collections, streams, channels, observables（集合、流、管道、观察者模式）等。Transducers 可以直接组合，与输入无关且不会产生额外的中间变量。</p>\n</blockquote>\n<p><strong>嗯...</strong></p>\n<h2 id=\"huan-shi-bu-tai-li-jie\">还是不太理解</h2>\n<p>让我们看看相关的代码。当使用 transducers 时，&quot;algorithmic transformations&quot; 已经（至少部分）被定义了, 定义的函数类似于传入 reduce 的“函数参数”。<a href=\"http://clojure.org/reference/transducers\" target=\"_blank\" rel=\"external\">Clojure 文档</a>将这些&quot;algorithmic transformations&quot; 称为 reducing functions。这又是什么东西？好吧…… ，让我们从数组的 reduce 函数开始讲解。可以先看下 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\" target=\"_blank\" rel=\"external\">MDN 的定义</a>。</p>\n<h2 id=\"reduce\">Reduce</h2>\n<blockquote>\n<p>reduce() 方法将一个二元函数作用于一个累加器和数组的每个元素（从左到右依次取出）， 最终输出为与累加器类型相同的单个值。</p>\n</blockquote>\n<p>更多解释可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\" target=\"_blank\" rel=\"external\">MDN 文档</a>（译者注：reduce 在某些语言中称为 foldl 左折叠，如 Haskell）。大家对 reduce 可能已经比较熟悉，在此将快速举些例子说明一下。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> sum = <span class=\"function\">(<span class=\"params\">result, item</span>) =&gt;</span> result + item;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> mult = <span class=\"function\">(<span class=\"params\">result, item</span>) =&gt;</span> result * item;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 10 (=1+2+3+4)</span></div><div class=\"line\"><span class=\"keyword\">const</span> summed = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>].reduce(sum, <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 24 (=1*2*3*4)</span></div><div class=\"line\"><span class=\"keyword\">const</span> multed = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>].reduce(mult, <span class=\"number\">1</span>);</div></pre></td></tr></table></figure></p>\n<p>上述代码中的 <em>reducing functions</em> 是 <code>sum</code> 和 <code>mult</code>。<em>reducing functions</em> 连同初始值：1，一起传入 <code>reduce</code> 中。“输入源”是数组 [2, 3, 4]，“输出源”是通过 reduce 内部实现创建的新数组。</p>\n<p>关于 <code>reduce</code>， 需要记住的非常重要几点是：</p>\n<ol>\n<li>归约（reduce）从输入的初始值开始。</li>\n<li><em>reducing functions</em> 每次对一个元素进行操作，操作过程为：\n<ul>\n<li>初始值作为第一步的“结果参数”</li>\n<li>单步操作函数(<em>reducing functions</em> )的返回值作为下次迭代的“结果参数”</li>\n</ul>\n</li>\n<li>将最后一次计算结果作为返回值。</li>\n</ol>\n<p>注意，在上述两例中，<em>reducing function</em> 是一个二元函数。<em>reducing function</em> 第一个参数是由 reduce 函数外部提供的, 其值为传入的初始值或者上次调用 <em>reducing function</em> 的计算结果。第二个参数是由某个迭代过程传入的单个元素。本例中， reduce 对数组中的每个元素进行迭代。我们稍后会看到其他的迭代方式。我们使用 <em>reduce function</em> 来描述 “转换（归约）的本质”。</p>\n<h2 id=\"transformer\">Transformer</h2>\n<p>我们来正式实现 <em>transformer</em> 的归约过程：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transformer = <span class=\"function\"><span class=\"params\">reducingFunction</span> =&gt;</span> (&#123;</div><div class=\"line\">  <span class=\"comment\">// 1. 作为 reduce 开始的初始值</span></div><div class=\"line\">  init: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"number\">1</span>,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 2. 每次输入一个元素，并将本次计算结果</span></div><div class=\"line\">  <span class=\"comment\">//    传给下次迭代的 reducing function</span></div><div class=\"line\">  step: reducingFunction,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 3. 将最后一次的计算结果作为输出</span></div><div class=\"line\">  result: <span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result,</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>我们创建一个对象来封装 reduce 的内部实现。其中包括一个名为 <code>step</code> 的 reducing function，一个用来初始化 transformer 的 <code>init</code>函数和一个用来将最后一次计算结果转换为需要的输出的 <code>result</code>函数。注意，在本文中，我们将只关注 <code>step</code> 函数，<code>init</code> 和 <code>result</code> 函数将在后续文章中做深入分析。现在，你可以把它们当作管理 transformation 声明周期的方法：<code>init</code> 用于初始化，<code>step</code> 用于迭代，<code>result</code> 用于输出整个归约结果。</p>\n<p>现在让我们将刚定义的 transformer 运用到 reduce 中。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> xf = transformer(sum);</div><div class=\"line\"><span class=\"keyword\">const</span> output = input.reduce(xf.step, xf.init());</div><div class=\"line\"><span class=\"comment\">// output = 10 (=1+2+3+4)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> xf = transformer(mult);</div><div class=\"line\"><span class=\"keyword\">const</span> output = input.reduce(xf.step, xf.init());</div><div class=\"line\"><span class=\"comment\">// output = 24 (=1*2*3*4)</span></div></pre></td></tr></table></figure></p>\n<p>我们的目标是将 transformation 与输入和输出解耦，所以将 reduce 定义为函数。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> reduce = <span class=\"function\">(<span class=\"params\">xf, init, input</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> result = input.reduce(xf.step, init);</div><div class=\"line\">  <span class=\"keyword\">return</span> xf.result(result);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>在使用 reduce 时，我们传入一个 transducer、初始值和输入源。上述实现将 <em>step function</em> 与数组的 reduce 方法结合使用，并将 <em>step function</em> 的结果作为输出。本次 reduce 的内部实现仍然假设输入类型为数组。 我们稍后将去掉这个假设。</p>\n<p>我们还接受一个 <code>init</code> 值作为 reduce 的参数，我们本可以使用 transformer 的 <code>init</code>，但是考虑到 reduce 函数的灵活性，需要能够自定义初始值。在实践中，transformer 的 <code>init</code> 函数仅在 reduce 未提供初始值的情况下使用。</p>\n<p>新 reduce 函数的使用类似于之前的 reduce 。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> xf = transformer(sum);</div><div class=\"line\"><span class=\"keyword\">const</span> output = reduce(xf, xf.init(), input);</div><div class=\"line\"><span class=\"comment\">// output = 10 (=1+2+3+4)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> xf = transformer(mult);</div><div class=\"line\"><span class=\"keyword\">const</span> output = reduce(xf, xf.init(), input);</div><div class=\"line\"><span class=\"comment\">// output = 24 (=1*2*3*4)</span></div></pre></td></tr></table></figure></p>\n<p>还可以给 reduce 传入初始值。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> xf = transformer(sum);</div><div class=\"line\"><span class=\"keyword\">const</span> output = reduce(xf, <span class=\"number\">2</span>, input);</div><div class=\"line\"><span class=\"comment\">// output = 11 (=2+2+3+4)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> xf = transformer(mult);</div><div class=\"line\"><span class=\"keyword\">const</span> output = reduce(xf, <span class=\"number\">2</span>, input);</div><div class=\"line\"><span class=\"comment\">// output = 48 (=2*2*3*4)</span></div></pre></td></tr></table></figure></p>\n<p>reduce 函数现在需要一个 transformer。由于 transformer的 <code>init</code> 函数未在 reduce 中用到，且 <code>result</code> 经常作为单位元(identity、恒等)函数使用：一个直接返回单参数（输入本身）的函数，我们将定义一个辅助函数，来将 <em>reduceing function</em> 转换为 transformer，并传入 reduce 使用。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> reduce = <span class=\"function\">(<span class=\"params\">xf, init, input</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> xf === <span class=\"string\">'function'</span>)&#123;</div><div class=\"line\">    <span class=\"comment\">// 确保 reduce 中含有 transformer </span></div><div class=\"line\">    xf = wrap(xf);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">const</span> result = input.reduce(xf.step, init);</div><div class=\"line\">  <span class=\"keyword\">return</span> xf.result(result);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> wrap = <span class=\"function\"><span class=\"params\">xf</span> =&gt;</span> (&#123;</div><div class=\"line\">  <span class=\"comment\">// 1. 我们会显式的传入一个 reduce 的初始值，</span></div><div class=\"line\">  <span class=\"comment\">//    所以这里不再需要内部的 init 函数</span></div><div class=\"line\">  init: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'init not supported'</span>);</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 2. 每次输入一个元素，并将本次计算结果</span></div><div class=\"line\">  <span class=\"comment\">//    传给下次迭代的 reducing function</span></div><div class=\"line\">  step: reducingFunction,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 3. 将最后一次的计算结果作为输出</span></div><div class=\"line\">  result: <span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>首先我们检查参数 <code>xf</code> 的类型是否为 function。若是，我们假定它是一个 step function, 并调用 wrap 函数将其转换为 transformer。然后像之前一样调用 reduce 。</p>\n<p>现在已经可以直接向 reduce 传递 reducing function了。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = reduce(sum, <span class=\"number\">1</span>, input);</div><div class=\"line\"><span class=\"comment\">// output = 10 (=1+2+3+4)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = reduce(mult, <span class=\"number\">2</span>, input);</div><div class=\"line\"><span class=\"comment\">// output = 48 (=2*2*3*4)</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"./reduce.png\" alt=\"reduce\"></p>\n<p>但我们仍然可以向 reduce 传 transformers。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> xf = wrap(sum);</div><div class=\"line\"><span class=\"keyword\">const</span> output = reduce(xf, <span class=\"number\">2</span>, input);</div><div class=\"line\"><span class=\"comment\">// output = 11 (=2+2+3+4)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> xf = wrap(mult);</div><div class=\"line\"><span class=\"keyword\">const</span> output = reduce(xf, <span class=\"number\">1</span>, input);</div><div class=\"line\"><span class=\"comment\">// output = 24 (=1*2*3*4)</span></div></pre></td></tr></table></figure></p>\n<p>请注意，我们现在可以在外部借助 wrap 直接封装已有的 <em>reducing functions</em> 来创建 transformer。这是使用 transducers 时经常用到的方法：将 transformations 定义为简单的函数，然后使用 transducers 库将其转换为transformer。</p>\n<h2 id=\"bu-yi-yang-de-shu-zu-kao-bei\">不一样的数组拷贝</h2>\n<p>目前，我们一直使用数字作为初始值和算术 <em>reducing functions</em> 的处理元素。其实不一定非要这样，<code>reduce</code> 也可以将数组作为处理元素。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> append = <span class=\"function\">(<span class=\"params\">result, item</span>) =&gt;</span> result.push(item);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = reduce(append, [], input);</div><div class=\"line\"><span class=\"comment\">// output = [2, 3, 4]</span></div></pre></td></tr></table></figure></p>\n<p>我们定义一个步进函数（stepper function）<code>append</code>，用于将每个元素拷贝到新数组中，并返回该数组。借助 <code>append</code>， reduce 便可以创建一份数组的拷贝。</p>\n<p>上述操作是否够酷？或许算不上...。当你在将元素添加到输出数组之前先对它变换一下时，情况才变得有趣起来。</p>\n<h2 id=\"zui-gu-dan-de-shu-zi\">最孤单的数字</h2>\n<p>（注：One is the loneliest number，一句英文歌词，引出 <code>plus1</code> 转换）</p>\n<p>假设我们想要每个元素加1，定义一个加1函数。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> plus1 = <span class=\"function\"><span class=\"params\">item</span> =&gt;</span> itme + <span class=\"number\">1</span>;</div></pre></td></tr></table></figure></p>\n<p>现在创建一个 transformer ，它使用上面的函数在 step 中对每个独立元素进行转换。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> xfplus1 = &#123;</div><div class=\"line\">  <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'init not needed'</span>); &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attr\">step</span>: <span class=\"function\">(<span class=\"params\">result, item</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> plus1ed = plus1(item);</div><div class=\"line\">    <span class=\"keyword\">return</span> append(result, plus1ed);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// step: (result, item) =&gt; append(result, plus1(item)),</span></div><div class=\"line\">  </div><div class=\"line\">  result: <span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以使用 transformer 逐步遍历并输出每步结果</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> xf = xfplus1;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">let</span> result = xf.step(init, <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// [3] (=append([], 2+1)))</span></div><div class=\"line\"></div><div class=\"line\">result = xf.step(result, <span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"comment\">// [3,4] (=append([3], 3+1)))</span></div><div class=\"line\"></div><div class=\"line\">result = xf.step(result, <span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"comment\">// [3,4,5] (=append([3,4], 4+1)))</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> output = xf.result(result);</div><div class=\"line\"><span class=\"comment\">// [3,4,5]</span></div></pre></td></tr></table></figure></p>\n<p>因此，我们使用一个 transformer 来遍历元素：将每个元素加1后添加到输出数组中。</p>\n<p>如果我们想要每个元素加1 后的总和，该怎么办呢？可以使用 reduce 。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> output = reduce(sum, <span class=\"number\">0</span>, output);</div><div class=\"line\"><span class=\"comment\">// 12 (=0+3+4+5)</span></div></pre></td></tr></table></figure></p>\n<p>上述方案虽然可行，但不幸的是，我们在获得最终答案的过程中，不得不创建一个中间数组。 有更好的方案吗？</p>\n<p>事实上是有的。回顾上面的 <code>xfplus1</code> ，如果我们将 <code>append</code> 调用换为 <code>sum</code> 调用，并且以 0 作为初始值，就可以定义一个不会产生中间数组，但直接对元素求和的 transformer。</p>\n<p>但是，有时我们想立即查看替换 <em>reducing function</em> 后的结果，因为中间涉及的唯一变化就是将 <code>append</code> 替换为 <code>sum</code>。因此我们希望有一个能够创建 transformation 的函数，该函数不依赖于用于组合中间结果的 transformer。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transducerPlus1 = <span class=\"function\">(<span class=\"params\">xf</span>) =&gt;</span> (&#123;</div><div class=\"line\">  <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> xf.init(),</div><div class=\"line\">  <span class=\"attr\">step</span>: <span class=\"function\">(<span class=\"params\">result, item</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> plus1ed = plus1(item);</div><div class=\"line\">    <span class=\"keyword\">return</span> xf.step(result, plus1ed);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">result</span>: <span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result,</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>该函数接受一个 transformer：<code>xf</code>，返回一个基于 <code>xf</code> 的新的 transformer。新 transformer 将经由 <code>plus1</code> 转换后的结果代理给 <code>xf</code>。由于我们可以使用 <code>step</code> 函数完全定义这个 transformation，新的 transformer 的 <code>xf</code> 只需 <code>init</code> 和 <code>result</code>。每次迭代时，先将每个元素进行 <code>plus1</code> 转换，然后调用封装过的 transformer 内部的 <code>step</code> 函数。</p>\n<h2 id=\"transducer\">Transducer</h2>\n<p>我们刚刚创建了第一个 transducer：一个接受现有 transformer，并返回新 transformer 的函数。新 transformer 会改变原有 transformation 的行为，transducer 会将一些额外的处理委托给新的封装过的 transformer。</p>\n<p>让我们实践一下，首先用刚才的 transducer 来重新实现前面的例子。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> stepper = wrap(append);</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> transducer = transducerPlus1;</div><div class=\"line\"><span class=\"keyword\">const</span> xf = transducer(stepper);</div><div class=\"line\"><span class=\"keyword\">let</span> result = xf.step(init, <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// [3] (=append([], 2+1)))</span></div><div class=\"line\"></div><div class=\"line\">result = xf.step(result, <span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"comment\">// [3,4] (=append([3], 3+1)))</span></div><div class=\"line\"></div><div class=\"line\">result = xf.step(result, <span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"comment\">// [3,4,5] (=append([3,4], 4+1)))</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> output = xf.result(result);</div><div class=\"line\"><span class=\"comment\">// [3,4,5]</span></div></pre></td></tr></table></figure></p>\n<p>运行过程和结果与之前相同，很好。唯一的区别是 transformer：<code>xf</code> 的创建。我们使用 <code>wrap</code> 将 <code>append</code> 转换成名为 <code>stepper</code> 的 transformer，然后使用 transducer 封装这个 stepper 并返回一个 <code>plus1</code> 转换。然后我们就可以像从前一样使用转换函数：xf 对每个元素逐步操作，并得到结果。</p>\n<h2 id=\"zhong-jian-fu-zhu-yuan-su\">中间辅助元素</h2>\n<p>从现在开始，事情变得有趣起来：我们可以用相同的 transducer 来获得最终的累加和，不需要中间辅助数组，只需改变 stepper 和初始值。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> stepper = wrap(sum);</div><div class=\"line\"><span class=\"keyword\">const</span> init = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> transducer = transducerPlus1;</div><div class=\"line\"><span class=\"keyword\">const</span> xf = transducer(stepper);</div><div class=\"line\"><span class=\"keyword\">let</span> result = xf.step(init, <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// 3 (=sum(0, 2+1)))</span></div><div class=\"line\"></div><div class=\"line\">result = xf.step(result, <span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"comment\">// 7 (=sum(3, 3+1)))</span></div><div class=\"line\"></div><div class=\"line\">result = xf.step(result, <span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"comment\">// 12 (=sum(7, 4+1)))</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> output = xf.result(result);</div><div class=\"line\"><span class=\"comment\">// 12</span></div></pre></td></tr></table></figure></p>\n<p>不需要计算中间数组，一次迭代就可以得到结果。<code>sum</code> 与之前 <code>append</code> 例子只有两处不同：</p>\n<ul>\n<li>创建 stepper 时，用 sum 代替 append 进行封装。</li>\n<li>初始值使用 0 代替 []。</li>\n</ul>\n<p>仅此两处差异，其他完全一样。</p>\n<p>需要注意的是，只有 <code>stepper</code> 转换知道 <code>result</code> 的数据类型。当封装 <code>sum</code> 时，结果类型为数字，封装 <code>append</code> 时，结果是数组。初始值类型与 stepper 的 <code>result</code> 参数类型相同。被处理的单个元素的类型不限，因为 stepper 知道如何组合上次输出的结果和新的元素，并返回一个新的组合的结果，本次输出结果可能会用于下次迭代中的组合，如此迭代循环。</p>\n<p>这些特性允许我们定义独立于输出的 transformation 。</p>\n<h2 id=\"ke-neng-hui-bian-zao\">可能会变糟</h2>\n<p>(注：第二句歌词，Can be as bad as one，作者意思应该是，如果 <code>plus2</code> 还跟 <code>plus1</code> 一样从头重新实现一遍，就比较坑了)</p>\n<p>假如我们想要在归约之前 <code>plus2</code>，需要改变哪些地方呢？我们可以定义一个类似于 <code>transducerPlus1</code> 的新的 <code>transducerPlus2</code> 。回头看一下 <code>transducerPlus1</code> 是如何实现的，并决定哪些地方需要更改。但这样做违反了 DRY 原则。</p>\n<p>有更好的方案吗？</p>\n<p>实际上，除了将 step 的值用 <code>plus2</code> 替换掉 <code>plus1</code> 以外，其他都是一样的。</p>\n<p>让我们将 <code>plus1</code> 提取出来，并将其作为函数 <code>f</code> 进行传递。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> xf =&gt; (&#123;</div><div class=\"line\">  <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> xf.init(),</div><div class=\"line\">  <span class=\"attr\">step</span>: <span class=\"function\">(<span class=\"params\">result, item</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> mapped = f(item);</div><div class=\"line\">    <span class=\"keyword\">return</span> xf.step(result, mapped);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">result</span>: <span class=\"function\"><span class=\"params\">result</span> =&gt;</span> xf.result(result),</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>我们定义了 mapping transducer，让我们使用它来逐步转换。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> plus2 = <span class=\"function\">(<span class=\"params\">input</span>) =&gt;</span> input + <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> transducer = map(plus2);</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = wrap(append);</div><div class=\"line\"><span class=\"keyword\">const</span> xf = transducer(stepper);</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">let</span> result = xf.step(init, <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// [4] (=append([], 2+2)))</span></div><div class=\"line\"></div><div class=\"line\">result = xf.step(result, <span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"comment\">// [4,5] (=append([4], 3+2)))</span></div><div class=\"line\"></div><div class=\"line\">result = xf.step(result, <span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"comment\">// [4,5,6] (=append([4,5], 4+1)))</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> output = xf.result(result);</div><div class=\"line\"><span class=\"comment\">// [4,5,6]</span></div></pre></td></tr></table></figure></p>\n<p>本例相较于之前使用<code>plus1</code> 和 <code>append</code> 函数的例子，唯一的区别在于使用 <code>map</code> 创建 transducer。我们可以类似地使用 <code>map(plus1)</code> 来创建 <code>plus1</code> transducer。<code>transducerPlus1</code> 虽然只是短暂的出现便被 <code>map(plus1)</code> 代替，但它对我们理解 transduce 的内部原理帮助很大。</p>\n<h2 id=\"transduce\">Transduce</h2>\n<p>前面的示例讲解了使用 transducers 手动转换一系列的输入。让我们进一步优化。</p>\n<p>首先通过调用一个包含 stepper 转换的 transducer 来初始化 transformation，并定义 transduce 的初始值。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transducer = map(plus1);</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = wrap(append);</div><div class=\"line\"><span class=\"keyword\">const</span> xf = transducer(stepper);</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div></pre></td></tr></table></figure></p>\n<p>然后使用 <em>reducing function</em> <code>xf.step</code> 来遍历每个输入元素。将初始值作为 step 函数的第一个 <code>result</code> 参数（另一个是输入源中的元素），上一个 step 函数的返回值供所有后续元素迭代使用。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> result = xf.step(init, <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// [3] (=append([], 2+1)))</span></div><div class=\"line\"></div><div class=\"line\">result = xf.step(result, <span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"comment\">// [3,4] (=append([3], 3+1)))</span></div><div class=\"line\"></div><div class=\"line\">result = xf.step(result, <span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"comment\">// [3,4,5] (=append([3,4], 4+1)))</span></div></pre></td></tr></table></figure></p>\n<p>我们使用 <code>xf.result</code> 输出最终结果。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> output = xf.result(result);</div><div class=\"line\"><span class=\"comment\">// [3,4,5]</span></div></pre></td></tr></table></figure></p>\n<p>可能你已经注意到了，这与上面定义的 <code>reduce</code> 实现非常相似。 事实也是如此。 我们可以将这个过程封装成一个新的函数 <code>transduce</code>。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transduce = <span class=\"function\">(<span class=\"params\">transducer, stepper, init, input</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> stepper === <span class=\"string\">'function'</span>)&#123;</div><div class=\"line\">    <span class=\"comment\">// 确保存在用于步进（迭代）的 transformer</span></div><div class=\"line\">    stepper = wrap(stepper);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 传入 stepper 来创建 transformer：xf</span></div><div class=\"line\">  <span class=\"keyword\">const</span> xf = transducer(stepper);</div><div class=\"line\">  <span class=\"comment\">// xf 现在成为一个 transformer</span></div><div class=\"line\">  <span class=\"comment\">// 现在可以使用上面定义的 reduce 来迭代并</span></div><div class=\"line\">  <span class=\"comment\">// （在迭代之前）变换输入元素</span></div><div class=\"line\">  <span class=\"keyword\">return</span> reduce(xf, init, input);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>就像 reduce，我们需要确保 stepper 是一个 transformer。然后通过向 transducer 传入 stepper 来创建新的 transformer。 最后，我们使用包含新的 transformer 的 reduce 来进行迭代和转换结果。也就是说 transducer 的函数类型为：transformer -&gt; transformer。</p>\n<p>我们来实践一下。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transducer = map(plus1);</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [3,4,5]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> transducer = map(plus2);</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [4,5,6]</span></div></pre></td></tr></table></figure></p>\n<p>上述两例的唯一区别是传递给 map 的函数不同。</p>\n<p>我们来尝试一下不同的 step function 和初始值。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transducer = map(plus1);</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = sum;</div><div class=\"line\"><span class=\"keyword\">const</span> init = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// 12 (=3+4+5)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> transducer = map(plus2);</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = sum;</div><div class=\"line\"><span class=\"keyword\">const</span> init = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// 15 (=4+5+6)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> transducer = map(plus1);</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = mult;</div><div class=\"line\"><span class=\"keyword\">const</span> init = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// 60 (=3*4*5)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> transducer = map(plus2);</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = mult;</div><div class=\"line\"><span class=\"keyword\">const</span> init = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// 120 (=4*5*6)</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"./transduce.png\" alt=\"transduce\"></p>\n<p>这里我们只是改变了 stepper 和初始值，便可以得到不同的结果。我们可以在不依赖中间变量的情况下，遍历一次便可求得累加和或乘积。</p>\n<h2 id=\"zu-he\">组合</h2>\n<p>如果我们想加3，改怎么办呢？我们可以定义 <code>plus3</code> 并且使用 <code>map</code>，但更好的方法是利用 transducers 的一个特性。</p>\n<p>事实上，我们可以通过其他两个函数：<code>plus1</code> 和 <code>plus2</code>，来定义 <code>plus3</code>。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> plus3 = <span class=\"function\"><span class=\"params\">item</span> =&gt;</span> puls2(plus1(item));</div></pre></td></tr></table></figure></p>\n<p>或许你已经看出来，其实这就是<a href=\"https://en.wikipedia.org/wiki/Function_composition_%28computer_science%29\" target=\"_blank\" rel=\"external\">函数组合</a>。让我们通过函数组合来重新定义 <code>plus3</code>。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> compose2 = <span class=\"function\">(<span class=\"params\">fn1, fn2</span>) =&gt;</span> item =&gt; fn1(fn2(item));</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> plus3 = compose2(plus1, plus2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> output = [plus3(<span class=\"number\">2</span>), plus3(<span class=\"number\">3</span>), plus3(<span class=\"number\">4</span>)];</div><div class=\"line\"><span class=\"comment\">// [5,6,7]</span></div></pre></td></tr></table></figure></p>\n<p><code>compose2</code> 用于组合两个函数，调用顺序从右向左，看一下 <code>compose2</code> 的实现就可以知道为什么调用顺序是从右向左的了。最后一个 function 接受传入参数，返回结果作为下个 function 的输入。如此迭代，直到输出结果。</p>\n<p>让我们使用 <code>compose2</code> 来定义一个 transducer，该 transducer 由 <code>plus1</code> 和 <code>plus2</code> 组合而成，用于将每个迭代的元素加3。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transducerPlus3 = map(compose2(plus1, plus2));</div><div class=\"line\"><span class=\"keyword\">const</span> transducer = transducerPlus3;</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [5,6,7]</span></div></pre></td></tr></table></figure></p>\n<p>我们使用“函数组合”来组合 <code>plus1</code> 和 <code>plus2</code> 而不是重新定义 <code>plus3</code>，来组合出传入 map 的加3操作。</p>\n<p>将上述这些的目的是什么呢？实际上，我们可以通过组合其他的 transducers 来创建新的 transducers。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transducerPlus1 = map(plus1);</div><div class=\"line\"><span class=\"keyword\">const</span> transducerPlus2 = map(plus2);</div><div class=\"line\"><span class=\"keyword\">const</span> transducerPlus3 = compose2(transducerPlus1, transducerPlus2);</div><div class=\"line\"><span class=\"keyword\">const</span> transducer = transducerPlus3;</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [5,6,7]</span></div></pre></td></tr></table></figure></p>\n<p>新组合出来的 transducer 可以用于组合其他的 transducer 。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transducerPlus1 = map(plus1);</div><div class=\"line\"><span class=\"keyword\">const</span> transducerPlus2 = map(plus2);</div><div class=\"line\"><span class=\"keyword\">const</span> transducerPlus3 = compose2(transducerPlus1, transducerPlus2);</div><div class=\"line\"><span class=\"keyword\">const</span> transducerPlus4 = compose2(transducerPlus3, transducerPlus1);</div><div class=\"line\"><span class=\"keyword\">const</span> transducer = transducerPlus4;</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div></pre></td></tr></table></figure></p>\n<p><img src=\"./compose_transducers.png\" alt=\"compose_transducers\"></p>\n<p>再次注意，与本节前面的例子的唯一区别是 transducer 的创建。其它都没变。</p>\n<p>组合之所以能工作，是因为 transducers 的定义：接受一个 transformer 并返回一个新的 transformer。也即 transducer 的输入与返回值类型相同，且为单输入单输出。只要符合上述条件，便可以使用函数组合来创建与“输入函数”相同类型的“新函数”。</p>\n<p>由上可得，transducers 是一种 “可组合的算法变换”。这在实践中已经证明其强大之处：可以将新的变换定义为一系列较小变换的组合，然后将它们通过 <code>compose</code> 或 <code>pipe</code> 组合起来。我们将在后续章节中展示更多的例子。</p>\n<p>事实上，虽然函数组合调用顺序为由左向右，而 transformation 调用是自左向右的（译者注：这也是理解 transduce 的难点之一，理解了这个，也就基本理解了 transduce。可以通过单个 transducer 和 transformer 的组合，来理解 transformation 的调用顺序。transduce 本质上做的事情是 <strong>在对每个元素进行归约之前先对其进行变换</strong> ，将这句话重复五遍：），这也是 transduce 区别于 reduce 的“唯一”不同点）。</p>\n<p>在上面的 <code>transducersPlus4</code> 示例中，每个元素先进行 <code>plus3</code> 转换，然后进行 <code>plus1</code> 转换。</p>\n<p>虽然在本例中 transducers 的调用顺序对结果没有影响，但是<strong>从左向右</strong>的变换顺序还是需要牢记在心。这个变换调用顺序让你在阅读代码时更容易理解，因为它与你的阅读顺序是一至的（如果使用的是英文，或者中文）。</p>\n<h2 id=\"part-1-zong-jie\">part 1 总结</h2>\n<p>Transducers 将 “可组合的算法转换” 抽象出来，使其独立于输入、输出，甚至迭代的整个过程。</p>\n<p>本文演示了如何使用 transducers 来抽象算法转换，transducer 将一个 transformer 转换为另一个 transformer。transformer 可以用于 transduce 进行迭代和转换输入源。</p>\n<p>相较于 <a href=\"http://underscorejs.org/\" target=\"_blank\" rel=\"external\">Underscore.js</a> 或 <a href=\"https://lodash.com/\" target=\"_blank\" rel=\"external\">Lo-Dash</a>对数组和计算中间结果的对象进行操作，transducers 定义的 transformation 在函数方面类似于传递给 reduce 的 stepping function：将初始值作为首次迭代的“结果参数”，执行输入为一个“结果参数”和元素的函数，返回可能变换过的结果，并将其作为下次迭代的“结果参数”。一旦将 transformation 从数据中抽象出来，就可以将相同的 transformations 应用于以某初始值开始并遍历某个“累积结果”的不同处理过程。</p>\n<p>我们已经展示了相同的 transducers 可以操作不同的“输出源”，只需改变创建 transducer 时用到的初始值和 stepper function。这种抽象的好处之一是：可以遍历一次得到结果，且没有中间数组产生。</p>\n<p>尽管没有明确说明，我们还是展示了 transducers 将 transducer 与 迭代过程及输入源解耦。在迭代过程中，我们使用相同的 transducer 对元素进行转换，并将转换结果传给 step function，我们使用数组的 reduce 从数组中获取数据。</p>\n<h2 id=\"huan-xiang-liao-jie-geng-duo\">还想了解更多！</h2>\n<p><a href=\"http://simplectic.com/blog/2014/transducers-explained-pipelines/\" target=\"_blank\" rel=\"external\">看这里</a> ,以后的文章中将会进一步讨论 transducers 并不会每步都输出元素；并且可能会提前终止迭代，并返回终止前已经归约的结果。本文只讨论了 step，未讨论 init 和 result，将来会有补充。</p>\n<p>我们将会了解到，输入源可以是任意产生一系列值的东西：惰性列表，不确定的序列生成器，CSP（通信顺序进程），<a href=\"https://github.com/transduce/transduce-stream\" target=\"_blank\" rel=\"external\">Node.js streams</a>\nlazy lists, indefinite sequence generation, CSP[http://phuu.net/2014/08/31/csp-and-transducers.html), [push streams][12], <a href=\"https://github.com/transduce/transduce-stream\" target=\"_blank\" rel=\"external\">Node.js streams</a>, iterators, generators, immutable-js data structures, 等等。</p>\n<h2 id=\"deng-bu-ji-liao\">等不及了！</h2>\n<p>在此期间，可以查看 <a href=\"http://clojure.org/transducers\" target=\"_blank\" rel=\"external\">Clojure文档</a>, 或者观看<a href=\"https://www.youtube.com/watch?v=6mTbuzafcII\" target=\"_blank\" rel=\"external\">视频</a>或这篇<a href=\"http://phuu.net/2014/08/31/csp-and-transducers.html\" target=\"_blank\" rel=\"external\">文章</a>，还有其他更多更好的介绍，可以自行 Google 。</p>\n<p>想要立刻实践一下？已经有三个库实现了相似的API：<a href=\"https://github.com/cognitect-labs/transducers-js\" target=\"_blank\" rel=\"external\">transducers-js</a>、<a href=\"https://github.com/jlongster/transducers.js\" target=\"_blank\" rel=\"external\">transducers.js</a>、<a href=\"https://github.com/ramda/ramda/blob/v0.22.1/src/transduce.js\" target=\"_blank\" rel=\"external\">ramda</a>(译者注：ramda 中 transducer 部分也是本文作者写的）。本文介绍与 transducers-js 实现类似，但概念同样适用于 transducers.js。</p>\n<p><a href=\"http://underscorejs.org/\" target=\"_blank\" rel=\"external\">Underscore.js</a> 的粉丝？可以查看 <a href=\"http://simplectic.com/projects/underarm/\" target=\"_blank\" rel=\"external\">underarm</a>，基于 <a href=\"https://github.com/transduce/transduce\" target=\"_blank\" rel=\"external\">transduce</a> 库（译者注：本文作者写的库）写的。</p>\n<p>怎样将 transducer 应用到 <a href=\"https://github.com/transduce/transduce-stream\" target=\"_blank\" rel=\"external\">Node.js streams</a> 中呢？我们还在探索。</p>\n<p>希望得到新文章的通知？可以在 Twitter 上关注 <a href=\"https://twitter.com/simplectic\" target=\"_blank\" rel=\"external\">simplectic</a>。</p>\n"},{"title":"Transducers Explained: Pipelines 中文","date":"2016-11-01T15:25:55.000Z","_content":"\n本文是 Transducer Explained 教程的第二篇。在[第一篇](https://adispring.github.io/2016/10/24/Transducers-Explained-Part-1/)中，讲解从 *reducing functions* 开始， 到 *transformers*， 再到使用 `map` *transducers* 的 `transduce` 。本文中，将介绍四个新的 *transducers*：`filter`、`remove`、`drop` 和 `take`。我们将展示如何将 *transducers* 组合成 *pipeline*，并讨论转换的顺序。我们还将改变 `reduce` 的实现，使其能够借助 `reduced` 值 提前终止遍历操作。\n\n那么，上次讲到哪了呢？\n\n## Transformer\n\n[第一篇](https://adispring.github.io/2016/10/24/Transducers-Explained-Part-1/)文章中，通过定义 *transformer* 协议规范了 `reduce` 的步骤。\n\n所有 transformers 都包含3个方法：\n\n1. 使用初始值初始化 transformation，`init`\n2. 使用 *reducing function* 来组合每个元素，`step`\n3. 将最后计算的结果转换为输出，`result`\n\n在第一篇文章中，我们使用 *reducing functions* ：`mult`、`add` 和 `append` 来转换输入值。\n\n```js\nconst append = (value, item) => value.push(item);\n```\n\n本文中，我们只会用到 `append`，将元素拼接到数组的尾部。\n\n## Reduce\n\n我们重新实现了 `reduce`，它接受以下参数：\n\n1. 一个 transformer 或者将被封装成 transformer 的 *reducing Function*\n2. 一个初始值（例如`[]`)。\n3. 一个输入源（例如传入 reduce 的数组）\n\n目前的实现使用 transformer 的 `step` 函数作为数组 *reducing function*，稍后将修改这一实现。\n\n在迭代过程中，使用两个参数来调用 `step` 函数：`value` 和 `item`。初始 value 由调用者提供，后续的每个 value 使用当前 `step` 函数的返回值。\n\n`item` 由一些迭代过程（如何翻译？）提供。在第一篇文章中展示了两个过程：归约数组的每个元素，并使用每个新的 `item` 手动调用 `step` 函数。（在后续文章中我们将看到更多例子）。\n\n## Transducer\n\n我们创建了 mapping *transducer*。\n\n```js\nconst map = f => xf => ({\n  init: () => xf.init(),\n  step: (result, item) => xf.step(result, f(item)),\n  result: result => xf.result(result),\n});\n```\n\n`map` transducer 接受一个 mapping 函数：`f`，并返回一个 transducer：\n\n1. 接受一个已有 transformer\n2. 返回一个新的 transformer，用来通过 `f` 转换 `items`\n3. 代理给封装的 transformer 额外的处理\n\n函数`f`可以是接受一个 item, 然后将其映射为一个新值的任意函数。\n\n```js\nconst plus1 = input => input + 1;\n\nconst plus2 = input => input + 2;\n```\n\n在本节的例子中将继续使用这两个简单的函数。\n\n## Transduce\n\n我们定义了一个新函数，`transduce`, 其接受：\n\n1. 一个 transducer: 定义transformation\n2. 一个 stepper 函数，或 transformer (如 `append`)\n3. 一个 stepper 函数 的初始值 (如 `[]`)\n4. 输入源 (如一个待转换的数组)\n\n向 transducer 传入 `stepper` 函数，来创建一个 transformer, 然后将该 transformer、初始值和输入源一同传入 `reduce`。\n\n我们已经展示过，使用相同的 transducer 可以产生不同的结果，只要改变传入 `transduce` 的初始值和 `stepper` 函数\n\n## Composition\n\n最后，我们展示了可以通过组合已有 transducers 来创建新的 transducers\n\n```js\nconst compose2 = (fn1, fn2) => item => fn1(fn2(item));\n\nconst transducer = compose2(\n      compose2(map(plus1), map(plus2)),\n      map(plus1));\nconst stepper = append;\nconst init = [];\nconst input = [2,3,4];\nconst output = transduce(transducer, stepper, init, input);\n// [6,7,8]\n```\n\n被组合的 transducer 从左向右对输入源进行转换。\n\n今天我们从这里开始讲起。如果对上例不熟悉，可以参考[第一篇文章](https://adispring.github.io/2016/10/24/Transducers-Explained-Part-1/)\n\n## Pipelines\n\n首先，定义一个新的函数，用它可以组合任意数量的函数。\n\n```js\nconst compose = (...fns) => xf => {\n  let i = fns.length - 1;\n  for(; i >=0; i--) { xf = fns[i](xf); }\n  return xf;\n};\n```\n\n这只是上面定义的 `compose2` 的扩展。函数组合从右向左：返回的函数接受用于调用右侧最后一个函数的初始参数。该调用的返回值(输出)用作左侧下一个函数的参数(输入)。对于所有传入 `ompose` 的函数，重复执行该过程。\n\n可以通过组合 `plus1` 和 `plus2` 来创建 `plus4`。\n\n```js\n// 手动调用 \nconst value = plus1(plus1(plus2(5)));\n// 9\n\n// 使用组合函数 (允许重复使用被组合的函数)\nconst plus4 = compose(plus1, plus1, plus2);\nconst value = plus4(5);\n// 9\n```\n\n我们通过组合 `map` transducers 来创建一个 `plus5` transducer。\n\n```js\nconst transducer = compose(\n      map(plus1),  // [3,4,5]\n      map(plus2),  // [5,6,7]\n      map(plus1),  // [6,7,8]\n      map(plus1)); // [7,8,9]\nconst stepper = append;\nconst init = [];\nconst input = [2,3,4];\nconst output = transduce(transducer, stepper, init, input);\n// [7,8,9]\n```\n\n每个 transducer 旁边的注释将每次转换通过数组展示出来，这样每次完成一个完整的转换，更容易追踪转换的过程。\n\n然而，需要清楚，整个转换过程中，transducers 每次只顺序转换一个 item，并且不会产生中间结果。注释仅仅表示 pipeline 的每步的转换结果。我们将在下面继续讨论这个问题。\n\n实际上，虽然组合是从右向左，转换的顺序实际上是从左向右的（在示例中是从上向下）。（需要将 transducers 的组合顺序 和 组合后 transducers 对输入源的转换顺序区分开)。在本例中顺序并不重要，但下一个例子中，便需要考虑调用顺序了。\n\n## Filter\n\n我们来定义 `filter` transducer\n\n```js\nconst filter = predicate => xf => ({\n  init: () => xf.init(),\n  step: (value, item) => {\n    const allow = predicate(item);\n    if(allow){\n      value = xf.step(value, item);\n    }\n    return value;\n  },\n  result: (value) => xf.result(value),\n};\n```\n\n注意到，只有在 predicate(断言) 返回 true 时，由 `filter` 返回的 transformer 才会代理给下一个(左侧) transformer。如果 predicate 返回 false，则会忽略该次 item，并返回上次的迭代结果。\n\n我们创建一个 transducer ，来过滤出所有奇数。\n\n```js\nconst isOdd = num => num % 2 === 1;\n\nconst transducer = filter(isOdd);\nconst stepper = append;\nconst init = [];\nconst input = [1,2,3,4,5];\nconst output = transduce(transducer, stepper, init, input);\n// [1,3,5]\n```\n\n我们创建了一个使用 `isOdd` predicate 来过滤元素的 transducer。然后使用 `transduce` 将其作用于一个整数数组，输出数组中只包含奇数。\n\n我们再创建一个函数，该函数返回一个检查与传入参数是否相等的 predicate。\n\n```js\n// another predicate \nconst isEqual = y => x => x === y;\n\nconst transducer = filter(isEqual(2));\nconst stepper = append;\nconst init = [];\nconst input = [1,2,3,4,5];\nconst output = transduce(transducer, stepper, init, input);\n// [2]\n```\n\n可以看到，创建的 predicate `isEqual(2) 只允许数字 2 输出。\n\n再来一个辅助函数，接受一个 predicate，将其结果取反。\n\n```js\nconst not = predicate => x => !predicate(x);\n\nconst transducer = filter(not(isEqual(2)));\nconst stepper = append;\nconst init = [];\nconst input = [1,2,3,4,5];\nconst output = transduce(transducer, stepper, init, input);\n// [1,3,4,5]\n```\n\n我们修改了前面的例子：对 predicate `isEqual(2)` 取反，由此创建了一个移除输入源中所有数字 2 的 transducer。\n\n现在在我们的 pipeline 库中有了另一件武器，一起来把玩一下吧。\n\n## Pipeline 顺序\n\n我们来对每个元素加 1，然后过滤出奇数。\n\n```js\nconst transducer = compose(\n      map(plus1),         // [2,3,4,5,6]\n      filter(isOdd));     // [3,5]\nconst stepper = append;\nconst init = [];\nconst input = [1,2,3,4,5];\nconst output = transduce(transducer, stepper, init, input);\n// [3,5]\n```\n\n首先调用 `map(plus1)` transducer 对每个元素加 1，然后调用下一步转换：过滤出所有奇数。\n\n我们改变一下 transducers 的顺序，看看会发生什么。\n\n```js\nconst transducer = compose(\n      filter(isOdd),      // [1,3,5]\n      map(plus1));        // [2,4,6]\nconst stepper = append;\nconst init = [];\nconst input = [1,2,3,4,5];\nconst output = transduce(transducer, stepper, init, input);\n// [2,4,6]\n```\n\n我们首先过滤出所有奇数。filter(`isOdd`) transformer 只将奇数传给下一个 transformer。所有传到下一步的元素(奇数)都会加1。\n\n上述表明了 *组合 transducers* 的两个重要性质：\n\n1. 虽然组合是从右向左，但转换是从左向右。\n2. 使用 transducers 越早减少 pipeline 中元素的数量，效率可能会越高。\n \n注意到，在最后一个例子中，`map(plus1)` 仅仅使用所有元素的子集调用。同样的，并未创建中间数组，仅仅作为注释便于理解而已。\n\n## Remove\n\n开始讲另一个 transducer 了哈。\n\n```js\nconst remove = predicate => filter(not(predicate));\n```\n\n很简单吧。实际上，我们可以通过对 predicate 取反 和 重用 `filter` 来创建 `remove`。\n\n我们来实践一下。\n\n```js\nconst transducer = compose(\n      filter(isOdd),        // [1,3,5]\n      map(plus1),           // [2,4,6] \n      remove(isEqual(4)));  // [2,6]\nconst stepper = append;\nconst init = [];\nconst input = [1,2,3,4,5];\nconst output = transduce(transducer, stepper, init, input);\n// [2,6]\n```\n\n首先过滤出奇数，然后对每项加1，然后删除 `4`。\n\n## Drop \n\n如果我们想在迭代开始时跳过 `n` 个元素，该做么做呢？这正是 `drop` transducer 的本职。\n\n```js\nconst drop = n => xf => {\n  var left = n;\n  return {\n    init: () => xf.init(),\n    step: function(value, item){\n      if(left > 0){\n        left--;\n      } else {\n        value = xf.step(value, item);\n      }\n      return value;\n    },\n    result: result => xf.result(result),\n  }\n}\n```\n\n你可以这样使用：\n\n```js\nvar transducer = drop(2);\nvar stepper = append;\nvar init = [];\nvar input = [1,2,3,4,5];\nvar output = transduce(transducer, stepper, init, input);\n// [3,4,5]\n```\n\nDrop 接受从列表开始待丢弃元素的个数。这是我们第一个用来创建有状态变换的 transducer 的示例。每次调用 `drop` transducer 来创建一个 transformation 时，便会创建一个变量 `left`，指示在当次 transformation时，还剩多少个需要被丢弃的元素。`left` 被初始化为 `n`。\n\n注意，我们使用一个无状态的 transducer 创建了一个有状态的 transformer。这是一个重要的区别。这意味着我们可以重用 `drop(2)` transducer 任意多次，而不必担心任何状态。状态是在 transformer 中创建的，而不是 transducer 中。\n\n假如我们不想丢弃，而是获取前 `n` 个元素并丢弃剩余元素，该怎么办呢？为方便实现，假设 `n > 0`。\n\n我们来尝试一下。\n\n```js\nconst take = n => xf => {\n  var left = n;\n  return {\n    init: () => xf.init(),\n    step: function(value, item){\n      value = xf.step(value, item);\n      if(--left <= 0){\n        // 如何停止???\n      }\n      return value;\n    },\n    result: result => xf.result(result),\n  }\n};\n```\n\n哦噢，麻烦来了。我们知道如何逐步处理每个元素，并且通过 transformer 的状态来保持剩余元素的计数。但是，如何停止对剩余元素的迭代呢？\n\n为什么我们需要表明我们已经完成，不再接受任何额外元素呢？不仅因为继续接受元素是一种浪费，还因为无法保证迭代能够完成。有可能迭代是无限的。如果可以，我们当然想终止无限迭代。\n\n那么如何表示提前终止呢？我们需要在看一下迭代的源代码：`transduce`。\n\n## Reduce redux (终极 Reduce)\n\n下面是当前 `transduce` 和 `reduce` 的定义，取自[第一篇文章](https://adispring.github.io/2016/10/24/Transducers-Explained-Part-1/)：\n\n```js\nconst transduce = (transducer, stepper, init, input) => {\n  if(typeof stepper === 'function'){\n    stepper = wrap(stepper);\n  }\n\n  var xf = transducer(stepper);\n  return reduce(xf, init, input);\n};\n\nconst reduce(xf, init, input) => {\n  if(typeof xf === 'function'){\n    xf = wrap(xf);\n  }\n  // how do we stop?? \n  var value = input.reduce(xf.step, init); \n  return xf.result(value);\n};\n\nconst wrap = stepper => ({\n  init: () => throw new Error('init not supported'),\n  step: stepper,\n  result: value => value,\n};\n```\n\n看一下上面的实现，便会发现，我们正在使用原生数组 `reduce` 方法进行迭代，`reduce` 的 reducing function 来自 transformer。后续文章中，我们将删除输入源是数组的假设，但现在还需继续使用改假设。我们来定义自己的 `arrayReduce` 实现。\n\n```js\nconst reduce = (xf, init, input) => {\n  if(typeof xf === 'function'){\n    xf = wrap(xf);\n  }\n\n  return arrayReduce(xf, init, input);\n};\n\nconst arrayReduce(xf, init, array) => {\n  var value = init;\n  var idx = 0;\n  var length = array.length;\n  for(; idx < length; idx++){\n    value = xf.step(value, array[idx]);\n    // We need to break here, but how do we know?\n  }\n  return xf.result(value);\n};\n```\n\n`arrayReduce` 的实现接受一个 transformer 、初始值和输入数组。然后使用 `for` 循环遍历每个元素，并使用累加值 value 和数组元素来调用 transformer `step` 函数。\n\n我们需要一个方法来打破这个循环，打破循环需要依赖某些标记值。幸运的是，我们可以采用已有的 [transducer 协议](https://github.com/cognitect-labs/transducers-js#reduced)。\n\n为了在调用 transformer 中的 `step` 之后发出提前终止信号，我们可以将 *reduced* 值封装在包含两个属性的对象中：\n\n1. `value`: 存储实际要封装的值。\n2. `__transducers_reduced__`: bool 类型值，为`true`时，表示该对象是 reduced 的，迭代需要被终止。\n\n实现如下：\n\n```js\nconst reduced = value => ({\n  value: value,\n  __transducers_reduced__: true,\n});\n```\n\n我们还将添加一个 predicate 来确定值是否是 reduced 。\n\n```js\nconst iReduced = value => value && value.__transducers_reduced__;\n```\n\n此外，我还需要一个方法来提取，或 `deref`(解引用) reduced 的值。\n\n现在我们可以优化 `arrayReduce` 来处理因 reduced values 提前终止的情况。\n\n```js\nconst arrayReduce => (xf, init, array) => {\n  var value = init;\n  var idx = 0;\n  var length = array.length;\n  for(; idx < length; idx++){\n    value = xf.step(value, array[idx]);\n    if(isReduced(value)){\n      value = deref(value);\n      break;\n    }\n  }\n  return xf.result(value);\n}\n```\n\n我们像以前一样对每个元素进行迭代，但每次调用 `step` 之后，我们检查是否得到一个 reduced value。如果是，我们提取值并终止迭代(中断循环)。我们仍然对最终值调用 `result` 方法，不管它来自 reduced value 还是完整的迭代。\n\n## Take 2\n\n现在可以完成 `take` 的实现了：\n\n```js\nconst take = n => xf => {\n  var left = n;\n  return {\n    init: () => xf.init(),\n    step: function(value, item){\n      value = xf.step(value, item);\n      if(--left <= 0){\n        // we are done, so signal reduced\n        value = reduced(value);\n      }\n      return value;\n    },\n    result: value => xf.result(value),\n  }\n};\n```\n\n我们之前唯一缺失的是：当检测到转换完成后使用 `reduced` 对值进行封装。(现在已经补上了)\n\n让我们看看它是否能工作：\n\n```js\nconst transducer = take(3);\nconst stepper = append;\nconst init = [];\nconst input = [1,2,3,4,5];\nconst output = transduce(transducer, stepper, init, input);\n// [1,2,3]\n```\n\n工作正常！\n\n就像任何其他的 transducer，你可以将 `drop` 和 `take` 组合成一个 pipeline\n\n```js\nconst transducer = compose(\n    drop(1),    // [2,3,4,5]\n    take(3),    // [2,3,4]\n    drop(1));   // [3,4]\nconst stepper = append;\nconst init = [];\nconst input = [1,2,3,4,5];\nconst output = transduce(transducer, stepper, init, input);\n// [3,4]\n```\n\n第一个 `drop` 跳过第一个元素，然后将剩余元素通过 step 传给下一个 transformer。`take`  transformer 逐一遍历从第一个 `drop` 传过来的数组的前三个元素，然后停止迭代。最后一个 `drop` 删除从 `take` 传过来的数组的首个元素，并且在终止之前逐一发送剩余的两个元素。\n\n## 第二部分总结\n\n我们首先总结了在第一篇文章中学到的内容。我们增加了4个新的 transducers：`filter`、`remove`、`take`、`drop`。我们通过组合 transducers 来创建 transformer pipelines，并看到变换的顺序是从左到右。\n\n我们看到，除了在转换期间改变元素，一个 transformer 可以决定跳过任意元素，通过不调用下一个 transformer 的 `step` 来实现。每一个 transformer 的实现决定了什么会传递到下个 transformer。有些情况下， transformer 可能会发送多个值，例如 `cat` 或 [`transduce-string`](https://github.com/transduce/transduce-string)。\n\n我们还看到了可以创建有状态变换的 transducer 的一些例子。状态由 transformer 管理，而不是 transducer。这允许无状态 transducer 的重用，即时它们创建的 transformers 管理状态。\n\n当实现 `take` 时，我们意识到需要添加一个用于提前终止迭代的方法。我们改变了 `reduce` 的实现来处理和解包 reduced 的值，并且实现 `take` 用于在取完数据时终止迭代。\n\n## 还有别的吗？\n\n在入门教程的最后一篇文章中还有一些需要解释的相关问题。我们仍未解释 transformer 的 `init` 和 `reduce` 的作用。我们将添加 `into` 并一般化 `reduce` 的实现来支持迭代器。\n\n我们还看到输入元素可以是产生 sequence 值的任意东西：惰性列表、无限序列生成器、[CSP](http://phuu.net/2014/08/31/csp-and-transducers.html)、[Node.js streams](https://github.com/transduce/transduce-stream)、迭代器、生成器、immutable-js 数据结构等。\n\n想要获取新文章的通知吗？可以关注 获取 [simplectic](https://twitter.com/simplectic) 的 Twitter。\n\n## 我现在已经准备好了！\n\n已经准备使用 transducers 了吗？你应该已经具备良好的知识体系，如果通读了这篇文章：查看 [transducers-js](https://github.com/cognitect-labs/transducers-js) 和 [transducers.js](https://github.com/jlongster/transducers.js)。我们主要参考 transducers-js 的实现，但概念同样适用于 transducers.js。\n\n如果你喜欢 [Underscore.js](http://simplectic.com/projects/underarm)，可以查看 [underarm](http://underscorejs.org/)。它基于 [transduce](https://github.com/transduce/transduce) 库，允许针对 transducers.js 和 transducer-js 支持的公共协议定义 API。\n\n","source":"_posts/Transducers-Explained-Pipelines.md","raw":"---\ntitle: 'Transducers Explained: Pipelines 中文'\ndate: 2016-11-01 23:25:55\ntags:\n---\n\n本文是 Transducer Explained 教程的第二篇。在[第一篇](https://adispring.github.io/2016/10/24/Transducers-Explained-Part-1/)中，讲解从 *reducing functions* 开始， 到 *transformers*， 再到使用 `map` *transducers* 的 `transduce` 。本文中，将介绍四个新的 *transducers*：`filter`、`remove`、`drop` 和 `take`。我们将展示如何将 *transducers* 组合成 *pipeline*，并讨论转换的顺序。我们还将改变 `reduce` 的实现，使其能够借助 `reduced` 值 提前终止遍历操作。\n\n那么，上次讲到哪了呢？\n\n## Transformer\n\n[第一篇](https://adispring.github.io/2016/10/24/Transducers-Explained-Part-1/)文章中，通过定义 *transformer* 协议规范了 `reduce` 的步骤。\n\n所有 transformers 都包含3个方法：\n\n1. 使用初始值初始化 transformation，`init`\n2. 使用 *reducing function* 来组合每个元素，`step`\n3. 将最后计算的结果转换为输出，`result`\n\n在第一篇文章中，我们使用 *reducing functions* ：`mult`、`add` 和 `append` 来转换输入值。\n\n```js\nconst append = (value, item) => value.push(item);\n```\n\n本文中，我们只会用到 `append`，将元素拼接到数组的尾部。\n\n## Reduce\n\n我们重新实现了 `reduce`，它接受以下参数：\n\n1. 一个 transformer 或者将被封装成 transformer 的 *reducing Function*\n2. 一个初始值（例如`[]`)。\n3. 一个输入源（例如传入 reduce 的数组）\n\n目前的实现使用 transformer 的 `step` 函数作为数组 *reducing function*，稍后将修改这一实现。\n\n在迭代过程中，使用两个参数来调用 `step` 函数：`value` 和 `item`。初始 value 由调用者提供，后续的每个 value 使用当前 `step` 函数的返回值。\n\n`item` 由一些迭代过程（如何翻译？）提供。在第一篇文章中展示了两个过程：归约数组的每个元素，并使用每个新的 `item` 手动调用 `step` 函数。（在后续文章中我们将看到更多例子）。\n\n## Transducer\n\n我们创建了 mapping *transducer*。\n\n```js\nconst map = f => xf => ({\n  init: () => xf.init(),\n  step: (result, item) => xf.step(result, f(item)),\n  result: result => xf.result(result),\n});\n```\n\n`map` transducer 接受一个 mapping 函数：`f`，并返回一个 transducer：\n\n1. 接受一个已有 transformer\n2. 返回一个新的 transformer，用来通过 `f` 转换 `items`\n3. 代理给封装的 transformer 额外的处理\n\n函数`f`可以是接受一个 item, 然后将其映射为一个新值的任意函数。\n\n```js\nconst plus1 = input => input + 1;\n\nconst plus2 = input => input + 2;\n```\n\n在本节的例子中将继续使用这两个简单的函数。\n\n## Transduce\n\n我们定义了一个新函数，`transduce`, 其接受：\n\n1. 一个 transducer: 定义transformation\n2. 一个 stepper 函数，或 transformer (如 `append`)\n3. 一个 stepper 函数 的初始值 (如 `[]`)\n4. 输入源 (如一个待转换的数组)\n\n向 transducer 传入 `stepper` 函数，来创建一个 transformer, 然后将该 transformer、初始值和输入源一同传入 `reduce`。\n\n我们已经展示过，使用相同的 transducer 可以产生不同的结果，只要改变传入 `transduce` 的初始值和 `stepper` 函数\n\n## Composition\n\n最后，我们展示了可以通过组合已有 transducers 来创建新的 transducers\n\n```js\nconst compose2 = (fn1, fn2) => item => fn1(fn2(item));\n\nconst transducer = compose2(\n      compose2(map(plus1), map(plus2)),\n      map(plus1));\nconst stepper = append;\nconst init = [];\nconst input = [2,3,4];\nconst output = transduce(transducer, stepper, init, input);\n// [6,7,8]\n```\n\n被组合的 transducer 从左向右对输入源进行转换。\n\n今天我们从这里开始讲起。如果对上例不熟悉，可以参考[第一篇文章](https://adispring.github.io/2016/10/24/Transducers-Explained-Part-1/)\n\n## Pipelines\n\n首先，定义一个新的函数，用它可以组合任意数量的函数。\n\n```js\nconst compose = (...fns) => xf => {\n  let i = fns.length - 1;\n  for(; i >=0; i--) { xf = fns[i](xf); }\n  return xf;\n};\n```\n\n这只是上面定义的 `compose2` 的扩展。函数组合从右向左：返回的函数接受用于调用右侧最后一个函数的初始参数。该调用的返回值(输出)用作左侧下一个函数的参数(输入)。对于所有传入 `ompose` 的函数，重复执行该过程。\n\n可以通过组合 `plus1` 和 `plus2` 来创建 `plus4`。\n\n```js\n// 手动调用 \nconst value = plus1(plus1(plus2(5)));\n// 9\n\n// 使用组合函数 (允许重复使用被组合的函数)\nconst plus4 = compose(plus1, plus1, plus2);\nconst value = plus4(5);\n// 9\n```\n\n我们通过组合 `map` transducers 来创建一个 `plus5` transducer。\n\n```js\nconst transducer = compose(\n      map(plus1),  // [3,4,5]\n      map(plus2),  // [5,6,7]\n      map(plus1),  // [6,7,8]\n      map(plus1)); // [7,8,9]\nconst stepper = append;\nconst init = [];\nconst input = [2,3,4];\nconst output = transduce(transducer, stepper, init, input);\n// [7,8,9]\n```\n\n每个 transducer 旁边的注释将每次转换通过数组展示出来，这样每次完成一个完整的转换，更容易追踪转换的过程。\n\n然而，需要清楚，整个转换过程中，transducers 每次只顺序转换一个 item，并且不会产生中间结果。注释仅仅表示 pipeline 的每步的转换结果。我们将在下面继续讨论这个问题。\n\n实际上，虽然组合是从右向左，转换的顺序实际上是从左向右的（在示例中是从上向下）。（需要将 transducers 的组合顺序 和 组合后 transducers 对输入源的转换顺序区分开)。在本例中顺序并不重要，但下一个例子中，便需要考虑调用顺序了。\n\n## Filter\n\n我们来定义 `filter` transducer\n\n```js\nconst filter = predicate => xf => ({\n  init: () => xf.init(),\n  step: (value, item) => {\n    const allow = predicate(item);\n    if(allow){\n      value = xf.step(value, item);\n    }\n    return value;\n  },\n  result: (value) => xf.result(value),\n};\n```\n\n注意到，只有在 predicate(断言) 返回 true 时，由 `filter` 返回的 transformer 才会代理给下一个(左侧) transformer。如果 predicate 返回 false，则会忽略该次 item，并返回上次的迭代结果。\n\n我们创建一个 transducer ，来过滤出所有奇数。\n\n```js\nconst isOdd = num => num % 2 === 1;\n\nconst transducer = filter(isOdd);\nconst stepper = append;\nconst init = [];\nconst input = [1,2,3,4,5];\nconst output = transduce(transducer, stepper, init, input);\n// [1,3,5]\n```\n\n我们创建了一个使用 `isOdd` predicate 来过滤元素的 transducer。然后使用 `transduce` 将其作用于一个整数数组，输出数组中只包含奇数。\n\n我们再创建一个函数，该函数返回一个检查与传入参数是否相等的 predicate。\n\n```js\n// another predicate \nconst isEqual = y => x => x === y;\n\nconst transducer = filter(isEqual(2));\nconst stepper = append;\nconst init = [];\nconst input = [1,2,3,4,5];\nconst output = transduce(transducer, stepper, init, input);\n// [2]\n```\n\n可以看到，创建的 predicate `isEqual(2) 只允许数字 2 输出。\n\n再来一个辅助函数，接受一个 predicate，将其结果取反。\n\n```js\nconst not = predicate => x => !predicate(x);\n\nconst transducer = filter(not(isEqual(2)));\nconst stepper = append;\nconst init = [];\nconst input = [1,2,3,4,5];\nconst output = transduce(transducer, stepper, init, input);\n// [1,3,4,5]\n```\n\n我们修改了前面的例子：对 predicate `isEqual(2)` 取反，由此创建了一个移除输入源中所有数字 2 的 transducer。\n\n现在在我们的 pipeline 库中有了另一件武器，一起来把玩一下吧。\n\n## Pipeline 顺序\n\n我们来对每个元素加 1，然后过滤出奇数。\n\n```js\nconst transducer = compose(\n      map(plus1),         // [2,3,4,5,6]\n      filter(isOdd));     // [3,5]\nconst stepper = append;\nconst init = [];\nconst input = [1,2,3,4,5];\nconst output = transduce(transducer, stepper, init, input);\n// [3,5]\n```\n\n首先调用 `map(plus1)` transducer 对每个元素加 1，然后调用下一步转换：过滤出所有奇数。\n\n我们改变一下 transducers 的顺序，看看会发生什么。\n\n```js\nconst transducer = compose(\n      filter(isOdd),      // [1,3,5]\n      map(plus1));        // [2,4,6]\nconst stepper = append;\nconst init = [];\nconst input = [1,2,3,4,5];\nconst output = transduce(transducer, stepper, init, input);\n// [2,4,6]\n```\n\n我们首先过滤出所有奇数。filter(`isOdd`) transformer 只将奇数传给下一个 transformer。所有传到下一步的元素(奇数)都会加1。\n\n上述表明了 *组合 transducers* 的两个重要性质：\n\n1. 虽然组合是从右向左，但转换是从左向右。\n2. 使用 transducers 越早减少 pipeline 中元素的数量，效率可能会越高。\n \n注意到，在最后一个例子中，`map(plus1)` 仅仅使用所有元素的子集调用。同样的，并未创建中间数组，仅仅作为注释便于理解而已。\n\n## Remove\n\n开始讲另一个 transducer 了哈。\n\n```js\nconst remove = predicate => filter(not(predicate));\n```\n\n很简单吧。实际上，我们可以通过对 predicate 取反 和 重用 `filter` 来创建 `remove`。\n\n我们来实践一下。\n\n```js\nconst transducer = compose(\n      filter(isOdd),        // [1,3,5]\n      map(plus1),           // [2,4,6] \n      remove(isEqual(4)));  // [2,6]\nconst stepper = append;\nconst init = [];\nconst input = [1,2,3,4,5];\nconst output = transduce(transducer, stepper, init, input);\n// [2,6]\n```\n\n首先过滤出奇数，然后对每项加1，然后删除 `4`。\n\n## Drop \n\n如果我们想在迭代开始时跳过 `n` 个元素，该做么做呢？这正是 `drop` transducer 的本职。\n\n```js\nconst drop = n => xf => {\n  var left = n;\n  return {\n    init: () => xf.init(),\n    step: function(value, item){\n      if(left > 0){\n        left--;\n      } else {\n        value = xf.step(value, item);\n      }\n      return value;\n    },\n    result: result => xf.result(result),\n  }\n}\n```\n\n你可以这样使用：\n\n```js\nvar transducer = drop(2);\nvar stepper = append;\nvar init = [];\nvar input = [1,2,3,4,5];\nvar output = transduce(transducer, stepper, init, input);\n// [3,4,5]\n```\n\nDrop 接受从列表开始待丢弃元素的个数。这是我们第一个用来创建有状态变换的 transducer 的示例。每次调用 `drop` transducer 来创建一个 transformation 时，便会创建一个变量 `left`，指示在当次 transformation时，还剩多少个需要被丢弃的元素。`left` 被初始化为 `n`。\n\n注意，我们使用一个无状态的 transducer 创建了一个有状态的 transformer。这是一个重要的区别。这意味着我们可以重用 `drop(2)` transducer 任意多次，而不必担心任何状态。状态是在 transformer 中创建的，而不是 transducer 中。\n\n假如我们不想丢弃，而是获取前 `n` 个元素并丢弃剩余元素，该怎么办呢？为方便实现，假设 `n > 0`。\n\n我们来尝试一下。\n\n```js\nconst take = n => xf => {\n  var left = n;\n  return {\n    init: () => xf.init(),\n    step: function(value, item){\n      value = xf.step(value, item);\n      if(--left <= 0){\n        // 如何停止???\n      }\n      return value;\n    },\n    result: result => xf.result(result),\n  }\n};\n```\n\n哦噢，麻烦来了。我们知道如何逐步处理每个元素，并且通过 transformer 的状态来保持剩余元素的计数。但是，如何停止对剩余元素的迭代呢？\n\n为什么我们需要表明我们已经完成，不再接受任何额外元素呢？不仅因为继续接受元素是一种浪费，还因为无法保证迭代能够完成。有可能迭代是无限的。如果可以，我们当然想终止无限迭代。\n\n那么如何表示提前终止呢？我们需要在看一下迭代的源代码：`transduce`。\n\n## Reduce redux (终极 Reduce)\n\n下面是当前 `transduce` 和 `reduce` 的定义，取自[第一篇文章](https://adispring.github.io/2016/10/24/Transducers-Explained-Part-1/)：\n\n```js\nconst transduce = (transducer, stepper, init, input) => {\n  if(typeof stepper === 'function'){\n    stepper = wrap(stepper);\n  }\n\n  var xf = transducer(stepper);\n  return reduce(xf, init, input);\n};\n\nconst reduce(xf, init, input) => {\n  if(typeof xf === 'function'){\n    xf = wrap(xf);\n  }\n  // how do we stop?? \n  var value = input.reduce(xf.step, init); \n  return xf.result(value);\n};\n\nconst wrap = stepper => ({\n  init: () => throw new Error('init not supported'),\n  step: stepper,\n  result: value => value,\n};\n```\n\n看一下上面的实现，便会发现，我们正在使用原生数组 `reduce` 方法进行迭代，`reduce` 的 reducing function 来自 transformer。后续文章中，我们将删除输入源是数组的假设，但现在还需继续使用改假设。我们来定义自己的 `arrayReduce` 实现。\n\n```js\nconst reduce = (xf, init, input) => {\n  if(typeof xf === 'function'){\n    xf = wrap(xf);\n  }\n\n  return arrayReduce(xf, init, input);\n};\n\nconst arrayReduce(xf, init, array) => {\n  var value = init;\n  var idx = 0;\n  var length = array.length;\n  for(; idx < length; idx++){\n    value = xf.step(value, array[idx]);\n    // We need to break here, but how do we know?\n  }\n  return xf.result(value);\n};\n```\n\n`arrayReduce` 的实现接受一个 transformer 、初始值和输入数组。然后使用 `for` 循环遍历每个元素，并使用累加值 value 和数组元素来调用 transformer `step` 函数。\n\n我们需要一个方法来打破这个循环，打破循环需要依赖某些标记值。幸运的是，我们可以采用已有的 [transducer 协议](https://github.com/cognitect-labs/transducers-js#reduced)。\n\n为了在调用 transformer 中的 `step` 之后发出提前终止信号，我们可以将 *reduced* 值封装在包含两个属性的对象中：\n\n1. `value`: 存储实际要封装的值。\n2. `__transducers_reduced__`: bool 类型值，为`true`时，表示该对象是 reduced 的，迭代需要被终止。\n\n实现如下：\n\n```js\nconst reduced = value => ({\n  value: value,\n  __transducers_reduced__: true,\n});\n```\n\n我们还将添加一个 predicate 来确定值是否是 reduced 。\n\n```js\nconst iReduced = value => value && value.__transducers_reduced__;\n```\n\n此外，我还需要一个方法来提取，或 `deref`(解引用) reduced 的值。\n\n现在我们可以优化 `arrayReduce` 来处理因 reduced values 提前终止的情况。\n\n```js\nconst arrayReduce => (xf, init, array) => {\n  var value = init;\n  var idx = 0;\n  var length = array.length;\n  for(; idx < length; idx++){\n    value = xf.step(value, array[idx]);\n    if(isReduced(value)){\n      value = deref(value);\n      break;\n    }\n  }\n  return xf.result(value);\n}\n```\n\n我们像以前一样对每个元素进行迭代，但每次调用 `step` 之后，我们检查是否得到一个 reduced value。如果是，我们提取值并终止迭代(中断循环)。我们仍然对最终值调用 `result` 方法，不管它来自 reduced value 还是完整的迭代。\n\n## Take 2\n\n现在可以完成 `take` 的实现了：\n\n```js\nconst take = n => xf => {\n  var left = n;\n  return {\n    init: () => xf.init(),\n    step: function(value, item){\n      value = xf.step(value, item);\n      if(--left <= 0){\n        // we are done, so signal reduced\n        value = reduced(value);\n      }\n      return value;\n    },\n    result: value => xf.result(value),\n  }\n};\n```\n\n我们之前唯一缺失的是：当检测到转换完成后使用 `reduced` 对值进行封装。(现在已经补上了)\n\n让我们看看它是否能工作：\n\n```js\nconst transducer = take(3);\nconst stepper = append;\nconst init = [];\nconst input = [1,2,3,4,5];\nconst output = transduce(transducer, stepper, init, input);\n// [1,2,3]\n```\n\n工作正常！\n\n就像任何其他的 transducer，你可以将 `drop` 和 `take` 组合成一个 pipeline\n\n```js\nconst transducer = compose(\n    drop(1),    // [2,3,4,5]\n    take(3),    // [2,3,4]\n    drop(1));   // [3,4]\nconst stepper = append;\nconst init = [];\nconst input = [1,2,3,4,5];\nconst output = transduce(transducer, stepper, init, input);\n// [3,4]\n```\n\n第一个 `drop` 跳过第一个元素，然后将剩余元素通过 step 传给下一个 transformer。`take`  transformer 逐一遍历从第一个 `drop` 传过来的数组的前三个元素，然后停止迭代。最后一个 `drop` 删除从 `take` 传过来的数组的首个元素，并且在终止之前逐一发送剩余的两个元素。\n\n## 第二部分总结\n\n我们首先总结了在第一篇文章中学到的内容。我们增加了4个新的 transducers：`filter`、`remove`、`take`、`drop`。我们通过组合 transducers 来创建 transformer pipelines，并看到变换的顺序是从左到右。\n\n我们看到，除了在转换期间改变元素，一个 transformer 可以决定跳过任意元素，通过不调用下一个 transformer 的 `step` 来实现。每一个 transformer 的实现决定了什么会传递到下个 transformer。有些情况下， transformer 可能会发送多个值，例如 `cat` 或 [`transduce-string`](https://github.com/transduce/transduce-string)。\n\n我们还看到了可以创建有状态变换的 transducer 的一些例子。状态由 transformer 管理，而不是 transducer。这允许无状态 transducer 的重用，即时它们创建的 transformers 管理状态。\n\n当实现 `take` 时，我们意识到需要添加一个用于提前终止迭代的方法。我们改变了 `reduce` 的实现来处理和解包 reduced 的值，并且实现 `take` 用于在取完数据时终止迭代。\n\n## 还有别的吗？\n\n在入门教程的最后一篇文章中还有一些需要解释的相关问题。我们仍未解释 transformer 的 `init` 和 `reduce` 的作用。我们将添加 `into` 并一般化 `reduce` 的实现来支持迭代器。\n\n我们还看到输入元素可以是产生 sequence 值的任意东西：惰性列表、无限序列生成器、[CSP](http://phuu.net/2014/08/31/csp-and-transducers.html)、[Node.js streams](https://github.com/transduce/transduce-stream)、迭代器、生成器、immutable-js 数据结构等。\n\n想要获取新文章的通知吗？可以关注 获取 [simplectic](https://twitter.com/simplectic) 的 Twitter。\n\n## 我现在已经准备好了！\n\n已经准备使用 transducers 了吗？你应该已经具备良好的知识体系，如果通读了这篇文章：查看 [transducers-js](https://github.com/cognitect-labs/transducers-js) 和 [transducers.js](https://github.com/jlongster/transducers.js)。我们主要参考 transducers-js 的实现，但概念同样适用于 transducers.js。\n\n如果你喜欢 [Underscore.js](http://simplectic.com/projects/underarm)，可以查看 [underarm](http://underscorejs.org/)。它基于 [transduce](https://github.com/transduce/transduce) 库，允许针对 transducers.js 和 transducer-js 支持的公共协议定义 API。\n\n","slug":"Transducers-Explained-Pipelines","published":1,"updated":"2016-12-10T13:21:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3vm14hg000h3bs60jyddmm7","content":"<p>本文是 Transducer Explained 教程的第二篇。在<a href=\"https://adispring.github.io/2016/10/24/Transducers-Explained-Part-1/\">第一篇</a>中，讲解从 <em>reducing functions</em> 开始， 到 <em>transformers</em>， 再到使用 <code>map</code> <em>transducers</em> 的 <code>transduce</code> 。本文中，将介绍四个新的 <em>transducers</em>：<code>filter</code>、<code>remove</code>、<code>drop</code> 和 <code>take</code>。我们将展示如何将 <em>transducers</em> 组合成 <em>pipeline</em>，并讨论转换的顺序。我们还将改变 <code>reduce</code> 的实现，使其能够借助 <code>reduced</code> 值 提前终止遍历操作。</p>\n<p>那么，上次讲到哪了呢？</p>\n<h2 id=\"transformer\">Transformer</h2>\n<p><a href=\"https://adispring.github.io/2016/10/24/Transducers-Explained-Part-1/\">第一篇</a>文章中，通过定义 <em>transformer</em> 协议规范了 <code>reduce</code> 的步骤。</p>\n<p>所有 transformers 都包含3个方法：</p>\n<ol>\n<li>使用初始值初始化 transformation，<code>init</code></li>\n<li>使用 <em>reducing function</em> 来组合每个元素，<code>step</code></li>\n<li>将最后计算的结果转换为输出，<code>result</code></li>\n</ol>\n<p>在第一篇文章中，我们使用 <em>reducing functions</em> ：<code>mult</code>、<code>add</code> 和 <code>append</code> 来转换输入值。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> append = <span class=\"function\">(<span class=\"params\">value, item</span>) =&gt;</span> value.push(item);</div></pre></td></tr></table></figure></p>\n<p>本文中，我们只会用到 <code>append</code>，将元素拼接到数组的尾部。</p>\n<h2 id=\"reduce\">Reduce</h2>\n<p>我们重新实现了 <code>reduce</code>，它接受以下参数：</p>\n<ol>\n<li>一个 transformer 或者将被封装成 transformer 的 <em>reducing Function</em></li>\n<li>一个初始值（例如<code>[]</code>)。</li>\n<li>一个输入源（例如传入 reduce 的数组）</li>\n</ol>\n<p>目前的实现使用 transformer 的 <code>step</code> 函数作为数组 <em>reducing function</em>，稍后将修改这一实现。</p>\n<p>在迭代过程中，使用两个参数来调用 <code>step</code> 函数：<code>value</code> 和 <code>item</code>。初始 value 由调用者提供，后续的每个 value 使用当前 <code>step</code> 函数的返回值。</p>\n<p><code>item</code> 由一些迭代过程（如何翻译？）提供。在第一篇文章中展示了两个过程：归约数组的每个元素，并使用每个新的 <code>item</code> 手动调用 <code>step</code> 函数。（在后续文章中我们将看到更多例子）。</p>\n<h2 id=\"transducer\">Transducer</h2>\n<p>我们创建了 mapping <em>transducer</em>。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> xf =&gt; (&#123;</div><div class=\"line\">  <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> xf.init(),</div><div class=\"line\">  <span class=\"attr\">step</span>: <span class=\"function\">(<span class=\"params\">result, item</span>) =&gt;</span> xf.step(result, f(item)),</div><div class=\"line\">  <span class=\"attr\">result</span>: <span class=\"function\"><span class=\"params\">result</span> =&gt;</span> xf.result(result),</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p><code>map</code> transducer 接受一个 mapping 函数：<code>f</code>，并返回一个 transducer：</p>\n<ol>\n<li>接受一个已有 transformer</li>\n<li>返回一个新的 transformer，用来通过 <code>f</code> 转换 <code>items</code></li>\n<li>代理给封装的 transformer 额外的处理</li>\n</ol>\n<p>函数<code>f</code>可以是接受一个 item, 然后将其映射为一个新值的任意函数。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> plus1 = <span class=\"function\"><span class=\"params\">input</span> =&gt;</span> input + <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> plus2 = <span class=\"function\"><span class=\"params\">input</span> =&gt;</span> input + <span class=\"number\">2</span>;</div></pre></td></tr></table></figure></p>\n<p>在本节的例子中将继续使用这两个简单的函数。</p>\n<h2 id=\"transduce\">Transduce</h2>\n<p>我们定义了一个新函数，<code>transduce</code>, 其接受：</p>\n<ol>\n<li>一个 transducer: 定义transformation</li>\n<li>一个 stepper 函数，或 transformer (如 <code>append</code>)</li>\n<li>一个 stepper 函数 的初始值 (如 <code>[]</code>)</li>\n<li>输入源 (如一个待转换的数组)</li>\n</ol>\n<p>向 transducer 传入 <code>stepper</code> 函数，来创建一个 transformer, 然后将该 transformer、初始值和输入源一同传入 <code>reduce</code>。</p>\n<p>我们已经展示过，使用相同的 transducer 可以产生不同的结果，只要改变传入 <code>transduce</code> 的初始值和 <code>stepper</code> 函数</p>\n<h2 id=\"composition\">Composition</h2>\n<p>最后，我们展示了可以通过组合已有 transducers 来创建新的 transducers</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> compose2 = <span class=\"function\">(<span class=\"params\">fn1, fn2</span>) =&gt;</span> item =&gt; fn1(fn2(item));</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> transducer = compose2(</div><div class=\"line\">      compose2(map(plus1), map(plus2)),</div><div class=\"line\">      map(plus1));</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [6,7,8]</span></div></pre></td></tr></table></figure></p>\n<p>被组合的 transducer 从左向右对输入源进行转换。</p>\n<p>今天我们从这里开始讲起。如果对上例不熟悉，可以参考<a href=\"https://adispring.github.io/2016/10/24/Transducers-Explained-Part-1/\">第一篇文章</a></p>\n<h2 id=\"pipelines\">Pipelines</h2>\n<p>首先，定义一个新的函数，用它可以组合任意数量的函数。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> compose = <span class=\"function\">(<span class=\"params\">...fns</span>) =&gt;</span> xf =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> i = fns.length - <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">for</span>(; i &gt;=<span class=\"number\">0</span>; i--) &#123; xf = fns[i](xf); &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> xf;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>这只是上面定义的 <code>compose2</code> 的扩展。函数组合从右向左：返回的函数接受用于调用右侧最后一个函数的初始参数。该调用的返回值(输出)用作左侧下一个函数的参数(输入)。对于所有传入 <code>ompose</code> 的函数，重复执行该过程。</p>\n<p>可以通过组合 <code>plus1</code> 和 <code>plus2</code> 来创建 <code>plus4</code>。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 手动调用 </span></div><div class=\"line\"><span class=\"keyword\">const</span> value = plus1(plus1(plus2(<span class=\"number\">5</span>)));</div><div class=\"line\"><span class=\"comment\">// 9</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用组合函数 (允许重复使用被组合的函数)</span></div><div class=\"line\"><span class=\"keyword\">const</span> plus4 = compose(plus1, plus1, plus2);</div><div class=\"line\"><span class=\"keyword\">const</span> value = plus4(<span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"comment\">// 9</span></div></pre></td></tr></table></figure></p>\n<p>我们通过组合 <code>map</code> transducers 来创建一个 <code>plus5</code> transducer。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transducer = compose(</div><div class=\"line\">      map(plus1),  <span class=\"comment\">// [3,4,5]</span></div><div class=\"line\">      map(plus2),  <span class=\"comment\">// [5,6,7]</span></div><div class=\"line\">      map(plus1),  <span class=\"comment\">// [6,7,8]</span></div><div class=\"line\">      map(plus1)); <span class=\"comment\">// [7,8,9]</span></div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [7,8,9]</span></div></pre></td></tr></table></figure></p>\n<p>每个 transducer 旁边的注释将每次转换通过数组展示出来，这样每次完成一个完整的转换，更容易追踪转换的过程。</p>\n<p>然而，需要清楚，整个转换过程中，transducers 每次只顺序转换一个 item，并且不会产生中间结果。注释仅仅表示 pipeline 的每步的转换结果。我们将在下面继续讨论这个问题。</p>\n<p>实际上，虽然组合是从右向左，转换的顺序实际上是从左向右的（在示例中是从上向下）。（需要将 transducers 的组合顺序 和 组合后 transducers 对输入源的转换顺序区分开)。在本例中顺序并不重要，但下一个例子中，便需要考虑调用顺序了。</p>\n<h2 id=\"filter\">Filter</h2>\n<p>我们来定义 <code>filter</code> transducer</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> filter = <span class=\"function\"><span class=\"params\">predicate</span> =&gt;</span> xf =&gt; (&#123;</div><div class=\"line\">  <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> xf.init(),</div><div class=\"line\">  <span class=\"attr\">step</span>: <span class=\"function\">(<span class=\"params\">value, item</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> allow = predicate(item);</div><div class=\"line\">    <span class=\"keyword\">if</span>(allow)&#123;</div><div class=\"line\">      value = xf.step(value, item);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> value;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">result</span>: <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> xf.result(value),</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>注意到，只有在 predicate(断言) 返回 true 时，由 <code>filter</code> 返回的 transformer 才会代理给下一个(左侧) transformer。如果 predicate 返回 false，则会忽略该次 item，并返回上次的迭代结果。</p>\n<p>我们创建一个 transducer ，来过滤出所有奇数。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> isOdd = <span class=\"function\"><span class=\"params\">num</span> =&gt;</span> num % <span class=\"number\">2</span> === <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> transducer = filter(isOdd);</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [1,3,5]</span></div></pre></td></tr></table></figure></p>\n<p>我们创建了一个使用 <code>isOdd</code> predicate 来过滤元素的 transducer。然后使用 <code>transduce</code> 将其作用于一个整数数组，输出数组中只包含奇数。</p>\n<p>我们再创建一个函数，该函数返回一个检查与传入参数是否相等的 predicate。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// another predicate </span></div><div class=\"line\"><span class=\"keyword\">const</span> isEqual = <span class=\"function\"><span class=\"params\">y</span> =&gt;</span> x =&gt; x === y;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> transducer = filter(isEqual(<span class=\"number\">2</span>));</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [2]</span></div></pre></td></tr></table></figure></p>\n<p>可以看到，创建的 predicate `isEqual(2) 只允许数字 2 输出。</p>\n<p>再来一个辅助函数，接受一个 predicate，将其结果取反。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> not = <span class=\"function\"><span class=\"params\">predicate</span> =&gt;</span> x =&gt; !predicate(x);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> transducer = filter(not(isEqual(<span class=\"number\">2</span>)));</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [1,3,4,5]</span></div></pre></td></tr></table></figure></p>\n<p>我们修改了前面的例子：对 predicate <code>isEqual(2)</code> 取反，由此创建了一个移除输入源中所有数字 2 的 transducer。</p>\n<p>现在在我们的 pipeline 库中有了另一件武器，一起来把玩一下吧。</p>\n<h2 id=\"pipeline-shun-xu\">Pipeline 顺序</h2>\n<p>我们来对每个元素加 1，然后过滤出奇数。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transducer = compose(</div><div class=\"line\">      map(plus1),         <span class=\"comment\">// [2,3,4,5,6]</span></div><div class=\"line\">      filter(isOdd));     <span class=\"comment\">// [3,5]</span></div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [3,5]</span></div></pre></td></tr></table></figure></p>\n<p>首先调用 <code>map(plus1)</code> transducer 对每个元素加 1，然后调用下一步转换：过滤出所有奇数。</p>\n<p>我们改变一下 transducers 的顺序，看看会发生什么。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transducer = compose(</div><div class=\"line\">      filter(isOdd),      <span class=\"comment\">// [1,3,5]</span></div><div class=\"line\">      map(plus1));        <span class=\"comment\">// [2,4,6]</span></div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [2,4,6]</span></div></pre></td></tr></table></figure></p>\n<p>我们首先过滤出所有奇数。filter(<code>isOdd</code>) transformer 只将奇数传给下一个 transformer。所有传到下一步的元素(奇数)都会加1。</p>\n<p>上述表明了 <em>组合 transducers</em> 的两个重要性质：</p>\n<ol>\n<li>虽然组合是从右向左，但转换是从左向右。</li>\n<li>使用 transducers 越早减少 pipeline 中元素的数量，效率可能会越高。</li>\n</ol>\n<p>注意到，在最后一个例子中，<code>map(plus1)</code> 仅仅使用所有元素的子集调用。同样的，并未创建中间数组，仅仅作为注释便于理解而已。</p>\n<h2 id=\"remove\">Remove</h2>\n<p>开始讲另一个 transducer 了哈。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> remove = <span class=\"function\"><span class=\"params\">predicate</span> =&gt;</span> filter(not(predicate));</div></pre></td></tr></table></figure></p>\n<p>很简单吧。实际上，我们可以通过对 predicate 取反 和 重用 <code>filter</code> 来创建 <code>remove</code>。</p>\n<p>我们来实践一下。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transducer = compose(</div><div class=\"line\">      filter(isOdd),        <span class=\"comment\">// [1,3,5]</span></div><div class=\"line\">      map(plus1),           <span class=\"comment\">// [2,4,6] </span></div><div class=\"line\">      remove(isEqual(<span class=\"number\">4</span>)));  <span class=\"comment\">// [2,6]</span></div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [2,6]</span></div></pre></td></tr></table></figure></p>\n<p>首先过滤出奇数，然后对每项加1，然后删除 <code>4</code>。</p>\n<h2 id=\"drop\">Drop</h2>\n<p>如果我们想在迭代开始时跳过 <code>n</code> 个元素，该做么做呢？这正是 <code>drop</code> transducer 的本职。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> drop = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> xf =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> left = n;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> xf.init(),</div><div class=\"line\">    <span class=\"attr\">step</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, item</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(left &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        left--;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        value = xf.step(value, item);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> value;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">result</span>: <span class=\"function\"><span class=\"params\">result</span> =&gt;</span> xf.result(result),</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>你可以这样使用：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> transducer = drop(<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">var</span> init = [];</div><div class=\"line\"><span class=\"keyword\">var</span> input = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [3,4,5]</span></div></pre></td></tr></table></figure></p>\n<p>Drop 接受从列表开始待丢弃元素的个数。这是我们第一个用来创建有状态变换的 transducer 的示例。每次调用 <code>drop</code> transducer 来创建一个 transformation 时，便会创建一个变量 <code>left</code>，指示在当次 transformation时，还剩多少个需要被丢弃的元素。<code>left</code> 被初始化为 <code>n</code>。</p>\n<p>注意，我们使用一个无状态的 transducer 创建了一个有状态的 transformer。这是一个重要的区别。这意味着我们可以重用 <code>drop(2)</code> transducer 任意多次，而不必担心任何状态。状态是在 transformer 中创建的，而不是 transducer 中。</p>\n<p>假如我们不想丢弃，而是获取前 <code>n</code> 个元素并丢弃剩余元素，该怎么办呢？为方便实现，假设 <code>n &gt; 0</code>。</p>\n<p>我们来尝试一下。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> take = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> xf =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> left = n;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> xf.init(),</div><div class=\"line\">    <span class=\"attr\">step</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, item</span>)</span>&#123;</div><div class=\"line\">      value = xf.step(value, item);</div><div class=\"line\">      <span class=\"keyword\">if</span>(--left &lt;= <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        <span class=\"comment\">// 如何停止???</span></div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> value;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">result</span>: <span class=\"function\"><span class=\"params\">result</span> =&gt;</span> xf.result(result),</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>哦噢，麻烦来了。我们知道如何逐步处理每个元素，并且通过 transformer 的状态来保持剩余元素的计数。但是，如何停止对剩余元素的迭代呢？</p>\n<p>为什么我们需要表明我们已经完成，不再接受任何额外元素呢？不仅因为继续接受元素是一种浪费，还因为无法保证迭代能够完成。有可能迭代是无限的。如果可以，我们当然想终止无限迭代。</p>\n<p>那么如何表示提前终止呢？我们需要在看一下迭代的源代码：<code>transduce</code>。</p>\n<h2 id=\"reduce-redux-zhong-ji-reduce\">Reduce redux (终极 Reduce)</h2>\n<p>下面是当前 <code>transduce</code> 和 <code>reduce</code> 的定义，取自<a href=\"https://adispring.github.io/2016/10/24/Transducers-Explained-Part-1/\">第一篇文章</a>：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transduce = <span class=\"function\">(<span class=\"params\">transducer, stepper, init, input</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> stepper === <span class=\"string\">'function'</span>)&#123;</div><div class=\"line\">    stepper = wrap(stepper);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> xf = transducer(stepper);</div><div class=\"line\">  <span class=\"keyword\">return</span> reduce(xf, init, input);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> reduce(xf, init, input) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> xf === <span class=\"string\">'function'</span>)&#123;</div><div class=\"line\">    xf = wrap(xf);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// how do we stop?? </span></div><div class=\"line\">  <span class=\"keyword\">var</span> value = input.reduce(xf.step, init); </div><div class=\"line\">  <span class=\"keyword\">return</span> xf.result(value);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> wrap = <span class=\"function\"><span class=\"params\">stepper</span> =&gt;</span> (&#123;</div><div class=\"line\">  <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'init not supported'</span>),</div><div class=\"line\">  <span class=\"attr\">step</span>: stepper,</div><div class=\"line\">  <span class=\"attr\">result</span>: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>看一下上面的实现，便会发现，我们正在使用原生数组 <code>reduce</code> 方法进行迭代，<code>reduce</code> 的 reducing function 来自 transformer。后续文章中，我们将删除输入源是数组的假设，但现在还需继续使用改假设。我们来定义自己的 <code>arrayReduce</code> 实现。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> reduce = <span class=\"function\">(<span class=\"params\">xf, init, input</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> xf === <span class=\"string\">'function'</span>)&#123;</div><div class=\"line\">    xf = wrap(xf);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> arrayReduce(xf, init, input);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> arrayReduce(xf, init, array) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> value = init;</div><div class=\"line\">  <span class=\"keyword\">var</span> idx = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> length = array.length;</div><div class=\"line\">  <span class=\"keyword\">for</span>(; idx &lt; length; idx++)&#123;</div><div class=\"line\">    value = xf.step(value, array[idx]);</div><div class=\"line\">    <span class=\"comment\">// We need to break here, but how do we know?</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> xf.result(value);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><code>arrayReduce</code> 的实现接受一个 transformer 、初始值和输入数组。然后使用 <code>for</code> 循环遍历每个元素，并使用累加值 value 和数组元素来调用 transformer <code>step</code> 函数。</p>\n<p>我们需要一个方法来打破这个循环，打破循环需要依赖某些标记值。幸运的是，我们可以采用已有的 <a href=\"https://github.com/cognitect-labs/transducers-js#reduced\" target=\"_blank\" rel=\"external\">transducer 协议</a>。</p>\n<p>为了在调用 transformer 中的 <code>step</code> 之后发出提前终止信号，我们可以将 <em>reduced</em> 值封装在包含两个属性的对象中：</p>\n<ol>\n<li><code>value</code>: 存储实际要封装的值。</li>\n<li><code>__transducers_reduced__</code>: bool 类型值，为<code>true</code>时，表示该对象是 reduced 的，迭代需要被终止。</li>\n</ol>\n<p>实现如下：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> reduced = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> (&#123;</div><div class=\"line\">  <span class=\"attr\">value</span>: value,</div><div class=\"line\">  <span class=\"attr\">__transducers_reduced__</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>我们还将添加一个 predicate 来确定值是否是 reduced 。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> iReduced = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value &amp;&amp; value.__transducers_reduced__;</div></pre></td></tr></table></figure></p>\n<p>此外，我还需要一个方法来提取，或 <code>deref</code>(解引用) reduced 的值。</p>\n<p>现在我们可以优化 <code>arrayReduce</code> 来处理因 reduced values 提前终止的情况。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> arrayReduce =&gt; <span class=\"function\">(<span class=\"params\">xf, init, array</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> value = init;</div><div class=\"line\">  <span class=\"keyword\">var</span> idx = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> length = array.length;</div><div class=\"line\">  <span class=\"keyword\">for</span>(; idx &lt; length; idx++)&#123;</div><div class=\"line\">    value = xf.step(value, array[idx]);</div><div class=\"line\">    <span class=\"keyword\">if</span>(isReduced(value))&#123;</div><div class=\"line\">      value = deref(value);</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> xf.result(value);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们像以前一样对每个元素进行迭代，但每次调用 <code>step</code> 之后，我们检查是否得到一个 reduced value。如果是，我们提取值并终止迭代(中断循环)。我们仍然对最终值调用 <code>result</code> 方法，不管它来自 reduced value 还是完整的迭代。</p>\n<h2 id=\"take-2\">Take 2</h2>\n<p>现在可以完成 <code>take</code> 的实现了：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> take = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> xf =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> left = n;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> xf.init(),</div><div class=\"line\">    <span class=\"attr\">step</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, item</span>)</span>&#123;</div><div class=\"line\">      value = xf.step(value, item);</div><div class=\"line\">      <span class=\"keyword\">if</span>(--left &lt;= <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        <span class=\"comment\">// we are done, so signal reduced</span></div><div class=\"line\">        value = reduced(value);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> value;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">result</span>: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> xf.result(value),</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>我们之前唯一缺失的是：当检测到转换完成后使用 <code>reduced</code> 对值进行封装。(现在已经补上了)</p>\n<p>让我们看看它是否能工作：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transducer = take(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [1,2,3]</span></div></pre></td></tr></table></figure></p>\n<p>工作正常！</p>\n<p>就像任何其他的 transducer，你可以将 <code>drop</code> 和 <code>take</code> 组合成一个 pipeline</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transducer = compose(</div><div class=\"line\">    drop(<span class=\"number\">1</span>),    <span class=\"comment\">// [2,3,4,5]</span></div><div class=\"line\">    take(<span class=\"number\">3</span>),    <span class=\"comment\">// [2,3,4]</span></div><div class=\"line\">    drop(<span class=\"number\">1</span>));   <span class=\"comment\">// [3,4]</span></div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [3,4]</span></div></pre></td></tr></table></figure></p>\n<p>第一个 <code>drop</code> 跳过第一个元素，然后将剩余元素通过 step 传给下一个 transformer。<code>take</code>  transformer 逐一遍历从第一个 <code>drop</code> 传过来的数组的前三个元素，然后停止迭代。最后一个 <code>drop</code> 删除从 <code>take</code> 传过来的数组的首个元素，并且在终止之前逐一发送剩余的两个元素。</p>\n<h2 id=\"di-er-bu-fen-zong-jie\">第二部分总结</h2>\n<p>我们首先总结了在第一篇文章中学到的内容。我们增加了4个新的 transducers：<code>filter</code>、<code>remove</code>、<code>take</code>、<code>drop</code>。我们通过组合 transducers 来创建 transformer pipelines，并看到变换的顺序是从左到右。</p>\n<p>我们看到，除了在转换期间改变元素，一个 transformer 可以决定跳过任意元素，通过不调用下一个 transformer 的 <code>step</code> 来实现。每一个 transformer 的实现决定了什么会传递到下个 transformer。有些情况下， transformer 可能会发送多个值，例如 <code>cat</code> 或 <a href=\"https://github.com/transduce/transduce-string\" target=\"_blank\" rel=\"external\"><code>transduce-string</code></a>。</p>\n<p>我们还看到了可以创建有状态变换的 transducer 的一些例子。状态由 transformer 管理，而不是 transducer。这允许无状态 transducer 的重用，即时它们创建的 transformers 管理状态。</p>\n<p>当实现 <code>take</code> 时，我们意识到需要添加一个用于提前终止迭代的方法。我们改变了 <code>reduce</code> 的实现来处理和解包 reduced 的值，并且实现 <code>take</code> 用于在取完数据时终止迭代。</p>\n<h2 id=\"huan-you-bie-de-ma\">还有别的吗？</h2>\n<p>在入门教程的最后一篇文章中还有一些需要解释的相关问题。我们仍未解释 transformer 的 <code>init</code> 和 <code>reduce</code> 的作用。我们将添加 <code>into</code> 并一般化 <code>reduce</code> 的实现来支持迭代器。</p>\n<p>我们还看到输入元素可以是产生 sequence 值的任意东西：惰性列表、无限序列生成器、<a href=\"http://phuu.net/2014/08/31/csp-and-transducers.html\" target=\"_blank\" rel=\"external\">CSP</a>、<a href=\"https://github.com/transduce/transduce-stream\" target=\"_blank\" rel=\"external\">Node.js streams</a>、迭代器、生成器、immutable-js 数据结构等。</p>\n<p>想要获取新文章的通知吗？可以关注 获取 <a href=\"https://twitter.com/simplectic\" target=\"_blank\" rel=\"external\">simplectic</a> 的 Twitter。</p>\n<h2 id=\"wo-xian-zai-yi-jing-zhun-bei-hao-liao\">我现在已经准备好了！</h2>\n<p>已经准备使用 transducers 了吗？你应该已经具备良好的知识体系，如果通读了这篇文章：查看 <a href=\"https://github.com/cognitect-labs/transducers-js\" target=\"_blank\" rel=\"external\">transducers-js</a> 和 <a href=\"https://github.com/jlongster/transducers.js\" target=\"_blank\" rel=\"external\">transducers.js</a>。我们主要参考 transducers-js 的实现，但概念同样适用于 transducers.js。</p>\n<p>如果你喜欢 <a href=\"http://simplectic.com/projects/underarm\" target=\"_blank\" rel=\"external\">Underscore.js</a>，可以查看 <a href=\"http://underscorejs.org/\" target=\"_blank\" rel=\"external\">underarm</a>。它基于 <a href=\"https://github.com/transduce/transduce\" target=\"_blank\" rel=\"external\">transduce</a> 库，允许针对 transducers.js 和 transducer-js 支持的公共协议定义 API。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文是 Transducer Explained 教程的第二篇。在<a href=\"https://adispring.github.io/2016/10/24/Transducers-Explained-Part-1/\">第一篇</a>中，讲解从 <em>reducing functions</em> 开始， 到 <em>transformers</em>， 再到使用 <code>map</code> <em>transducers</em> 的 <code>transduce</code> 。本文中，将介绍四个新的 <em>transducers</em>：<code>filter</code>、<code>remove</code>、<code>drop</code> 和 <code>take</code>。我们将展示如何将 <em>transducers</em> 组合成 <em>pipeline</em>，并讨论转换的顺序。我们还将改变 <code>reduce</code> 的实现，使其能够借助 <code>reduced</code> 值 提前终止遍历操作。</p>\n<p>那么，上次讲到哪了呢？</p>\n<h2 id=\"transformer\">Transformer</h2>\n<p><a href=\"https://adispring.github.io/2016/10/24/Transducers-Explained-Part-1/\">第一篇</a>文章中，通过定义 <em>transformer</em> 协议规范了 <code>reduce</code> 的步骤。</p>\n<p>所有 transformers 都包含3个方法：</p>\n<ol>\n<li>使用初始值初始化 transformation，<code>init</code></li>\n<li>使用 <em>reducing function</em> 来组合每个元素，<code>step</code></li>\n<li>将最后计算的结果转换为输出，<code>result</code></li>\n</ol>\n<p>在第一篇文章中，我们使用 <em>reducing functions</em> ：<code>mult</code>、<code>add</code> 和 <code>append</code> 来转换输入值。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> append = <span class=\"function\">(<span class=\"params\">value, item</span>) =&gt;</span> value.push(item);</div></pre></td></tr></table></figure></p>\n<p>本文中，我们只会用到 <code>append</code>，将元素拼接到数组的尾部。</p>\n<h2 id=\"reduce\">Reduce</h2>\n<p>我们重新实现了 <code>reduce</code>，它接受以下参数：</p>\n<ol>\n<li>一个 transformer 或者将被封装成 transformer 的 <em>reducing Function</em></li>\n<li>一个初始值（例如<code>[]</code>)。</li>\n<li>一个输入源（例如传入 reduce 的数组）</li>\n</ol>\n<p>目前的实现使用 transformer 的 <code>step</code> 函数作为数组 <em>reducing function</em>，稍后将修改这一实现。</p>\n<p>在迭代过程中，使用两个参数来调用 <code>step</code> 函数：<code>value</code> 和 <code>item</code>。初始 value 由调用者提供，后续的每个 value 使用当前 <code>step</code> 函数的返回值。</p>\n<p><code>item</code> 由一些迭代过程（如何翻译？）提供。在第一篇文章中展示了两个过程：归约数组的每个元素，并使用每个新的 <code>item</code> 手动调用 <code>step</code> 函数。（在后续文章中我们将看到更多例子）。</p>\n<h2 id=\"transducer\">Transducer</h2>\n<p>我们创建了 mapping <em>transducer</em>。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> xf =&gt; (&#123;</div><div class=\"line\">  <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> xf.init(),</div><div class=\"line\">  <span class=\"attr\">step</span>: <span class=\"function\">(<span class=\"params\">result, item</span>) =&gt;</span> xf.step(result, f(item)),</div><div class=\"line\">  <span class=\"attr\">result</span>: <span class=\"function\"><span class=\"params\">result</span> =&gt;</span> xf.result(result),</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p><code>map</code> transducer 接受一个 mapping 函数：<code>f</code>，并返回一个 transducer：</p>\n<ol>\n<li>接受一个已有 transformer</li>\n<li>返回一个新的 transformer，用来通过 <code>f</code> 转换 <code>items</code></li>\n<li>代理给封装的 transformer 额外的处理</li>\n</ol>\n<p>函数<code>f</code>可以是接受一个 item, 然后将其映射为一个新值的任意函数。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> plus1 = <span class=\"function\"><span class=\"params\">input</span> =&gt;</span> input + <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> plus2 = <span class=\"function\"><span class=\"params\">input</span> =&gt;</span> input + <span class=\"number\">2</span>;</div></pre></td></tr></table></figure></p>\n<p>在本节的例子中将继续使用这两个简单的函数。</p>\n<h2 id=\"transduce\">Transduce</h2>\n<p>我们定义了一个新函数，<code>transduce</code>, 其接受：</p>\n<ol>\n<li>一个 transducer: 定义transformation</li>\n<li>一个 stepper 函数，或 transformer (如 <code>append</code>)</li>\n<li>一个 stepper 函数 的初始值 (如 <code>[]</code>)</li>\n<li>输入源 (如一个待转换的数组)</li>\n</ol>\n<p>向 transducer 传入 <code>stepper</code> 函数，来创建一个 transformer, 然后将该 transformer、初始值和输入源一同传入 <code>reduce</code>。</p>\n<p>我们已经展示过，使用相同的 transducer 可以产生不同的结果，只要改变传入 <code>transduce</code> 的初始值和 <code>stepper</code> 函数</p>\n<h2 id=\"composition\">Composition</h2>\n<p>最后，我们展示了可以通过组合已有 transducers 来创建新的 transducers</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> compose2 = <span class=\"function\">(<span class=\"params\">fn1, fn2</span>) =&gt;</span> item =&gt; fn1(fn2(item));</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> transducer = compose2(</div><div class=\"line\">      compose2(map(plus1), map(plus2)),</div><div class=\"line\">      map(plus1));</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [6,7,8]</span></div></pre></td></tr></table></figure></p>\n<p>被组合的 transducer 从左向右对输入源进行转换。</p>\n<p>今天我们从这里开始讲起。如果对上例不熟悉，可以参考<a href=\"https://adispring.github.io/2016/10/24/Transducers-Explained-Part-1/\">第一篇文章</a></p>\n<h2 id=\"pipelines\">Pipelines</h2>\n<p>首先，定义一个新的函数，用它可以组合任意数量的函数。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> compose = <span class=\"function\">(<span class=\"params\">...fns</span>) =&gt;</span> xf =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> i = fns.length - <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">for</span>(; i &gt;=<span class=\"number\">0</span>; i--) &#123; xf = fns[i](xf); &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> xf;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>这只是上面定义的 <code>compose2</code> 的扩展。函数组合从右向左：返回的函数接受用于调用右侧最后一个函数的初始参数。该调用的返回值(输出)用作左侧下一个函数的参数(输入)。对于所有传入 <code>ompose</code> 的函数，重复执行该过程。</p>\n<p>可以通过组合 <code>plus1</code> 和 <code>plus2</code> 来创建 <code>plus4</code>。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 手动调用 </span></div><div class=\"line\"><span class=\"keyword\">const</span> value = plus1(plus1(plus2(<span class=\"number\">5</span>)));</div><div class=\"line\"><span class=\"comment\">// 9</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用组合函数 (允许重复使用被组合的函数)</span></div><div class=\"line\"><span class=\"keyword\">const</span> plus4 = compose(plus1, plus1, plus2);</div><div class=\"line\"><span class=\"keyword\">const</span> value = plus4(<span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"comment\">// 9</span></div></pre></td></tr></table></figure></p>\n<p>我们通过组合 <code>map</code> transducers 来创建一个 <code>plus5</code> transducer。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transducer = compose(</div><div class=\"line\">      map(plus1),  <span class=\"comment\">// [3,4,5]</span></div><div class=\"line\">      map(plus2),  <span class=\"comment\">// [5,6,7]</span></div><div class=\"line\">      map(plus1),  <span class=\"comment\">// [6,7,8]</span></div><div class=\"line\">      map(plus1)); <span class=\"comment\">// [7,8,9]</span></div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [7,8,9]</span></div></pre></td></tr></table></figure></p>\n<p>每个 transducer 旁边的注释将每次转换通过数组展示出来，这样每次完成一个完整的转换，更容易追踪转换的过程。</p>\n<p>然而，需要清楚，整个转换过程中，transducers 每次只顺序转换一个 item，并且不会产生中间结果。注释仅仅表示 pipeline 的每步的转换结果。我们将在下面继续讨论这个问题。</p>\n<p>实际上，虽然组合是从右向左，转换的顺序实际上是从左向右的（在示例中是从上向下）。（需要将 transducers 的组合顺序 和 组合后 transducers 对输入源的转换顺序区分开)。在本例中顺序并不重要，但下一个例子中，便需要考虑调用顺序了。</p>\n<h2 id=\"filter\">Filter</h2>\n<p>我们来定义 <code>filter</code> transducer</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> filter = <span class=\"function\"><span class=\"params\">predicate</span> =&gt;</span> xf =&gt; (&#123;</div><div class=\"line\">  <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> xf.init(),</div><div class=\"line\">  <span class=\"attr\">step</span>: <span class=\"function\">(<span class=\"params\">value, item</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> allow = predicate(item);</div><div class=\"line\">    <span class=\"keyword\">if</span>(allow)&#123;</div><div class=\"line\">      value = xf.step(value, item);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> value;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">result</span>: <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> xf.result(value),</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>注意到，只有在 predicate(断言) 返回 true 时，由 <code>filter</code> 返回的 transformer 才会代理给下一个(左侧) transformer。如果 predicate 返回 false，则会忽略该次 item，并返回上次的迭代结果。</p>\n<p>我们创建一个 transducer ，来过滤出所有奇数。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> isOdd = <span class=\"function\"><span class=\"params\">num</span> =&gt;</span> num % <span class=\"number\">2</span> === <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> transducer = filter(isOdd);</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [1,3,5]</span></div></pre></td></tr></table></figure></p>\n<p>我们创建了一个使用 <code>isOdd</code> predicate 来过滤元素的 transducer。然后使用 <code>transduce</code> 将其作用于一个整数数组，输出数组中只包含奇数。</p>\n<p>我们再创建一个函数，该函数返回一个检查与传入参数是否相等的 predicate。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// another predicate </span></div><div class=\"line\"><span class=\"keyword\">const</span> isEqual = <span class=\"function\"><span class=\"params\">y</span> =&gt;</span> x =&gt; x === y;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> transducer = filter(isEqual(<span class=\"number\">2</span>));</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [2]</span></div></pre></td></tr></table></figure></p>\n<p>可以看到，创建的 predicate `isEqual(2) 只允许数字 2 输出。</p>\n<p>再来一个辅助函数，接受一个 predicate，将其结果取反。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> not = <span class=\"function\"><span class=\"params\">predicate</span> =&gt;</span> x =&gt; !predicate(x);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> transducer = filter(not(isEqual(<span class=\"number\">2</span>)));</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [1,3,4,5]</span></div></pre></td></tr></table></figure></p>\n<p>我们修改了前面的例子：对 predicate <code>isEqual(2)</code> 取反，由此创建了一个移除输入源中所有数字 2 的 transducer。</p>\n<p>现在在我们的 pipeline 库中有了另一件武器，一起来把玩一下吧。</p>\n<h2 id=\"pipeline-shun-xu\">Pipeline 顺序</h2>\n<p>我们来对每个元素加 1，然后过滤出奇数。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transducer = compose(</div><div class=\"line\">      map(plus1),         <span class=\"comment\">// [2,3,4,5,6]</span></div><div class=\"line\">      filter(isOdd));     <span class=\"comment\">// [3,5]</span></div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [3,5]</span></div></pre></td></tr></table></figure></p>\n<p>首先调用 <code>map(plus1)</code> transducer 对每个元素加 1，然后调用下一步转换：过滤出所有奇数。</p>\n<p>我们改变一下 transducers 的顺序，看看会发生什么。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transducer = compose(</div><div class=\"line\">      filter(isOdd),      <span class=\"comment\">// [1,3,5]</span></div><div class=\"line\">      map(plus1));        <span class=\"comment\">// [2,4,6]</span></div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [2,4,6]</span></div></pre></td></tr></table></figure></p>\n<p>我们首先过滤出所有奇数。filter(<code>isOdd</code>) transformer 只将奇数传给下一个 transformer。所有传到下一步的元素(奇数)都会加1。</p>\n<p>上述表明了 <em>组合 transducers</em> 的两个重要性质：</p>\n<ol>\n<li>虽然组合是从右向左，但转换是从左向右。</li>\n<li>使用 transducers 越早减少 pipeline 中元素的数量，效率可能会越高。</li>\n</ol>\n<p>注意到，在最后一个例子中，<code>map(plus1)</code> 仅仅使用所有元素的子集调用。同样的，并未创建中间数组，仅仅作为注释便于理解而已。</p>\n<h2 id=\"remove\">Remove</h2>\n<p>开始讲另一个 transducer 了哈。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> remove = <span class=\"function\"><span class=\"params\">predicate</span> =&gt;</span> filter(not(predicate));</div></pre></td></tr></table></figure></p>\n<p>很简单吧。实际上，我们可以通过对 predicate 取反 和 重用 <code>filter</code> 来创建 <code>remove</code>。</p>\n<p>我们来实践一下。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transducer = compose(</div><div class=\"line\">      filter(isOdd),        <span class=\"comment\">// [1,3,5]</span></div><div class=\"line\">      map(plus1),           <span class=\"comment\">// [2,4,6] </span></div><div class=\"line\">      remove(isEqual(<span class=\"number\">4</span>)));  <span class=\"comment\">// [2,6]</span></div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [2,6]</span></div></pre></td></tr></table></figure></p>\n<p>首先过滤出奇数，然后对每项加1，然后删除 <code>4</code>。</p>\n<h2 id=\"drop\">Drop</h2>\n<p>如果我们想在迭代开始时跳过 <code>n</code> 个元素，该做么做呢？这正是 <code>drop</code> transducer 的本职。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> drop = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> xf =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> left = n;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> xf.init(),</div><div class=\"line\">    <span class=\"attr\">step</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, item</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(left &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        left--;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        value = xf.step(value, item);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> value;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">result</span>: <span class=\"function\"><span class=\"params\">result</span> =&gt;</span> xf.result(result),</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>你可以这样使用：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> transducer = drop(<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">var</span> init = [];</div><div class=\"line\"><span class=\"keyword\">var</span> input = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [3,4,5]</span></div></pre></td></tr></table></figure></p>\n<p>Drop 接受从列表开始待丢弃元素的个数。这是我们第一个用来创建有状态变换的 transducer 的示例。每次调用 <code>drop</code> transducer 来创建一个 transformation 时，便会创建一个变量 <code>left</code>，指示在当次 transformation时，还剩多少个需要被丢弃的元素。<code>left</code> 被初始化为 <code>n</code>。</p>\n<p>注意，我们使用一个无状态的 transducer 创建了一个有状态的 transformer。这是一个重要的区别。这意味着我们可以重用 <code>drop(2)</code> transducer 任意多次，而不必担心任何状态。状态是在 transformer 中创建的，而不是 transducer 中。</p>\n<p>假如我们不想丢弃，而是获取前 <code>n</code> 个元素并丢弃剩余元素，该怎么办呢？为方便实现，假设 <code>n &gt; 0</code>。</p>\n<p>我们来尝试一下。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> take = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> xf =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> left = n;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> xf.init(),</div><div class=\"line\">    <span class=\"attr\">step</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, item</span>)</span>&#123;</div><div class=\"line\">      value = xf.step(value, item);</div><div class=\"line\">      <span class=\"keyword\">if</span>(--left &lt;= <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        <span class=\"comment\">// 如何停止???</span></div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> value;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">result</span>: <span class=\"function\"><span class=\"params\">result</span> =&gt;</span> xf.result(result),</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>哦噢，麻烦来了。我们知道如何逐步处理每个元素，并且通过 transformer 的状态来保持剩余元素的计数。但是，如何停止对剩余元素的迭代呢？</p>\n<p>为什么我们需要表明我们已经完成，不再接受任何额外元素呢？不仅因为继续接受元素是一种浪费，还因为无法保证迭代能够完成。有可能迭代是无限的。如果可以，我们当然想终止无限迭代。</p>\n<p>那么如何表示提前终止呢？我们需要在看一下迭代的源代码：<code>transduce</code>。</p>\n<h2 id=\"reduce-redux-zhong-ji-reduce\">Reduce redux (终极 Reduce)</h2>\n<p>下面是当前 <code>transduce</code> 和 <code>reduce</code> 的定义，取自<a href=\"https://adispring.github.io/2016/10/24/Transducers-Explained-Part-1/\">第一篇文章</a>：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transduce = <span class=\"function\">(<span class=\"params\">transducer, stepper, init, input</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> stepper === <span class=\"string\">'function'</span>)&#123;</div><div class=\"line\">    stepper = wrap(stepper);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> xf = transducer(stepper);</div><div class=\"line\">  <span class=\"keyword\">return</span> reduce(xf, init, input);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> reduce(xf, init, input) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> xf === <span class=\"string\">'function'</span>)&#123;</div><div class=\"line\">    xf = wrap(xf);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// how do we stop?? </span></div><div class=\"line\">  <span class=\"keyword\">var</span> value = input.reduce(xf.step, init); </div><div class=\"line\">  <span class=\"keyword\">return</span> xf.result(value);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> wrap = <span class=\"function\"><span class=\"params\">stepper</span> =&gt;</span> (&#123;</div><div class=\"line\">  <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'init not supported'</span>),</div><div class=\"line\">  <span class=\"attr\">step</span>: stepper,</div><div class=\"line\">  <span class=\"attr\">result</span>: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>看一下上面的实现，便会发现，我们正在使用原生数组 <code>reduce</code> 方法进行迭代，<code>reduce</code> 的 reducing function 来自 transformer。后续文章中，我们将删除输入源是数组的假设，但现在还需继续使用改假设。我们来定义自己的 <code>arrayReduce</code> 实现。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> reduce = <span class=\"function\">(<span class=\"params\">xf, init, input</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> xf === <span class=\"string\">'function'</span>)&#123;</div><div class=\"line\">    xf = wrap(xf);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> arrayReduce(xf, init, input);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> arrayReduce(xf, init, array) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> value = init;</div><div class=\"line\">  <span class=\"keyword\">var</span> idx = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> length = array.length;</div><div class=\"line\">  <span class=\"keyword\">for</span>(; idx &lt; length; idx++)&#123;</div><div class=\"line\">    value = xf.step(value, array[idx]);</div><div class=\"line\">    <span class=\"comment\">// We need to break here, but how do we know?</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> xf.result(value);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><code>arrayReduce</code> 的实现接受一个 transformer 、初始值和输入数组。然后使用 <code>for</code> 循环遍历每个元素，并使用累加值 value 和数组元素来调用 transformer <code>step</code> 函数。</p>\n<p>我们需要一个方法来打破这个循环，打破循环需要依赖某些标记值。幸运的是，我们可以采用已有的 <a href=\"https://github.com/cognitect-labs/transducers-js#reduced\" target=\"_blank\" rel=\"external\">transducer 协议</a>。</p>\n<p>为了在调用 transformer 中的 <code>step</code> 之后发出提前终止信号，我们可以将 <em>reduced</em> 值封装在包含两个属性的对象中：</p>\n<ol>\n<li><code>value</code>: 存储实际要封装的值。</li>\n<li><code>__transducers_reduced__</code>: bool 类型值，为<code>true</code>时，表示该对象是 reduced 的，迭代需要被终止。</li>\n</ol>\n<p>实现如下：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> reduced = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> (&#123;</div><div class=\"line\">  <span class=\"attr\">value</span>: value,</div><div class=\"line\">  <span class=\"attr\">__transducers_reduced__</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>我们还将添加一个 predicate 来确定值是否是 reduced 。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> iReduced = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value &amp;&amp; value.__transducers_reduced__;</div></pre></td></tr></table></figure></p>\n<p>此外，我还需要一个方法来提取，或 <code>deref</code>(解引用) reduced 的值。</p>\n<p>现在我们可以优化 <code>arrayReduce</code> 来处理因 reduced values 提前终止的情况。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> arrayReduce =&gt; <span class=\"function\">(<span class=\"params\">xf, init, array</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> value = init;</div><div class=\"line\">  <span class=\"keyword\">var</span> idx = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> length = array.length;</div><div class=\"line\">  <span class=\"keyword\">for</span>(; idx &lt; length; idx++)&#123;</div><div class=\"line\">    value = xf.step(value, array[idx]);</div><div class=\"line\">    <span class=\"keyword\">if</span>(isReduced(value))&#123;</div><div class=\"line\">      value = deref(value);</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> xf.result(value);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们像以前一样对每个元素进行迭代，但每次调用 <code>step</code> 之后，我们检查是否得到一个 reduced value。如果是，我们提取值并终止迭代(中断循环)。我们仍然对最终值调用 <code>result</code> 方法，不管它来自 reduced value 还是完整的迭代。</p>\n<h2 id=\"take-2\">Take 2</h2>\n<p>现在可以完成 <code>take</code> 的实现了：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> take = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> xf =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> left = n;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> xf.init(),</div><div class=\"line\">    <span class=\"attr\">step</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, item</span>)</span>&#123;</div><div class=\"line\">      value = xf.step(value, item);</div><div class=\"line\">      <span class=\"keyword\">if</span>(--left &lt;= <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        <span class=\"comment\">// we are done, so signal reduced</span></div><div class=\"line\">        value = reduced(value);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> value;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">result</span>: <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> xf.result(value),</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>我们之前唯一缺失的是：当检测到转换完成后使用 <code>reduced</code> 对值进行封装。(现在已经补上了)</p>\n<p>让我们看看它是否能工作：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transducer = take(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [1,2,3]</span></div></pre></td></tr></table></figure></p>\n<p>工作正常！</p>\n<p>就像任何其他的 transducer，你可以将 <code>drop</code> 和 <code>take</code> 组合成一个 pipeline</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> transducer = compose(</div><div class=\"line\">    drop(<span class=\"number\">1</span>),    <span class=\"comment\">// [2,3,4,5]</span></div><div class=\"line\">    take(<span class=\"number\">3</span>),    <span class=\"comment\">// [2,3,4]</span></div><div class=\"line\">    drop(<span class=\"number\">1</span>));   <span class=\"comment\">// [3,4]</span></div><div class=\"line\"><span class=\"keyword\">const</span> stepper = append;</div><div class=\"line\"><span class=\"keyword\">const</span> init = [];</div><div class=\"line\"><span class=\"keyword\">const</span> input = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">const</span> output = transduce(transducer, stepper, init, input);</div><div class=\"line\"><span class=\"comment\">// [3,4]</span></div></pre></td></tr></table></figure></p>\n<p>第一个 <code>drop</code> 跳过第一个元素，然后将剩余元素通过 step 传给下一个 transformer。<code>take</code>  transformer 逐一遍历从第一个 <code>drop</code> 传过来的数组的前三个元素，然后停止迭代。最后一个 <code>drop</code> 删除从 <code>take</code> 传过来的数组的首个元素，并且在终止之前逐一发送剩余的两个元素。</p>\n<h2 id=\"di-er-bu-fen-zong-jie\">第二部分总结</h2>\n<p>我们首先总结了在第一篇文章中学到的内容。我们增加了4个新的 transducers：<code>filter</code>、<code>remove</code>、<code>take</code>、<code>drop</code>。我们通过组合 transducers 来创建 transformer pipelines，并看到变换的顺序是从左到右。</p>\n<p>我们看到，除了在转换期间改变元素，一个 transformer 可以决定跳过任意元素，通过不调用下一个 transformer 的 <code>step</code> 来实现。每一个 transformer 的实现决定了什么会传递到下个 transformer。有些情况下， transformer 可能会发送多个值，例如 <code>cat</code> 或 <a href=\"https://github.com/transduce/transduce-string\" target=\"_blank\" rel=\"external\"><code>transduce-string</code></a>。</p>\n<p>我们还看到了可以创建有状态变换的 transducer 的一些例子。状态由 transformer 管理，而不是 transducer。这允许无状态 transducer 的重用，即时它们创建的 transformers 管理状态。</p>\n<p>当实现 <code>take</code> 时，我们意识到需要添加一个用于提前终止迭代的方法。我们改变了 <code>reduce</code> 的实现来处理和解包 reduced 的值，并且实现 <code>take</code> 用于在取完数据时终止迭代。</p>\n<h2 id=\"huan-you-bie-de-ma\">还有别的吗？</h2>\n<p>在入门教程的最后一篇文章中还有一些需要解释的相关问题。我们仍未解释 transformer 的 <code>init</code> 和 <code>reduce</code> 的作用。我们将添加 <code>into</code> 并一般化 <code>reduce</code> 的实现来支持迭代器。</p>\n<p>我们还看到输入元素可以是产生 sequence 值的任意东西：惰性列表、无限序列生成器、<a href=\"http://phuu.net/2014/08/31/csp-and-transducers.html\" target=\"_blank\" rel=\"external\">CSP</a>、<a href=\"https://github.com/transduce/transduce-stream\" target=\"_blank\" rel=\"external\">Node.js streams</a>、迭代器、生成器、immutable-js 数据结构等。</p>\n<p>想要获取新文章的通知吗？可以关注 获取 <a href=\"https://twitter.com/simplectic\" target=\"_blank\" rel=\"external\">simplectic</a> 的 Twitter。</p>\n<h2 id=\"wo-xian-zai-yi-jing-zhun-bei-hao-liao\">我现在已经准备好了！</h2>\n<p>已经准备使用 transducers 了吗？你应该已经具备良好的知识体系，如果通读了这篇文章：查看 <a href=\"https://github.com/cognitect-labs/transducers-js\" target=\"_blank\" rel=\"external\">transducers-js</a> 和 <a href=\"https://github.com/jlongster/transducers.js\" target=\"_blank\" rel=\"external\">transducers.js</a>。我们主要参考 transducers-js 的实现，但概念同样适用于 transducers.js。</p>\n<p>如果你喜欢 <a href=\"http://simplectic.com/projects/underarm\" target=\"_blank\" rel=\"external\">Underscore.js</a>，可以查看 <a href=\"http://underscorejs.org/\" target=\"_blank\" rel=\"external\">underarm</a>。它基于 <a href=\"https://github.com/transduce/transduce\" target=\"_blank\" rel=\"external\">transduce</a> 库，允许针对 transducers.js 和 transducer-js 支持的公共协议定义 API。</p>\n"}],"PostAsset":[{"_id":"source/_posts/Transducers-Explained-Part-1/transduce.png","slug":"transduce.png","post":"cj3vm14he000f3bs68jib4tzq","modified":0,"renderable":0},{"_id":"source/_posts/Ramda-map-filter-reduce-transduce/mapFilterReduce.jpg","slug":"mapFilterReduce.jpg","post":"cj3vm14h500083bs6r7ce0h0z","modified":0,"renderable":0},{"_id":"source/_posts/Transducers-Explained-Part-1/compose_transducers.png","slug":"compose_transducers.png","post":"cj3vm14he000f3bs68jib4tzq","modified":0,"renderable":0},{"_id":"source/_posts/Transducers-Explained-Part-1/reduce.png","slug":"reduce.png","post":"cj3vm14he000f3bs68jib4tzq","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cj3vm14h400073bs66iu5htpy","category_id":"cj3vm14h000053bs6y2ve7nd4","_id":"cj3vm14hc000b3bs6c3ilaa3v"},{"post_id":"cj3vm14gr00033bs63uv6qhri","category_id":"cj3vm14h000053bs6y2ve7nd4","_id":"cj3vm14he000e3bs6a9c7grzm"},{"post_id":"cj3vm14gu00043bs6afizhkle","category_id":"cj3vm14h000053bs6y2ve7nd4","_id":"cj3vm14hg000g3bs6lihl1gju"},{"post_id":"cj3vm14hc000c3bs6upqzpw23","category_id":"cj3vm14h000053bs6y2ve7nd4","_id":"cj3vm14hh000i3bs6a751lfmz"},{"post_id":"cj3vm14h200063bs6ru9pts7u","category_id":"cj3vm14h000053bs6y2ve7nd4","_id":"cj3vm14hh000j3bs6r6eh44e1"}],"PostTag":[],"Tag":[]}}